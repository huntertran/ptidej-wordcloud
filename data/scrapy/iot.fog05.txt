Eclipse fog05 | projects.eclipse.org
Google Tag Manager
Skip to main content
Log in
Manage Cookies
projects.eclipse.org
Download
Members
Working Groups
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Toggle navigation
Home
Projects
Eclipse IoT
Eclipse fog05
Eclipse fog05
Primary tabs
Overview
(active tab)
Downloads
Who's Involved
Developer Resources
Governance
Contact Us
Early IoT applications, especially those addressing the consumer market, have been embracing cloud-centric architectures in which data is pushed up to the cloud. It is within the cloud the everything takes place before eventually pushing some data or action back to the edge. This architectural approach leverages the availability and operational maturity of the cloud but it is not generally applicable in IoT / Cyber Physical Systems (CPS).
Figure1– Cloud centric architecture.
The cloud-centric paradigm quickly shows its limitations in the context of Industrial IoT (IIoT) and in general with Cyber Physical Systems (CPS). More specifically, the following assumptions, at the foundation of cloud-centric architectures, are generally violated in IIoT applications:
Connectivity.
Cloud-centric architectures assume that things are sufficiently often connected. While this is mostly true for IoT applications, it is far from being the common case in IIoT applications. As an example, autonomous agricultural vehicles, or robots in a smart farm are often deployed in locations with very poor connectivity.
Latency.
Cloud-centric architectures assume applications can tolerate the latency associated with pushing data from things to the cloud, processing information on the cloud and eventually sending back some control information. This latency, is orders of magnitude higher of the reaction times required by several IIoT applications, such as, autonomous vehicles, smart factories and smart grids.
Throughput.
Cloud-centric architectures assume that the throughput required to push data from things to the cloud may be massive when looking at the aggregate traffic, but it is generally composed by limited individual flows. In IIoT the situation is quite different as, often, there are data flows with high individual throughput and in several applications the aggregate volume is incredibly high. This makes it unfeasible or not very effective to stream these massive volumes of data to a data centre.
Cost of Connectivity
. Consumer IoT (CIoT) commonly assumes that the cost of connectivity is negligible. This stems from the fact that consumer pays for connectivity – either via their mobile data plan or their home internet connection. In IIoT the situation is completely different, it is the owner of the system that pays for connectivity. This cost is non-negligible in applications with large number of data streams, such as Smart Grids as well as for applications deployed in remote areas such as oil exploitation rigs that can only rely on expensive satellite communication where 1MByte of data can cost as much as $8!
Security.
Cloud-centric architectures operate under the assumption that end-users are comfortable in giving away their data. While this may be true for CIoT applications, the situation is completely different in IIoT. Information is a strategic asset which the vast majority of companies, operating in an industrial, do not want to leave their premises.
Fog computing has emerged as an architectural approach to deal with the limitations exposed by cloud-centric architectures in the context of CPS and IIoT applications.
fog05
is an infrastructure designed from first principle to address the needs of fog computing.
Eclipse fog05
fog05
Figure2–
fog05
end-to-end resource virtualisation.
fog05
makes available a set of abstractions to unify the compute, storage and communication fabric end-to-end, thus allowing applications to be managed, monitored and orchestrated across the cloud to thing continuum.
In other terms,
fog05
provides the same
abstraction
of an elastic compute, storage and communication fabric but in a decentralised fashion. The main advantages of this architectural approach, when compared with cloud computing, is the ability to keep the data and the processing close to where it makes the most sense, which in many cases is close to where the data is produced.
Finally, it is worth mentioning that the "
5
" in
fog05
beside representing the letter "S" in hackers jargon, it refers to 5G and specifically to Multi-access Edge Computing.
fog05
addresses the needs of MEC and is compatible with ETSI MEC manifests.
Licenses:
Apache License, Version 2.0
Eclipse Public License 2.0
Latest Releases:
From February 14th, 2020 to February 14th, 2020
Name
Date
Review
0.1.0 (Prelude)
2020-02-14
Contribution Activity:
Commits on this project (last 12 months).
Project Links
Getting Started
Website
Documentation
Related Projects
Related Projects:
Eclipse IoT
Eclipse zenoh
Project Hierarchy:
Eclipse IoT
Eclipse fog05
Tags
Technology Types
Internet of Things
Build Enterprise Java on Kubernetes!
A co-located event with KubeCon + CloudNativeCon EU on March 30, 2020
Register Today
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
