Eclipse unide - Welcome
Home
Proposal
Specification
Blog Archives
FAQ
Understand Industry devices
Languages of the world
Imagine the following: You go on vacation to a foreign country and want to get by. Usually you will neither have the time nor the resources to learn a new language for each trip. Luckily this is not necessary. A handful of simple phrases such as hello, I am hungry, etc. are already sufficient to cope with many situations. To have such phrases at hand you donâ€™t need to be fluent in a language, a mini phrase book will already cover a good portion. Thus, to master common situations in different languages you will be well served by a collection of mini phrase books in different languages.
Machines in production
A simple approach to send and understand such industry-specific content implemented for multiple systems would ease the use of the existing Eclipse iot stack and thereby help a lot on the way to a connected industry.
Collaboration with partner Production Performance Management Protocol (PPMP)
Through hands-on experience and collaboration with customers and partners we learned which information is key in understanding industry devices. For example, when sending measurements, the currently produced part or lot number together with machine identification are crucial to get any useful interpretation out of the information.
We started to capture this information in a simple payload specification and just like in the introducing language example where you can use phrases via phone, letter or in person, the payload is meant to be sent over different protocols (REST, MQTT, AMQP). This payload is the Production Performance Management Protocol (PPMP).
In order to, first, leverage the Eclipse IoT stack in Industry 4.0 scenarios and, second, build a lively community around the specification, we consider the Eclipse iot working group as the premier place to host Unide.
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
Eclipse unide - Frequently asked questions
Home
Proposal
Specification
Blog Archives
FAQ
Frequently Asked Questions
We assembled a few frequently asked questions about the Production Performance Protocol (PPMP) and the Unide project. You're welcome to raise your questions in the Unide forum.
What does "Unide" stand for?
The projects name is derived from understand industry devices. Other ideas like connect industry machines turned out to have meanings in foreign languages or being trademarked already.Regarding the logo: Unide and Production Performance Management Protocol's goal is to enable you to connect machines and receive their measurements / alerts. The logo represents that. It has you ('U') highlighted and connects to rings. As a side note, we found that the words almost look like you-nice.
What's the difference between Unide and the Production Performance Management Protocol?
The Production Performance Mangement Protocol (PPMP) is the name of the structure of the payload whereas Unide is the project that aims to provide sample implementations and further development of this protocol in and with the Eclipse Open Source community. Nevertheless, the Production Performance Management Protocol is an open suggestion, and everyone is welcome to using it, even without contributing to the Unide project.
Why introducing another industry protocol?
There are already plenty of transport protocols (REST, AMQP, etc.) available. The Production Performance Management Protocol aims to provide the very industry specific semantic structure for their payload. So it aims to complete such IoT transport infrastructure and bridge the gap to the manufacturing domain. OPC-DA/UA on the other hand covers full service oriented architecture, security concerns and information model, which makes it more complex and costly to implement and operate. In some use cases, this is not necessary.
Why have you choosen JSON as syntax?
JSON is a good fit regarding understandability and size. Having a structured and comprehensible basis is the first step for acceptance in the industry. In the spirit of Donald E. Knuth ("premature optimization is the root of all evil"), further compacting is possible in a later stage.
Why are time and measurement points separated in multiple arrays?
I'm interested in Unide/Production Performance Management Protocol. How can I contribute?
The first goal of Unide is to provide sample client/server implementations of the Production Performance Management Protocol. Secondly, we're looking forward to improving the Production Performance Management Protocol in future versions together with the eclipse community.If you want to contribute with source code, use cases or implementing it in your devices, let us know and discuss in the unide forum or by forking / filing an issue on github.
Why have you included content-spec uri, if that can also be expressed in the a REST url already?
content-spec is included in the payload, because the Production Performance Management Protocol does not rely on a specific transport protocol (like REST).
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
Eclipse unide - Specification
Eclipse unide - Welcome
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
Eclipse unide - Recent Posts
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
Home
Proposal
Specification
Blog Archives
FAQ
What is Unide?
Industry benefits of Unide
This open source project aims to make PPM affordable for smaller organizations by reducing cost and complexity of data communication. Through sample implementations of a simple information structure (Production Performance Management Protocol - PPMP) tailored to manufacturing environments, we want to encourage the community to use, share, and evolve this structure together. The Production Performance Management Protocol has already been introduced as part of a PPM testbed at a medium-sized Bosch plant, working with many SMEs as partners and suppliers. Furthermore, this testbed aims to create an ecosystem which allows SMEs and larger companies to collaborate efficiently. The Production Performance Management Protocol takes an important role by ensuring interoperability between different types of devices and software. It is designed to gather and aggregate machine and sensor data from different devices. It focuses on defining the JSON payload which can be transferred via a variety of transports (REST, AMQP, MQTT). The primary goals of the Production Performance Management Protocol are: Integrating devices (across domains; e.g. manufacturing or energy) for data aggregation and gathering purposes Providing a very lightweight and easy-to-use solution for small and medium-sized enterprises (SMEs)
Scope
The Eclipse Unide project publishes the current version of Production Performance Management Protocol (PPMP) and develops simple server/client implementations. The implementations store the payloads in a database and displays them through a simple user interface. Everyone can then use these samples for their custom condition monitoring applications. The project will contain: Production Performance Management Protocol Specification: Machine message and measurement interfaces JSON based Versioned Client: Chrome / nw.js App For Industry Machines and Devices Node.js/Python client running on Raspberry Pi Server: (REST) Server including persistence and simple data visualization Multiple examples for different technologies
Description
Eclipse Unide provides a lightweight Production Performance Management Protocol (PPMP) server-client implementations (using JSON, REST and other). The core of the protocol are two interface definitions: Production Performance Management Protocol Measurement Interface: This is a public REST API with the purpose of receiving time series and machine data. Production Performance Management Protocol Messages Interface: This is a public REST API with the purpose of receiving machine messages.
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
Home
Proposal
Specification
Blog Archives
FAQ
Recent Posts
Protocol v3 final
November 26, 2019
Protocol Version 3 release candidate
March 01, 2019
Use Cases: Template for transformation
September 04, 2018
Unide 0.2.0 released
March 26, 2018, 12:39
Use Cases: Unide and the Eclipse Testbed
February 13, 2018
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
3
)
Process Message
Why Here?
The Production Performance Management Protocol extends the existing Eclipse IoT world by providing an easy and lightweight format for gathering data from industry sensors and machines, focusing on normalizing time series and alert messages. It can be transported by protocols like REST, AMQP, MQTT. As the Production Performance Management Protocol, these technologies do also not require complex and expensive middleware nor do their systems cause additional license fees. Eclipse is an excellent platform for developing Production Performance Management Protocol sample implementations and evolving the format hands-on with the community. In fact, it could even join forces with existing Eclipse IoT projects like Hono, Paho or Kura. Interested Parties CONTACT Software GmbH Balluff GmbH SAP, Industry Standards & Open Source Tata Consultancy Services, Internet of Things Group Dassault SystÃ¨mes CADIS Service GmbH EGT AG KLW Karl Lutz GmbH RAMPF Machine Systems GmbH & Co. KG J. Schmalz GmbH Bosch Software Innovations GmbH
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(v
2
/
3
)
Communicating Parties
Two parties are involved in a Production Performance Management Protocol message exchange: the sender and the receiver. The sender pushes a message to the receiver. Usually the sender is a machine or a sensor of a machine.
The receiver waits for messages. It offers a API that allows for sending either measurement payloads or message payloads.
The communication is unidirectional. Only the sender can contact the receiver and send messages. No feedback from receiver to sender is provided.
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
Eclipse unide - Protocol v3 final
Home
Proposal
Specification
Blog Archives
FAQ
Protocol v3 final
11/26/19
Version 3 of the Production Performance Management Protocol (Production Performance Management Protocol) has been finalized!
Thanks to CONTACT Software, Balluff GmbH, Bosch Plant Blaichach and Bosch Connected Industry for their proposals, ideas and patience.
The major improvements in Version 3 include consistent structure and naming, context for measurements and better extensibility.
Easy validation
Did you know that you can easily validate your payload against the published online version of Production Performance Management Protocol? For example, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Changes
Eclipse unide - Protocol Version 3 release candidate
Eclipse unide - October 2016
General
content-spec is now "urn:spec://eclipse.org/unide/< type >-message#v3"
A common id is used and replaces different spellings in deviceID, partID, program.id.
additionalData in the various sections is used for any kind of not-specified data, that should be honored by the receiving party as context information. Where v2's metaData had to be key/String pairs, additionalData can also be complex JSON objects.
In addition to additionalData, it is possible to include completely undefined keys in most places, in order to introduce custom or future keys. With it, it's e.g. possible to define and test currently meaningless 'window' key as an extension to limits.
A common definition.json schema is used for sections that are used in multiple telegrams. With the help of JSON schema 'anyOf', sections inherit and can extend from these base definitions.
messages
Messages can have a state to indicate if this alert newly appeared (NEW) or disappeared (ENDED). Together with a common code, it is now possible e.g. to correlate events like "pressure too high" and "pressure not too high anymore".
What was before type has now been renamed to source to indicate if the message comes from the DEVICE itself or from the general infrastructure TECHNICAL_INFO.
Eclipse unide - Use Cases: Template for transformation
Eclipse unide - April 2019
Eclipse unide - March 2018
Eclipse unide - October 2018
Eclipse unide - April 2018
Eclipse unide - April 2017
Eclipse unide - February 2018
Eclipse unide - Use Cases: Unide and the Eclipse Testbed
Eclipse unide - November 2017
Home
Proposal
Specification
Blog Archives
FAQ
Protocol Version 3 release candidate
03/01/19
After a long discussion phase, the Production Performance Management Protocol version 3 is finally linked on the specification page. Special thanks to bgusach, bf-bryants, muelsen and alaendle for their contributions via github issues!
The most important changes
context section in measurements
The optional context section ccontains information on how to interpret the measurements. This includes
the field 'type' (Number, String or Boolean value) indicates which format the <values> of a series have.
The unit key can be used to describe the unit of measurement. There are different understandings and standarizations for units ('C' stands for Coulomb, not Celsius), like International System of Units, SenML, ISO 80000-1:2009, etc.. The unit key here is a string without further restriction. If that is needed, it can be specified via an URI in namespace.
namespace may contain an URI to identify further detail on the values in this measurement section. This can be a description of units, lengths or naming conventions for measurement points, but also a reference to a semantic model.
series can contain other than numeric measurements
Home
Proposal
Specification
Blog Archives
FAQ
October 2016
News Coverage
27, 11:14
Official launch
21, 11:47
Eclipse Project approved
16, 14:16
Unide proposal online
12, 11:26
Recent Posts
The type in v3 indicates the debug level of the message (INFO, WARNING, ERROR, UNKNOWN) and complements severity for describing urgency and relevance of a message.
measurements
The optional context section contains information on how to interpret the measurements. This includes
The field type (Number, String or Boolean value) indicates which format the of a series have.
The unit key can be used to describe the unit of measurement. There are different understandings and standardizations for units ('C' stands for Coulomb, not Celsius), like International System of Units, SenML, ISO 80000-1:2009, etc.. The unit key here is a string without further restriction. If that is needed, it can be specified via an URI in namespace.
namespace may contain an URI to identify further detail on the values in this measurement section. This can be a description of units, lengths or naming conventions for measurement points, but also a reference to a semantic model.
Each entry in limits can be constant or an array of values. If constant, it applies to all corresponding measurements in series. If an array of the same length than the corresponding series is provided, each entry limits the measurement at the respective position. 'null' can be used to skip a limit for an individual measurement.
series can contain other than numeric measurements if context.type contains any of 'BASE64', 'BOOLEAN', 'NUMBER', 'STRING', 'REF' or 'OTHER', the corresponding measurement in series are represented in this type ('REF', 'OTHER' and 'BASE64' are Strings). This way for example, even small base64 encoded binary data, as send from iolink devices, can be included. 'REF' could be used in multipart messages to reference to other sections or even external content.
time field replaces the v2 $_time field, which is difficult to represent in some programming languages. Note that time is not an Integer anymore but a JSON number, to allow sub-millisecond values.
processes
No more shutoffValues and shutoffPhase
shutoffValues can be expressed as specialValues with a meaningful name, shutoffPhase is the measurement with the latest timestamp ts.
Same improvements in measurements
Protocol Version 3 release candidate
Recent Posts
Protocol v3 final
Home
Proposal
Specification
Blog Archives
FAQ
Use Cases: Template for transformation
09/04/18
Quick start
In a previous blog post, I have already introduced Apache Camel as a tool to transform to the Production Performance Management Protocol. In this post, I want to dive a little deeper to get you started with your own transformation.
You can find corresponding source code with some transformation examples in the repository of the Eclipse PPM Testbed. After download or checkout of the project, you can easily package everything necessary for an installation via Apache Maven and java 8+:
git clone https://github.com/eclipselabs/eclipseiot-testbed-productionperformancemanagement.git
cd eclipseiot-testbed-productionperformancemanagement
cd camel-integrator
mvn package
After successful build, you should get a zip file at target/camel-integrator-*-assembly.zip with the following content
bin
The IntegratorStarter* files for Windows and Linux can be used to start the integrator manually. WinServiceInstaller.bat und WinServiceUninstaller.bat can be executed with Admin permissions in Windows to register/unregister this java application as Windows Service called "Integrator Service".
Home
Proposal
Specification
Blog Archives
FAQ
April 2019
Protocol Version 3 release candidate
01
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
Home
Proposal
Specification
Blog Archives
FAQ
March 2018
Use Cases: Unide and the Eclipse Testbed
13
Production Performance Management Protocol Use Cases: Simple Transformation with Apache Camel
11
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Home
Proposal
Specification
Blog Archives
FAQ
October 2018
Use Cases: Template for transformation
04
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
Home
Proposal
Specification
Blog Archives
FAQ
April 2018
Unide 0.2.0 released
26, 12:39
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
Home
Proposal
Specification
Blog Archives
FAQ
April 2017
Unide at Bosch Hackaton
23
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
Home
Proposal
Specification
Blog Archives
FAQ
February 2018
Updated Website
26
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
Home
Proposal
Specification
Blog Archives
FAQ
Use Cases: Unide and the Eclipse Testbed
02/13/18
Abstract
In this blog post we present a real world condition monitoring scenario used in
the Eclipse Production Performance Management Testbed, where Unide and
the Production Performance Management Protocol plays a crucial role. Moreover, we also provide a code repository and
instructions so that you can recreate the scenario in your own computer and
learn about its components and the communication with each other.
Introduction
In the context of the Eclipse Production Performance Management Testbed, a
real world condition monitoring scenario has been recreated, in which a
grinding machine is being continuously monitored allowing to have real time
Home
Proposal
Specification
Blog Archives
FAQ
November 2017
Unide is part of Industry 4.0 Testbed
19
DZone article published
06
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
if context.type contains any of 'BASE64', 'BOOLEAN', 'NUMBER', 'STRING', 'REF' or 'OTHER', the corresponding measurement in series are represented in this type ('REF', 'OTHER' and 'BASE64' are Strings). This way for example, even small base64 encoded binary data, as send from iolink devices, can be included. 'REF' could be used in multipart messages to reference to other sections or even external content.
A common id was used and replaces different spellings in deviceID, partID, program.id.
additionalData in the various sections is used for any kind of not-specified data, that should be included in the telegram. Where v2's metaData had to be key/String pairs, additionalData can also be complex JSON objects.
time field replaces the v2 $_time field, which is difficult to represent in some programming languages. Note that time is not an Integer anymore but a JSON number, to allow sub-millisecond values.
no more shutoffValues and shutoffPhase
shutoffValues can be expressed as specialValues with a meaningful name, shutoffPhase is the measurement with the latest timestamp ts.
a common definition.json schema is used for sections that are used in multiple telegrams. With the help of JSON schema 'anyOf', sections inherit and can extend from these base definitions.
Next steps
The most recent updates and this post should finalize the v3 schema. Vetos with suggestions that find a consensus fairly soon after posting are stil accepted via github issues. Major changes and suggestions should rather be addressed to a v4.
The bindings and server should be updated to accept and validate v3 as well. After updating further dependencies, creating eclipse CQs and undergoing the release process, everything should be wrapped up in the unide release 0.3.0.
Use Cases: Template for transformation Protocol v3 final
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Eclipse unide - December 2019
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
Eclipse unide - July 2017
conf
This is where the main configuration file application-context.xml, further included spring xml configurations, as well as the configuration for logging log4j.properties and a key-value-file for quick configuration application.properties can be found. After modification of any of them, the integrator should be restarted.
lib
Contains all java dependencies and their dependencies as individual jar files
log
After the first start, you will find an additional directory that contains the logs of every execution, as defined in the conf/log4j.properties file.
So this camel-integrator-*-assembly.zip is all you need, ready to being shipped and installed in your target system.
How can I modify this?
In the conf folder of the output or src/main/resources src folder, you'll find multiple examples on how to use Apache Camel with Production Performance Management Protocol. Most of the examples are based on spring xml.
The most important terms to understand them are:
xml tag
meaning
bean
camelContext
the main, camel specific configurations
route
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
health checks and prevent unexpected failures.
This scenario consists of the following building blocks: device, gateway,
backend. The communication between them happens seamlessly thanks to the
Production Performance management Protocol (PPMP).
The device, i.e. the grinding machine, has been retrofitted with an
acceleration sensor attached to one of its critical components. The data
provided by this sensor is routed to the gateway in the form of a Production Performance Management Protocol
Measurement Message.
The gateway receives the raw acceleration measurements, calculates some
statistical characteristics and and applies some machine learning techniques
to them in order to evaluate the condition of the grinding machine. Then both
the statistical values and the condition are routed to the backend, again in
the form of a Production Performance Management Protocol Measurement Message.
The backend, usually in the cloud, is any component that "speaks PPMP" and
performs meaningful operations on the incoming messages. Most frequently it
is responsible for storing the arriving data and making it available to apps
that want to consume it. Common responsibilities of these apps are the
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
Home
Proposal
Specification
Blog Archives
FAQ
December 2019
Protocol v3 final
26
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
Eclipse unide - Specification for process messages
Eclipse unide - Specification for measurement messages
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
Home
Proposal
Specification
Blog Archives
FAQ
July 2017
First Production Performance Management Protocol-Validator Online
29
New Production Performance Management Protocol-Specification for processes
01
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
describes the data flow as process
from / to
entry / exit points for the data flow. This is also, were external systems are accessed via components
onException
error handling for the data flow
pipeline, multicast, ...
routing of data via Enterprise Integration pattern
Among others, you'll find:
html logfile before transformation to the Production Performance Management Protocol
application-context.xml
Main entry file to start camel routes. It contains a general Production Performance Management Protocol validation REST endpoint that reuses the route from ppmp-validate-context.xml
mqtt-context.xml
A simple example of converting transport protocol (mqtt to REST), without looking at the payload
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
representation or display of the data (e.g. dashboards), or workflows
management (e.g. the grinding machine is in bad condition and an inspection
must be carried out).
The backend can be swapped effortless with any entity adhering to the Production Performance Management Protocol standard.
In the Eclipse PPM Testbed at least two different backends have been used:
One directly based on Unide
One based on CONTACT Elements for IoT.
Hands-on demonstration
In order to make this scenario more hands-on and interesting, within the
Production Performance Management Testbed repository project in Github, we
have set up a subproject for the grinding machine scenario. There you can
find a thorough description and code to simulate the device and the gateway,
and route messages to a given backend. The only requirements are git and conda
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
ppmp-splitAndRewrite-context.xml
Shows how to receive (Production Performance Management Protocol-) payload via different REST paths (/rest or /ppm), and each forwarding to two seperate endpoints (/rest and /ppm)
ppmpRewrite.xml and ppmRewrite.xml
mapping examples to rewrite the urls
ppmp-validate-context.xml
A simple validation route for Production Performance Management Protocol messages that can be reused in many other routes.
psi6000-transform-context.xml
A more advanced example of converting a psi6000 JSON format, converting it to plain old java object (POJO), transforming that to Production Performance Management Protocol POJOs (using unide.java) and forwarding these to actual REST endpoints
kistler.xml
This example takes html files with a structure similar to the test file in src/test/data/00000855.html, cleans the html structure, retrieves the relevant parts via XPath and creates a Production Performance Management Protocol process message out of that
application.properties
Contains key/value pairs that can be used in the camel context configurations.
log4j.properties
The configuration for logging. For testing purposes, the log4j.properties in /src/test/resources is used.
In order to get familiar with these transformations, I suggest you:
open the application-context.xml in your favorite editor
Eclipse unide - Specification for process messages
Eclipse unide - Specification for measurement messages
(the easiest way to get conda is to install miniconda).
So, let's get started! First of all, open your terminal and clone the
repository:
$ git clone https://github.com/eclipselabs/eclipseiot-testbed-productionperformancemanagement eclipse-testbed-ppm
$ cd eclipse-testbed-ppm/grinding-machine
Then move to the grinding machine subproject directory:
$ cd eclipse-testbed-ppm/grinding-machine
In that folder you will see two subfolders. The first one
unide-grinding-machine contains a Python program that simulates grinding
machine and the second one unide-grinding-machine-gateway simulates the
gateway.
Grinding Machine simulator
Let's start with the first component. First cd to unide-grinding-machine
and then create the conda environment:
$ conda env create --prefix=env
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
Eclipse unide - Specification for process messages
Eclipse unide - Specification for measurement messages
Eclipse unide - Unide 0.2.0 released
Eclipse unide - Specification for machine messages
Eclipse unide - Specification for machine messages
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
Eclipse unide - Specification for machine messages
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
remove the <import .../> statements
add your own <route>...</route>, maybe as simple as <route>
<from uri="jetty:http://0.0.0.0:9090/" />
<setBody>
<simple>hello world!</simple>
</setBody>
</route>
start a run directly (with bundling to a zip file) with: mvn exec:java
and review the result. With the example above, just open the url http://localhost:9090 and see the hello world! in your browser
If you prefer a visual model of these camel xml definitions, you could also make use of JBoss Fuse Tooling which is available for Eclipse Workbench 4.3+ through the Marketplace. Be aware that this might cause additional overhead.
JBoss Tools for Eclipse Workbench
If you want to make use of any other of the (as of camel 2.21.0) 281+ components, you should add the respective maven dependency to the pom.xml. For example:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
...
<dependencies>
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
And then in order to use this environment, we need to activate it.
$ source activate env # or in windows: activate env
Run unide-grinding-machine -h to get familiar with the CLI. With this
executable we can generate some machine grinding data, and (for the moment)
print messages to the console. To do so, run unide-grinding-machine send random and you should get a large message on the console. This is the Production Performance Management Protocol
message ought to be sent to the gateway.
We don't have a gateway so far, but don't worry, we will get to that in a
minute. Don't close this console!
Gateway simulator
Open a new console, and similarly to the previous point, first cd to
unide-grinding-machine-gateway, create the environment (conda env create --prefix=env) and activate it (source activate env).
The run the command unide-grinding-machine-gateway -h to test that everything
is in place. You should get the CLI documentation.
Now, let's fire up the gateway by calling unide-grinding-machine-gateway start_server, and a message like this should show up:
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Home
Proposal
Specification
Blog Archives
FAQ
Unide 0.2.0 released
03/26/18, 12:39
Finally, the second version (0.2.0) of the Eclipse unide project is released! The REST Server on the Testserver has been updated as well.
Quick start
Binsa chrome app
Download the binsa chrome app from download page. Open your chrome browser at chrome://extensions and drag the binsa.crx file onto the page. You should be able to see your new chrome app in chrome://apps
REST Server
Download the REST server file from repo.eclipse.org, create a simple configuration file (e.g. application_conf.json):
{
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
3
)
Measurement Message
(v
2
/
3
)
Process Message
(v
2
/
Home
Proposal
Specification
Blog Archives
FAQ
Production Performance Management Protocol Specification
Rationale
Noticeably in recent years, there is a continuous increase in demand, price pressure and complexity in manufacturing. Things need to move faster, be more flexible, and fulfill higher quality standards forcing manufacturers to optimize their processes.
Production facilities and their performance have a huge impact on the overall performance of manufacturing processes. However, to identify bottlenecks and possibilities for improvements detailed data from machines are required.
Such data is surely provided by machines either via modern protocols such as OPC UA or via proprietary access methods but it is not provided in a common and easily accessible format, which can be used to do performance analysis and optimization. This renders holistic process improvement efforts infeasible for many, especially smaller organizations.
The Production Performance Management Protocol (PPMP) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
3
)
Measurement Message
(v
2
/
3
)
Process Message
(v
2
/
3
)
Measurement Payload
The measurement message is the format to exchange simple (non-structured, non-complex ) measurement data. It also allows to transport multiple measurement data (eg. values over time), called 'series'.
Minimal message example
<dependency>
<groupId>org.apache.camel</groupId>
<artifactId>camel-amqp</artifactId>
</dependency>
...
</dependencies>
...
</project>
Testing
Testing is an important part of the development cycle, especially for the core components that have to work reliably in a production environment.
The project includes example tests in the src/test folder:
java
contains the actual java unit tests that make use of CamelSpringTestSupport to wire xml CamelContext configuration, test data and expected results together
resources
contains the spring xml configuration that is used by the java test classes and resamble the actual configurations from src/main/resources
data
contains testdata for the data flows and the transformation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
3
)
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
Running <unide_grinding_machine_gateway.server.App object at 0x.....>
Listening on http://127.0.0.1:5000
Press Ctrl-C to stop...
We are getting closer. Leave the gateway running.
Communication Device-Gateway
Let's go back to the previous console where we had the unide-grinding-machine
environment and call again the unide-grinding-machine program, but this time
passing the as an argument where the gateway is listening to messages.
$ unide-grinding-machine send random --endpoint=http://127.0.0.1:5000
If you take peek at the gateway output, you should see new information printed
out, which is a Production Performance Management Protocol message containing the result of the classification
algorithms applied to the device data we just sent to it.
We are getting somewhere! But still, it is not extremely useful to print some
characters into a console, is it?
Communication Device-Gateway-Backend
There is only a small but relevant point missing: the routing from the gateway
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
3
)
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
"http.port": 8090,
"persistence.enable": false
}
and start the server
java -jar ppmp-server-0.2.0.jar -conf application_conf.json
Point your browser to http://localhost:8090 and see the servers documentation running on your local server! At this point, Production Performance Management Protocol validation (via HTTP POST to /rest/v2/validate) is enabled, but no persistence.
If you want to send data to the server, a quick way is via Postman App, which is available as native app or Chrome app. Once installed and started, you can easily use the "Import > Import From Link" feature to get the prepared unide.postman_collection.json and the corresponding unide.postman_environment. You should now have Machine/Measurement/Process messages and requests prepared in the Collections tab. In order to send, you could extend the URL with "/validate" and hit "Send" button. If you get the response
Ppmp Message of type 'xy' is valid
the unide REST server works as expected!
Persistence
Influx DB
Download the InfluxDB Time-Series Data Storage and unzip or install it on your system. By default, it opens an http port at 8086. In order to make use of it, the configuration file should be modified, e.g. to:
{
"http.port": 8090,
"persistence.enable": true,
"persistence.system": "influxDb",
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
3
)
Process Message
The specification is structured into three payload formats: Measurement payload, message payload and process payload. The Measurement payload contains measurements from machines such as the temperature of a machine at a specific point in time together with the currently produced part. The message payload contains arbitrary messages sent by a machine, e.g. alerts or the like. A process message consists of information about a discrete e.g. tightening or welding process with all their characterizing data, which are needed to describe and analyze it.
The default way of transporting the json payload is via http to allow for an easy integration into various backend systems. Other transportation methods are possible and welcome.
Validation
Did you know that you can easily validate your Production Performance Management Protocol payload against the published online version of the Production Performance Management Protocol? For exapmle, jsonschemavalidator.net provides an online validation frontend. Just use your payload as JSON input and the respective github link to the Production Performance Management Protocol specification as a $ref in the schema. For example:
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
3
)
Process Payload
The process message is the format to exchange data out of discrete processes. It also allows to transport process information, part information and measurement data for each phase of the process.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/process-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"process": {
"ts": "2020-06-25T15:16:43.160Z"
},
"measurements": [
{
"ts": "2020-06-25T15:16:43.260Z",
"series": {
{
"$ref": "https://raw.githubusercontent.com/eclipse/unide/master/ppmp/ppmp-schema/src/main/resources/org/eclipse/iot/unide/ppmp/v3/process_schema.json"
}
Overview
Machine Message
(v
2
/
3
)
Measurement Message
(v
2
/
3
{
"content-spec": "urn:spec://eclipse.org/unide/measurement-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"measurements": [
{
"ts": "2020-06-25T15:16:42.958Z",
"series": {
"time": [
0,
23,
Tests can easily be run from within an IDE (eclipse, visual code studio etc.) or via commandline
mvn test
You will see the output of the test runs. If it looks like this, it works as expected:
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.846 sec
Results :
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 32.267 s
[INFO] Finished at: 2018-04-09T15:25:25+02:00
[INFO] Final Memory: 25M/85M
[INFO] ------------------------------------------------------------------------
Summary
The provided camel project template facilitates the creation of simple connectors. You can download it, modify or extend it, package the integrator to a zip file and deploy it on a target server. The included scripts help registering the integrator as an operating system service to run 24/7.
Unide 0.2.0 released Protocol Version 3 release candidate
Process Message
(v
2
/
3
)
Process Payload
The process message is the format to exchange data out of discrete processes. It also allows to transport process information, part information and measurement data for each phase of the process.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/process-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b"
},
3
)
Process Message
(v
2
/
3
)
Measurement Payload
The measurement message is the format to exchange simple (non-structured, non-complex ) measurement data. It also allows to transport multiple measurement data (eg. values over time), called 'series'.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/measurement-message#v2",
"device": {
"deviceID": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"measurements": [
to the backend. We need a backend and the Unide project provides a service that
can be used as a playground for these purposes. So let's restart the gateway,
this time passing the Unide endpoint:
$ unide-grinding-machine-gateway start_server --endpoint=https://unide.eclipse.org/rest/v2
Now we can use the unide-grinding-machine to send raw data to the gateway
which in turn sends its results to the backend. In order to be able to
identify this data later, we are going to define a proper device ID (argument
--device-id), and also tell it to send data once each 10 seconds (argument
--period):
$ unide-grinding-machine send random --endpoint=http://127.0.0.1:5000 --device-id=IoT-000028--3 --period=10
Once started, a continuous flow of data is pumped through each component until
it reaches the backend, allowing us to use the applications that consume this
data. For instance, the basic backend provided by Unide offers a Grafana based
dashboard that offers live monitoring of the statistical values calculated in the
gateway:
If instead of that we use the the CONTACT Elements for IoT based backend,
Process Message
(v
2
/
3
)
Process Payload
The process message is the format to exchange data out of discrete processes. It also allows to transport process information, part information and measurement data for each phase of the process.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/process-message#v2",
"device": {
"deviceID": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"process": {
3
)
Process Message
(v
2
/
3
)
Measurement Payload
The measurement message is the format to exchange simple (non-structured, non-complex ) measurement data. It also allows to transport multiple measurement data (eg. values over time), called 'series'.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/measurement-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"influxDb.url": "http://localhost:8086",
"influxDb.user": "root",
"influxDb.password": "root"
}
After starting the database and the unide REST server, it should be possible to send POST requests to http://localhost:8090/rest/v2. This path receives all message types. To query the database after, use:
http://localhost:8086/query?pretty=true&u=root&p=root&db=Measurements&q=SELECT * FROM "ppmp_measurements" or the other databases that are documented on the running server instance, respectively.
SQL (timescale, h2)
Download the appropriate jdbc driver, e.g. h2-*.jar, modify the configuration file, e.g. for h2:
{
"http.port": 8090,
"persistence.enable": true,
"persistence.system": "sql",
"sqlDb.driver": "org.h2.Driver",
"sqlDb.url": "jdbc:h2:./test",
(v
2
/
3
)
Machine Message Payload
The main purpose of the machine message format is to allow devices and integrators to send messages containing an interpretation of measurement data or status.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/machine-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"messages": [
{
"ts": "2020-06-25T15:16:43.079Z",
2
/
3
)
Process Message
(v
2
/
3
)
Machine Message Payload
The main purpose of the machine message format is to allow devices and integrators to send messages containing an interpretation of measurement data or status.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/machine-message#v2",
"device": {
"time": [
0,
23,
24
],
"force": [
26,
23,
null
],
"pressure": [
100952.4,
100946.32,
100944.2432
]
)
Process Message
(v
2
/
3
)
Machine Message Payload
The main purpose of the machine message format is to allow devices and integrators to send messages containing an interpretation of measurement data or status.
Minimal message example
{
"content-spec": "urn:spec://eclipse.org/unide/machine-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b"
},
24
],
"temperature": [
45.4231,
46.4222,
44.2432
]
}
}
]
}
Multiple message example
{
"content-spec": "urn:spec://eclipse.org/unide/measurement-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b",
"mode": "maintenance",
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
"process": {
"ts": "2020-06-25T15:16:43.015Z"
},
"measurements": [
{
"ts": "2020-06-25T15:16:43.115Z",
"series": {
"time": [
0,
23,
24
],
"force": [
26,
23,
null
{
"ts": "2020-06-25T15:16:42.805Z",
"series": {
"$_time": [
0,
23,
24
],
"temperature": [
45.4231,
46.4222,
44.2432
]
}
}
we can see a different and richer dashboard: charts, 3D models, list of
maintenance events, device master data and the Activity Stream, a place where
different parties can exchange information related to the grinding machine:
Production Performance Management Protocol Use Cases: Simple Transformation with Apache Camel Unide 0.2.0 released
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
"ts": "2020-06-25T15:16:42.843Z"
},
"measurements": [
{
"ts": "2020-06-25T15:16:42.943Z",
"series": {
"force": [
26,
23,
24
],
"pressure": [
52.4,
46.32,
44.2432
"measurements": [
{
"ts": "2020-06-25T15:16:43.117Z",
"series": {
"time": [
0,
23,
24
],
"temperature": [
45.4231,
"sqlDb.user": "sa",
"sqlDb.password": ""
"code": "190ABT"
}
]
}
Multiple message example
{
"deviceID": "a4927dad-58d4-4580-b460-79cefd56775b"
},
"messages": [
{
"ts": "2020-06-25T15:16:42.737Z",
"code": "190ABT"
}
]
}
Multiple message example
{
"content-spec": "urn:spec://eclipse.org/unide/machine-message#v2",
"device": {
"deviceID": "a4927dad-58d4-4580-b460-79cefd56775b",
}
}
]
}
Process message example
{
"content-spec": "urn:spec://eclipse.org/unide/process-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b",
"mode": "auto",
"state": "OK",
"additionalData": {
"swVersion": "2.0.3.13",
"swBuildId": "41535"
"messages": [
{
"ts": "2020-06-25T15:16:42.921Z",
"code": "190ABT"
}
]
}
Multiple message example
{
"content-spec": "urn:spec://eclipse.org/unide/machine-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b",
"mode": "auto",
"state": "OK",
"state": "WARN",
"additionalData": {
"swVersion": "2.0.3.13",
"swBuildID": "41535"
}
},
"part": {
"code": "HUH289",
"id": "420003844",
"type": "BATCH",
"typeId": "F00VH07328",
"result": "OK",
"additionalData": {
"lotID": "845849",
"toolID": "32324-432143"
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
],
"pressure": [
100952.4,
100946.32,
100944.2432
]
}
}
]
}
Process message example
{
"content-spec": "urn:spec://eclipse.org/unide/process-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b",
"mode": "auto",
"state": "OK",
]
}
Multiple message example
{
"content-spec": "urn:spec://eclipse.org/unide/measurement-message#v2",
"device": {
"deviceID": "a4927dad-58d4-4580-b460-79cefd56775b",
"operationalStatus": "MM",
"metaData": {
"swVersion": "2.0.3.13",
"swBuildID": "41535"
}
},
"part": {
"partTypeID": "F00VH07328",
"partID": "420003844",
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
]
}
}
]
}
Process message example
{
"content-spec": "urn:spec://eclipse.org/unide/process-message#v2",
"device": {
"deviceID": "a4927dad-58d4-4580-b460-79cefd56775b",
"operationalStatus": "normal",
"metaData": {
"swVersion": "2.0.3.13",
"swBuildId": "41535"
}
},
"part": {
46.4222,
44.2432
]
}
}
]
}
Multiple message example
{
"content-spec": "urn:spec://eclipse.org/unide/measurement-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b",
"mode": "maintenance",
"state": "WARN",
"additionalData": {
"swVersion": "2.0.3.13",
"swBuildID": "41535"
}
}
Start the Production Performance Management Protocol Server with the jdbc dependency on the classpath, e.g.:
java -cp "h2-1.4.197.jar;ppmp-server-0.2.0.jar" io.vertx.core.Launcher org.eclipse.iot.unide.server.MainVerticle -conf application.conf
Now, all the data send to the REST server is persisted in the file test.mv.db.
For concurrent db actions (reading while writing), use the h2 tcp server instead. h2 is not recommended for production use!
Background
Download
Available artifacts for download:
Production Performance Management Protocol Schema v2
Production Performance Management Protocol java Binding
Production Performance Management Protocol Python Binding
Production Performance Management Protocol Server
binsa client chrome app
Source code:
unide
java binding
"content-spec": "urn:spec://eclipse.org/unide/machine-message#v3",
"device": {
"id": "a4927dad-58d4-4580-b460-79cefd56775b",
"mode": "auto",
"state": "OK",
"additionalData": {
"swVersion": "2.0.3.13",
"swBuildID": "41535"
}
},
"messages": [
{
"code": "190ABT",
"description": "Electronic control board or its electrical connections are damaged",
"hint": "Check the control board",
"origin": "sensor-id-992.2393.22",
"severity": "HIGH",
"operationalStatus": "normal",
"metaData": {
"swVersion": "2.0.3.13",
"swBuildID": "41535"
}
},
"messages": [
{
"origin": "sensor-id-992.2393.22",
"ts": "2020-06-25T15:16:42.737Z",
"type": "DEVICE",
"severity": "HIGH",
"code": "190ABT",
"title": "control board damaged",
"description": "Electronic control board or its electrical connections are damaged",
"hint": "Check the control board",
"metaData": {
"firmware": "20130304_22.020"
}
},
"part": {
"code": "HUH289",
"id": "420003844",
"type": "SINGLE",
"typeId": "F00VH07328",
"result": "NOK",
"additionalData": {
"toolId": "32324-432143"
}
},
"process": {
"externalId": "b4927dad-58d4-4580-b460-79cefd56775b",
"program": {
"id": "1",
"additionalData": {
"swVersion": "2.0.3.13",
"swBuildID": "41535"
}
},
"messages": [
{
"code": "190ABT",
"description": "Electronic control board or its electrical connections are damaged",
"hint": "Check the control board",
"origin": "sensor-id-992.2393.22",
"severity": "HIGH",
"source": "DEVICE",
"state": "NEW",
"title": "control board damaged",
"ts": "2020-06-25T15:16:42.921Z",
}
},
"measurements": [
{
"code": "190ABT",
"context": {
"temperature": {
"limits": {
"lowerError": -2,
"lowerWarn": -1,
"target": 1.21,
"upperError": 5,
"upperWarn": 1.5
},
"namespace": "https://mycompany.com/metaModel/v3",
"unit": "Cel",
"additionalData": {
"swVersion": "2.0.3.13",
"swBuildId": "41535"
}
},
"part": {
"code": "HUH289",
"id": "420003844",
"type": "SINGLE",
"typeId": "F00VH07328",
"result": "NOK",
"additionalData": {
"toolId": "32324-432143"
}
},
"process": {
"result": "OK",
"code": "HUH289",
"metaData": {
"lotID": "845849",
"toolID": "32324-432143"
}
},
"measurements": [
{
"ts": "2020-06-25T15:16:42.805Z",
"code": "190ABT",
"result": "OK",
"series": {
"$_time": [
0,
"type": "SINGLE",
"partTypeID": "F00VH07328",
"partID": "420003844",
"result": "NOK",
"code": "HUH289",
"metaData": {
"toolId": "32324-432143"
}
},
"process": {
"externalProcessId": "b4927dad-58d4-4580-b460-79cefd56775b",
"ts": "2020-06-25T15:16:42.843Z",
"result": "NOK",
"shutoffPhase": "phase 2",
"program": {
"id": "1",
"name": "Programm 1",
},
"part": {
"code": "HUH289",
"id": "420003844",
"type": "BATCH",
"typeId": "F00VH07328",
"result": "OK",
"additionalData": {
"lotID": "845849",
"toolID": "32324-432143"
}
},
"measurements": [
{
"code": "190ABT",
python binding
Release notes
REST Server improvements (refactoring & persistence)
Added persistence to timeseries/postgres db
Outfactored schema files
Adjusted maven file
Added unit tests
Added documentation & java docs
Adjusted error handling
Removed unused code
Added postman collections
Added grafana configuration file
New HTML5 simulation client
Progressive Webapp runs as website (see https://unide.eclipse.org/binsa), browser app, native client (via nw.js) or app (via Apache cordova)
Production Performance Management Protocol JSON Schema files
"source": "DEVICE",
"state": "NEW",
"title": "control board damaged",
"ts": "2020-06-25T15:16:43.079Z",
"type": "WARNING",
"additionalData": {
"firmware": "20130304_22.020"
}
},
{
"code": "33-02",
"description": "Disk size has reached limit. Unable to write log files.",
"severity": "HIGH",
"source": "TECHNICAL_INFO",
"title": "Disk size limit reached",
"ts": "2020-06-25T15:16:43.179Z"
}
},
{
"ts": "2020-06-25T15:16:42.837Z",
"type": "TECHNICAL_INFO",
"severity": "HIGH",
"code": "33-02",
"title": "Disk size limit reached",
"description": "Disk size has reached limit. Unable to write log files."
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
"lastChangedDate": "2002-05-30T09:30:10.123+02:00",
"name": "Programm 1"
},
"result": "NOK",
"ts": "2020-06-25T15:16:43.160Z",
"additionalData": {
"escalation": "shift leader",
"maxDuration": "30min",
"shutoffPhase": "phase 2"
}
},
"measurements": [
{
"code": "0000 EE01",
"context": {
"pressure": {
"limits": {
"type": "WARNING",
"additionalData": {
"firmware": "20130304_22.020"
}
},
{
"code": "33-02",
"description": "Disk size has reached limit. Unable to write log files.",
"severity": "HIGH",
"source": "TECHNICAL_INFO",
"title": "Disk size limit reached",
"ts": "2020-06-25T15:16:43.021Z"
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
"additionalData": {
"offset": 37,
"accuracy": [
0.112,
0.115,
0.129
]
}
}
},
"result": "OK",
"series": {
"time": [
0,
23,
24
],
"externalId": "b4927dad-58d4-4580-b460-79cefd56775b",
"program": {
"id": "1",
"lastChangedDate": "2002-05-30T09:30:10.123+02:00",
"name": "Programm 1"
},
"result": "NOK",
"ts": "2020-06-25T15:16:43.015Z",
"additionalData": {
"escalation": "shift leader",
"maxDuration": "30min",
"shutoffPhase": "phase 2"
}
},
"measurements": [
{
23,
24
],
"temperature": [
45.4231,
46.4222,
44.2432
]
},
"limits": {
"temperature": {
"lowerError": 40,
"lowerWarn": 45,
"upperError": 50,
"upperWarn": 47.5
"lastChangedDate": "2002-05-30T09:30:10.123+02:00"
},
"shutoffValues": {
"force": {
"ts": "2020-06-25T15:16:52.843Z",
"value": 24,
"upperError": 26,
"lowerError": 22,
"upperWarn": 25,
"lowerWarn": 23,
"target": 24
},
"pressure": {
"value": 50,
"upperError": 52,
"lowerError": 48
"context": {
"temperature": {
"limits": {
"lowerError": -2,
"lowerWarn": -1,
"target": 1.21,
"upperError": 5,
"upperWarn": 1.5
},
"namespace": "https://mycompany.com/metaModel/v3",
"unit": "Cel",
"additionalData": {
"offset": 37,
"accuracy": [
0.112,
0.115,
0.129
Introduced separate bundle for schemas
general fixes
make schema draft-06 compliant
added 'id' and 'descriptions' where applicable
added 'type' and 'default' for enums
added 'required' fields where necessary
made 'additionalProperties': true explicit for 'metaData'
sorted the properties for improved readability
message_schema fixes
added minItems: 1 to messages
measurement_schema fixes
completed 'limits' specification
added 'patternProperties' and minProperties detail to 'series'
added minItems: 1 to measurements
process_schema fixes
made 'id' and 'name' of a 'program' mandatory
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
"upperError": 103000,
"lowerError": 99000,
"upperWarn": 102000,
"lowerWarn": 100000,
"target": 100950
},
"namespace": "https://mycompany.com/productvariants/5986",
"unit": "Pa"
},
"force": {
"limits": {
"upperError": [
29,
27,
26
],
"temperature": [
0.4231,
2.4222,
4.2432
]
},
"ts": "2020-06-25T15:16:42.958Z"
},
{
"context": {
"scanData": {
"type": "BASE64"
}
},
"series": {
"code": "0000 EE01",
"context": {
"pressure": {
"limits": {
"upperError": 103000,
"lowerError": 99000,
"upperWarn": 102000,
"lowerWarn": 100000,
"target": 100950
},
"namespace": "https://mycompany.com/productvariants/5986",
"unit": "Pa"
},
"force": {
"limits": {
"upperError": [
29,
27,
}
}
},
{
"ts": "2020-06-25T15:16:37.805Z",
"series": {
"$_time": [
0,
130,
2633
],
"pressure": [
52.4,
46.32,
44.2432
]
}
}
}
},
"metaData": {
"maxDuration": "30min",
"escalation": "shift leader"
}
},
"measurements": [
{
"ts": "2020-06-25T15:16:42.943Z",
"phase": "phase 1",
"name": "heating up",
"result": "OK",
"code": "0000 EE01",
"limits": {
"pressure": {
"upperError": 4444,
]
}
}
},
"result": "OK",
"series": {
"time": [
0,
23,
24
],
"temperature": [
0.4231,
2.4222,
4.2432
]
fixed 'shutoffValues', having properties not items
fixed 'limits', having properties not items and number values rather than object values as limits
fixed 'specialValues' to be an array of specialValue items with 'name' for indicating the nature, rather than one single object with its keys indicating the nature. Offering optional '$_time' tag to be consistent with measurements.
completed 'series' definition
Website
Autogenerating Production Performance Management Protocol specification from JSON schemas to avoid discrepancies
Generating UML schemas with plantuml
Using similar HTML5 stack as simulation client for SPA website
Other
java and new python bindings in separate github repositories
Use Cases: Unide and the Eclipse Testbed Use Cases: Template for transformation
Recent Posts
Protocol v3 final
Protocol Version 3 release candidate
Use Cases: Template for transformation
"lowerError": [
23,
21,
20
],
"upperWarn": [
28.5,
26.5,
25.5
],
"lowerWarn": [
23.5,
21.5,
null
],
"target": [
26,
"time": [
0,
130,
2633
],
"pressure": [
100952.4,
100946.32,
100944.2432
],
"scanData": [
"Zm9vCg==",
"YmFyCg==",
"Y2hlZXNlCg=="
]
},
26
],
"lowerError": [
23,
21,
20
],
"upperWarn": [
28.5,
26.5,
25.5
],
"lowerWarn": [
23.5,
21.5,
null
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
"lowerError": 44,
"upperWarn": 2222,
"lowerWarn": 46,
"target": 35
},
"force": {
"upperError": [
27,
24,
25
],
"lowerError": [
25,
22,
23
]
}
},
"ts": "2020-06-25T15:16:43.117Z"
},
{
"context": {
"scanData": {
"type": "BASE64"
}
},
"series": {
"time": [
0,
130,
2633
],
"pressure": [
Unide 0.2.0 released
Use Cases: Unide and the Eclipse Testbed
Blog Archives
December 2019
(1)
April 2019
(1)
October 2018
(1)
April 2018
(1)
March 2018
(2)
February 2018
(1)
November 2017
(2)
24,
23
]
}
}
},
"name": "heating up",
"phase": "phase 1",
"result": "OK",
"series": {
"force": [
26,
23,
24
],
"ts": "2020-06-25T15:16:37.958Z"
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
],
"target": [
26,
24,
23
]
}
}
},
"name": "heating up",
"phase": "phase 1",
"result": "OK",
"series": {
"force": [
26,
23,
24
},
"specialValues": [
{
"$_time": 12,
"name": "turning point",
"value": {
"pressure": 24,
"force": 50
}
}
],
"series": {
"time": [
30,
36,
42
],
100952.4,
100946.32,
100944.2432
],
"scanData": [
"Zm9vCg==",
"YmFyCg==",
"Y2hlZXNlCg=="
]
},
"ts": "2020-06-25T15:16:38.117Z"
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
July 2017
(2)
April 2017
(1)
October 2016
(4)
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
"pressure": [
100952.4,
100946.32,
100944.2432
],
"temperature": [
45.4243,
null,
44.2432
]
},
"specialValues": [
{
"name": "turning point",
"value": {
"pressure": 101530,
],
"pressure": [
100952.4,
100946.32,
100944.2432
],
"temperature": [
45.4243,
null,
44.2432
]
},
"specialValues": [
{
"force": [
26,
23,
24
],
"pressure": [
52.4,
46.32,
44.2432
],
"temperature": [
45.4243,
46.42342,
44.2432
]
}
},
{
"force": 50
}
},
{
"name": "shutoffForce",
"time": 24,
"value": {
"force": 24,
"upperError": 26,
"lowerError": 22,
"upperWarn": 25,
"lowerWarn": 23,
"target": 24
}
},
{
"name": "shutoffPressure",
"time": 24,
"name": "turning point",
"value": {
"pressure": 101530,
"force": 50
}
},
{
"name": "shutoffForce",
"time": 24,
"value": {
"force": 24,
"upperError": 26,
"lowerError": 22,
"upperWarn": 25,
"lowerWarn": 23,
"target": 24
}
"ts": "2020-06-25T15:16:43.273Z",
"phase": "phase 2",
"name": "processing",
"result": "OK",
"series": {
"$_time": [
0,
23,
24
],
"temperature": [
49.2,
48.8,
50
]
}
}
"value": {
"pressure": 100950,
"upperError": 103000,
"lowerError": 99000
}
}
],
"ts": "2020-06-25T15:16:43.260Z"
},
{
"name": "processing",
"phase": "phase 2",
"result": "OK",
"series": {
"time": [
0,
},
{
"name": "shutoffPressure",
"time": 24,
"value": {
"pressure": 100950,
"upperError": 103000,
"lowerError": 99000
}
}
],
"ts": "2020-06-25T15:16:43.115Z"
},
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
23,
24
],
"temperature": [
49.2,
48.8,
50
]
},
"ts": "2020-06-25T15:16:43.590Z"
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
{
"name": "processing",
"phase": "phase 2",
"result": "OK",
"series": {
"time": [
0,
23,
24
],
"temperature": [
49.2,
48.8,
50
]
},
"ts": "2020-06-25T15:16:43.445Z"
}
]
}
Fields definition
Eclipse Foundation Privacy Policy Terms of Use Copyright Agent Security reports Legal
