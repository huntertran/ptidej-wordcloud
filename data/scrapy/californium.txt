Eclipse Californium™
Eclipse Californium
Getting Started
Community
Star
Back to top
Eclipse Californium™
CoAP in Java
CoAP in Java
Californium is a powerful CoAP framework targeting back-end services communicating with smaller Internet of Things devices.
Stronger Internet of Things devices may use Californium as well.
It provides a convenient API for RESTful Web services that support all of CoAP’s features.
Standards compliant
Standards compliant
Californium has been running code for the IETF and is passing all ETSI Plugtest test specifications.
Perfect for IoT cloud services
Perfect for IoT cloud services
Californium has an extremely scalable architecture and outperforms high-performance HTTP servers.
CoAP’s low overhead allows to handle millions of IoT devices with a single service instance.
The flexible concurrency model allows to implement whatever is best for your application.
Californium (Cf) Core
The project is divided into five sub-projects. The Californium (Cf) Core provides the central framework with the protocol implementation to build your Internet of Things applications. The repository also includes example projects to get you started. All Californium sources are hosted on GitHub, so you can easily contribute through pull requests.
Californium (Cf) is dual-licensed under EPL and EDL. The latter is a BSD-like license, which means the Cf CoAP framework can be used together with proprietary code to implement your IoT product!
Cf is available from Maven Central and very easy to consume in your Java project. We have got your back covered from OSGi wrapper to HTTP-CoAP cross-proxy to advanced test suites that have been used at the ETSI Plugtests.
Repository
Scandium (Sc)
The Scandium (Sc) sub-module provides security for Californium. It implements DTLS 1.2 to secure your application
through ECC with pre-shared keys, certificates, or raw public keys.
Repository
Actinium (Ac)
Actinium (Ac) is the app-server for Californium to realize IoT mashups! Your JavaScript apps become available as RESTful resources and can directly talk to IoT devices using our CoapRequest object API.
Repository
Getting Started
Learn how to use Californium
The Internet of Things if growing, but how can you build your own connected objects?
Together with MQTT, CoAP is one of the popular IoT protocols.
It provides answers to the typical IoT constraints: it is bandwidth efficient and fits
in constrained embedded environment while providing friendly and discoverable RESTful API.
Take the Tutorial
More Components
Connector
Connector
The element-connector abstracts from the different transports CoAP can use.
It provides the basic UDPConnector as well as the interface to implement new connectors like the DtlsConnector of Scandium.
Tools
Tools
This repository provides CoAP tools that also serve as examples. Use CoAPBench to benchmark your CoAP solutions or simply use our cf-client to interact with your devices from the command line.
Who is using Californium?
Get in Touch
Wanna tell us what you think about Californium? What we can improve? Which feature is missing? Or just discuss architectural issues?
Report an Issue
Report an Issue
The easiest way to tell us about a problem you experience with Californium is by opening an issue on our GitHub page.
Please make sure to search the existing issues for similar symptoms before you open a new issue.
Mailing List
Mailing List
This is the place where we announce new releases and discuss architectural issues of greater impact.
However, questions and problems should be raised using a GitHug issue.
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© Copyright 2020
by Eclipse Californium project
Website based onSyna
×
GitHub - eclipse/californium.tools: Californium project
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
GitHub - eclipse/californium.actinium: Californium project
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
californium.tools
Watch
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
18
Star
51
Fork
43
Californium project
View license
51
stars
43
forks
Star
Watch
Code
Issues
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
3
Pull requests
0
Actions
Projects
0
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
master
6
branches
24
tags
Go to file
Code
Clone
HTTPS
GitHub CLI
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
californium.actinium
Watch
8
Star
12
Use Git or checkout with SVN using the web URL.
Work fast with our official CLI.
Learn more.
Open with GitHub Desktop
Download ZIP
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching Xcode
If nothing happens, download Xcode and try again.
Fork
10
Californium project
View license
12
stars
10
forks
Star
Watch
Code
Issues
1
GitHub - eclipse/californium: CoAP/DTLS Java Implementation
Go back
Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back
Latest commit
Git stats
177
commits
Files
Permalink
Failed to load latest commit information.
Type
Name
Latest commit message
Commit time
cf-browser
Pull requests
0
Actions
Projects
0
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Add payload- and message-types menu.
Oct 23, 2020
cf-client
Add README for cf-client.
Nov 4, 2020
cf-coapbench
2.5.0-SNAPSHOT after release 2.4.0
Aug 27, 2020
cf-polyfill
2.5.0-SNAPSHOT after release 2.4.0
Aug 27, 2020
cf-rd
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
master
6
branches
17
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
2.5.0-SNAPSHOT after release 2.4.0
Aug 27, 2020
cf-server
2.5.0-SNAPSHOT after release 2.4.0
Aug 27, 2020
run/certs
Refreshed certificates in trust and key store.
Nov 15, 2014
.gitattributes
Added git attributes file for line ending handling.
Oct 8, 2015
.gitignore
Removed Eclipse files from git. Eclipse import existing Maven project…
Nov 16, 2014
CONTRIBUTING.md
Use standard wording for reference to ECA
tags
Go to file
Code
Clone
HTTPS
GitHub CLI
Use Git or checkout with SVN using the web URL.
Work fast with our official CLI.
Learn more.
Open with GitHub Desktop
Download ZIP
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching GitHub Desktop
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
Nov 8, 2019
LICENSE
Adapt legal docs to those used in Californium core
Nov 18, 2019
NOTICE
Adapt legal docs to those used in Californium core
Nov 18, 2019
README.md
Add README for cf-client.
Nov 4, 2020
pom.xml
2.5.0-SNAPSHOT after release 2.4.0
Aug 27, 2020
View code
README.md
Californium (Cf) Tools
If nothing happens, download GitHub Desktop and try again.
Go back
Launching Xcode
If nothing happens, download Xcode and try again.
Go back
Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back
Latest commit
Git stats
135
commits
Files
Permalink
Failed to load latest commit information.
Type
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
californium
Watch
51
These are CoAP tools based on the
Californium (Cf) CoAP framework.
cf-browser - javaFx GUI based coap client
cf-client - cli based coap client
cf-coapbench - benchmark (currently not maintained/tested, use californium/demo-apps/cf-extplugtest-client instead).
cf-polyfill - WebServer emits coap requests (currently not maintained/tested)
cf-rd - coap resource directory
cf-server - coap server
Maven
Use mvn clean install in the root directory to build the tools. It requires at least a Java 8 SDK. The standalone JARs will be created in the run folder.
e.g. run with java -jar cf-client-*.jar.
Note: Building cf-browser using Java 8 requires the JavaFX libraries to be available on the system class path.
Oracle's JDK includes the JavaFX libraries by default. OpenJDK does not and OpenJFX must be installed separately.
For instructions regarding the usage of OpenJFX on Java 11 and later, refer to the OpenJFX documentation.
On OpenJDK 8 the availability of OpenJFX depends on the linux distribution you are using. Later versions of Ubuntu seems to not longer provide OpenJFX for OpenJDK 8. Maybe the workaround described in this GitHub issue
works for you.
Name
Latest commit message
Commit time
run/appserver
src
.gitignore
CONTRIBUTING.md
LICENSE
NOTICE
README.md
pom.xml
View code
README.md
Actinium (Ac) App-server 2.0 for Californium
Version 2.0 is now based on Nashorn and provides module loading mechanism
Star
491
Fork
287
CoAP/DTLS Java Implementation
www.eclipse.org/californium/
View license
491
stars
287
forks
Star
Watch
Code
Issues
cf-browser - README
Eclipse
The project also includes the project files for Eclipse. Make sure to have the
following before importing the Californium (Cf) projects:
Eclipse EGit
m2e - Maven Integration for Eclipse
UTF-8 workspace text file encoding (Preferences » General » Workspace)
Then choose [Import... » Git » Projects from Git » Local]
to import californium.tools into Eclipse.
e.g. run org.eclipse.californium.tools.GUIClientFX as Java application.
Usage
e.g. java -jar cf-browser-*.jar
About
Californium project
Resources
Readme
License
Our novel runtime container Actinium (Ac) exposes scripts, their configuration, and their lifecycle management through a RESTful programming interface using the Constrained Application Protocol (CoAP).
We endow the JavaScript language with an API for direct interaction with mote-class IoT devices, the CoapRequest object, and means to export script data as Web resources.
With Actinium, applications can be created by simply mashing up resources provided by CoAP servers on devices, other scripts, and classic Web services.
Maven
Actinium can only be built using JDK 1.8 because of its dependencies to some JDK internal classes
(you are more than welcome to help us getting rid of them).
Use mvn clean install in the root directory to build the Actinium (Ac) server.
A standalone JAR will be created in the ./run/ directory.
The dependencies are available from the default Maven repositories.
Run with java -jar actinium-*.jar.
If newer JDKs are used to run maven, -DuseToolchain can be used to switch back to the required JDK 1.8
mvn clean install -DuseToolchain
Eclipse
The project also includes the project files for Eclipse. Make sure to have the
following before importing the Californium (Cf) projects:
Eclipse EGit
26
Pull requests
4
Actions
Projects
0
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
View license
Releases
24
1.0.1
Latest
Jan 20, 2016
+ 23 releases
Packages 0
No packages published
Contributors 16
+ 5 contributors
Languages
Java
98.1%
m2e - Maven Integration for Eclipse
UTF-8 workspace text file encoding (Preferences » General » Workspace)
Then choose [Import... » Git » Projects from Git » Local]
to import californium.actinium into Eclipse.
Run org.eclipse.californium.actinium.AcServer as Java application.
Usage
Prerequisites
Make sure the ./appserver/ directory with config.cfg exists when you run
Actinium (Ac), which can be found in the ./run/ directory (must be copied
when running from Eclipse).
./appserver/installed/ contains several example scripts.
./appserver/apps/ contains the configurations of app instances.
Some of the start automatically depending on the start_on_startup flag.
Installing a New App
Send a POST with JavaScript code to install?[appname] where [appname] is
used as (file)name for the app code.
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
master
14
branches
46
tags
Go to file
Code
Clone
HTTPS
Issues · eclipse/californium · GitHub
JavaScript
1.6%
HTML
0.3%
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Example:
Request: POST coap://localhost:5683/install?helloWorld
request.respond(2.05, "Hello World");
}
Response: Application appname successfully installed to /install/helloWorld
The example app ist stored in ./appserver/installed/ as helloWorld.js.
The server now has a new resource /install/helloWorld.
Starting a New App Instance
Send a POST with "name=[instance name]" to /install/helloWorld where
[instance name] is used as name of the instance as well as filename for the
configuration. You can instantiate an installed app several times by choosing
different instance names.
Example:
Request: POST coap://localhost:5683/install/helloWorld
GitHub CLI
Use Git or checkout with SVN using the web URL.
Work fast with our official CLI.
Learn more.
Open with GitHub Desktop
Download ZIP
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching Xcode
If nothing happens, download Xcode and try again.
Go back
Launching Visual Studio
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Payload: name=hello-1
Response: Application hello-1 successfully installed to /apps/running/hello-1
The example instance is stored in ./appserver/apps/ as config_hello-1.cfg.
The server now has two new resources, /apps/appconfigs/hello-1 to change the
configuration of the instance and /apps/running/hello-1 to interact with the
running app.
Communicating With a Running App
Send GET, POST, PUT, or DELETE to a resource under /apps/running/ depending on
Configuring an App Instance
Some of the instance properties can be changed during runtime, some are fixed
(e.g., the name). The changes are committed to the config resource of the app
under /apps/appconfigs/. For this, use a POST with key = value pairs as
payload to update existing keys. Use PUT to clear all existing keys and start
fresh with the keys in the PUT payload.
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back
Latest commit
Git stats
2,285
commits
Files
Permalink
Failed to load latest commit information.
Type
Name
Latest commit message
Commit time
assembly
bom
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
There are also three special commands to control the running instance via POST:
start, restart, and stop.
Example:
a) Request: GET coap://localhost:5683/apps/appconfigs/hello-1
Response: All app properties
b) Request: POST coap://localhost:5683/apps/appconfigs/hello-1
Payload: enable_request_delivery = false
Response: successfully changed keys: [enable_request_delivery]
[App hello-1 cannot receive any more request]
c) Request: POST coap://localhost:5683/apps/appconfigs/hello-1
Payload: restart
Response: put running = restart
[App hello-1 is restarting]
Programming Your Own Apps
JavaScriptResource. They have the request as argument, which can be responded
californium-core
californium-osgi
californium-proxy
californium-proxy2
californium-tests
cf-oscore
cf-pubsub
cf-utils
demo-apps
demo-certs
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
through its respond(code, payload) method.
app.root is the root resource of your app under /apps/running/.
Example:
app.root.onget = fnc;
app.root.onpost = fnc;
app.root.onput = fnc;
app.root.ondelete = fnc;
request.respond(2.05, "Hello World");
}
element-connector-tcp-netty
element-connector
legal
scandium-core
site
.gitattributes
.gitignore
.gitmodules
CONTRIBUTING.md
ISSUE_TEMPLATE.md
LICENSE
NOTICE
README.md
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
Sub-resources can be added to the root resource as shown below:
res = new JavaScriptResource('mySubResource');
app.root.add(res);
You can dump information to the console through the app object:
app.dump("Hello World");
app.error("Houston, we have a problem");
AcShell
The AcShell can be used to run a single app from the command line.
Start with:
Windows:
java -cp target/actinium-*.jar org.eclipse.californium.actinium.AcShell file.js
Linux:
java -cp target/actinium-*.jar org.eclipse.californium.actinium.AcShell file.js
About
Californium project
californium-180.png
cf_64.png
eclipse-cleanup-profile.xml
eclipse-formatter-profile.xml
license_header_template.txt
pom.xml
View code
README.md
Californium (Cf) - CoAP for Java
Eclipse Californium is a Java implementation of RFC7252 - Constrained Application Protocol for IoT Cloud services. Thus, the focus is on scalability and usability instead of resource-efficiency
like for embedded devices. Yet Californium is also suitable for embedded JVMs.
More information can be found at
http://www.eclipse.org/californium/
and http://coap.technology/.
/
californium
Watch
51
Star
491
Fork
287
Code
Issues
26
Pull requests
4
Actions
Resources
Readme
License
View license
Releases
17
tags
Packages 0
No packages published
Contributors 8
Languages
Java
78.4%
JavaScript
Build using Maven
You need to have a working maven installation to build Californium.
Then simply run the following from the project's root directory:
$ mvn clean install
Executable JARs of the examples with all dependencies can be found in the demo-apps/run folder.
The build-process is tested for jdk 7, jdk 8 and jdk 11. For jdk 7 the revapi maven-plugin is disabled, it requires at least java 8.
To generate the javadocs, add "-DcreateJavadoc=true" to the command line and set the JAVA_HOME.
$ mvn clean install -DcreateJavadoc=true
Build jdk7 compliant
Californium 2.x can be used with java 7 or newer. If you want to build it with a jdk 7, but use also plugins which are only supported for newer jdks, the toolchain plugin could be used. That requires a toolchains configuration in "toolchains.xml" in your maven ".m2" folder
<?xml version="1.0" encoding="UTF8"?>
<toolchains>
<!-- JDK toolchains -->
<toolchain>
<type>jdk</type>
Projects
0
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
21.6%
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
<provides>
<version>1.7</version>
</provides>
<configuration>
<jdkHome>path..to..jdk7...home</jdkHome>
</configuration>
</toolchain>
</toolchains>
To use the jdk7 toolchain, add "-DuseToolchain=true" to the command line.
$ mvn clean install -DuseToolchain=true
To use the jdk7 toolchain and create javadocs, add "-DuseToolchainJavadoc=true" to the command line (JAVA_HOME is not required).
$ mvn clean install -DuseToolchainJavadoc=true
Build with jdk11 and EdDSA support
To support EdDSA, either java 15, or java 11 with ed25519-java is required at runtime. Using java 15 to build Californium, leaves out ed25519-java,
using java 11 for building, includes ed25519-java by default. If ed25519-java should NOT be included into the californium's jars, add -Dno.net.i2p.crypto.eddsa=true to maven's arguments.
$ mvn clean install -Dno.net.i2p.crypto.eddsa=true
Pinned issues
Evolving the SessionCache
#1345
opened Jun 17, 2020 by
boaks
Open
23
WIP: DTLS CID LoadBalancer - First Tutorials and Results
#1424
opened Oct 15, 2020 by
boaks
Open
1
Release 2.5.0 Scheduled - 12. November 2020
#1431
opened Oct 23, 2020 by
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
In that case, it's still possible to use ed25519-java, if the eddsa-0.3.0.jar is provided to the classpath separately.
Using Californium in Maven Projects
We are publishing Californium's artifacts for milestones and releases to Maven Central.
To use the latest released version as a library in your projects, add the following dependency
to your pom.xml (without the dots):
<dependencies>
...
<dependency>
<groupId>org.eclipse.californium</groupId>
<artifactId>californium-core</artifactId>
<version>2.4.1</version>
</dependency>
...
</dependencies>
...
Current Builds
boaks
Open
4
Labels
26
Milestones
20
Labels
26
Milestones
20
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Save preferences
You can also be bold and try out the most recent build from master.
However, we are not publishing those to Maven Central but to Californium's project repository at Eclipse only.
You will therefore need to add the Eclipse Repository to your pom.xml first:
<repositories>
...
<repository>
<id>repo.eclipse.org</id>
<name>Californium Repository</name>
<url>https://repo.eclipse.org/content/repositories/californium/</url>
</repository>
...
</repositories>
You can then simply depend on 2.5.0-SNAPSHOT.
Eclipse
The project can be easily imported into a recent version of the Eclipse IDE.
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
26 Open
521 Closed
26 Open
521 Closed
Author
Filter by author
Label
Filter by label
Use alt + click/return to exclude labels.
Make sure to have the following before importing the Californium (Cf) projects:
Eclipse EGit (should be the case with every recent Eclipse version)
m2e - Maven Integration for Eclipse (should be the case with every recent Eclipse version)
UTF-8 workspace text file encoding (Preferences » General » Workspace)
Then choose [Import... » Maven » Existing Maven Projects] to import californium into Eclipse.
IntelliJ
The project can also be imported to IntelliJ as follows:
In IntelliJ, choose [File.. » Open] then select the location of the cloned repository in your filesystem. IntelliJ will then automatically import all projects and resolve required Maven dependencies.
Interop Server
A test server is running at coap://californium.eclipse.org:5683/.
It is an instance of the cf-plugtest-server from the demo-apps.
The root resource responds with its current version.
More information can be found at http://californium.eclipse.org/.
Another interop server with a different implementation can be found at
coap://coap.me:5683/.
More information can be found at http://coap.me/.
Projects
Filter by project
Milestones
Filter by milestone
Assignee
Filter by who’s assigned
Sort
Sort by
Newest
Oldest
Most commented
Least commented
Recently updated
Least recently updated
Most reactions
👍
Adapter Selection
For some systems (particularly when multicasting), it may be necessary to specify/restrict californium to a particular network interface, or interfaces. This can be
achieved by setting the COAP_NETWORK_INTERFACES JVM parameter to a suitable regex, for example:
java -DCOAP_NETWORK_INTERFACES='.*wpan0' -jar target/cf-helloworld-server-2.5.0-SNAPSHOT.jar MulticastTestServer
Contact
A bug, an idea, an issue? Join the Mailing list
or create an issue here on GitHub.
Contributing
Please check out our contribution guidelines
About
CoAP/DTLS Java Implementation
www.eclipse.org/californium/
Topics
eclipseiot
coap
👎
😄
🎉
😕
❤️
🚀
👀
Should CertPathUtil.validateCertificatePath() return the selected TrustAnchor ?
#1443
opened Nov 9, 2020 by
sbernard31
2
Release 2.5.0 Scheduled - 12. November 2020
#1431
opened Oct 23, 2020 by
boaks
iot
internet-of-things
java
dtls
Resources
Readme
License
View license
Releases
46
2.4.1 Bugfix Release
Latest
Sep 10, 2020
+ 45 releases
Packages 0
No packages published
4
WIP: DTLS CID LoadBalancer - First Tutorials and Results
#1424
opened Oct 15, 2020 by
boaks
1
How to cluster server with GET-observes?
could this be closed?
#1417
opened Sep 21, 2020 by
sverhagen
2
Evolving the SessionCache
#1345
opened Jun 17, 2020 by
boaks
Eclipse Californium™
Used by 757
+ 749
Contributors 54
+ 43 contributors
Languages
Java
99.1%
Other
0.9%
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
23
DTLS1.3 support
#1337
opened Jun 3, 2020 by
eliot4321
1
2.x.y - PskStore - ambiguous javadoc and example implementation
#1303
opened May 5, 2020 by
boaks
1
Use exceptions for OptionSet when wrong values are applied
#1299
opened Apr 27, 2020 by
boaks
3.0.0
Eclipse Californium
Getting Started
Community
Star
Back to top
Eclipse Californium™
CoAP in Java
CoAP in Java
Californium is a powerful CoAP framework targeting back-end services communicating with smaller Internet of Things devices.
Stronger Internet of Things devices may use Californium as well.
It provides a convenient API for RESTful Web services that support all of CoAP’s features.
Standards compliant
Standards compliant
Californium has been running code for the IETF and is passing all ETSI Plugtest test specifications.
Perfect for IoT cloud services
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
First feeback about "clean connection API".
#1240
opened Mar 12, 2020 by
sbernard31
8
Simulate lot of clients : shared executor for connectors
enhancement
#1203
opened Jan 23, 2020 by
sbernard31
4
How to implement store and restore observation relations
could this be closed?
#1177
opened Jan 2, 2020 by
dgooris
Perfect for IoT cloud services
Californium has an extremely scalable architecture and outperforms high-performance HTTP servers.
CoAP’s low overhead allows to handle millions of IoT devices with a single service instance.
The flexible concurrency model allows to implement whatever is best for your application.
Californium (Cf) Core
The project is divided into five sub-projects. The Californium (Cf) Core provides the central framework with the protocol implementation to build your Internet of Things applications. The repository also includes example projects to get you started. All Californium sources are hosted on GitHub, so you can easily contribute through pull requests.
Californium (Cf) is dual-licensed under EPL and EDL. The latter is a BSD-like license, which means the Cf CoAP framework can be used together with proprietary code to implement your IoT product!
Cf is available from Maven Central and very easy to consume in your Java project. We have got your back covered from OSGi wrapper to HTTP-CoAP cross-proxy to advanced test suites that have been used at the ETSI Plugtests.
Repository
Scandium (Sc)
The Scandium (Sc) sub-module provides security for Californium. It implements DTLS 1.2 to secure your application
through ECC with pre-shared keys, certificates, or raw public keys.
Repository
Actinium (Ac)
Actinium (Ac) is the app-server for Californium to realize IoT mashups! Your JavaScript apps become available as RESTful resources and can directly talk to IoT devices using our CoapRequest object API.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
3
Voting for Versioning
Voting
#1166
opened Dec 12, 2019 by
boaks
10
Question about versionning ?
question
#1159
opened Dec 6, 2019 by
sbernard31
29
How to support the failover from the view of CoAPServer?
Repository
Getting Started
Learn how to use Californium
The Internet of Things if growing, but how can you build your own connected objects?
Together with MQTT, CoAP is one of the popular IoT protocols.
It provides answers to the typical IoT constraints: it is bandwidth efficient and fits
in constrained embedded environment while providing friendly and discoverable RESTful API.
Take the Tutorial
More Components
Connector
Connector
The element-connector abstracts from the different transports CoAP can use.
It provides the basic UDPConnector as well as the interface to implement new connectors like the DtlsConnector of Scandium.
Tools
Tools
This repository provides CoAP tools that also serve as examples. Use CoAPBench to benchmark your CoAP solutions or simply use our cf-client to interact with your devices from the command line.
Save preferences
#1045
opened Aug 22, 2019 by
TerenceYi
23
DTLS Return Routability Check (RRC)
#1006
opened Jul 9, 2019 by
sbernard31
6
[Proposal] Make multicast sender robust to network interface restart
enhancement
#930
opened Apr 15, 2019 by
aml2610
1
Who is using Californium?
Get in Touch
Wanna tell us what you think about Californium? What we can improve? Which feature is missing? Or just discuss architectural issues?
Report an Issue
Report an Issue
The easiest way to tell us about a problem you experience with Californium is by opening an issue on our GitHub page.
Please make sure to search the existing issues for similar symptoms before you open a new issue.
Mailing List
Mailing List
This is the place where we announce new releases and discuss architectural issues of greater impact.
However, questions and problems should be raised using a GitHug issue.
Eclipse Legal
Privacy Policy
OMA 1.1 support related
#863
opened Jan 29, 2019 by
sgoyaldel
14
2.0.x, deduplication considering ip-address changes
#837
opened Dec 27, 2018 by
boaks
7
setReadyToSent call several times with transparent block mode.
question
#818
opened Dec 3, 2018 by
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© Copyright 2020
by Eclipse Californium project
Website based onSyna
×
sbernard31
10
Scandium support for TLS 1.3 and ed25519 curves
question
#762
opened Oct 3, 2018 by
LudwigSeitz
3
CoCoA Congestion Control not working for Server
bug
#736
opened Aug 28, 2018 by
samkumar
6
Maven Central Repository Search
Sorry, your browser does not support JavaScript!
Define a lifetime for DTLS session
enhancement
scandium
#617
opened Apr 24, 2018 by
sbernard31
23
Thinking about changing handshake alert behavior for debug.
question
scandium
#606
opened Apr 9, 2018 by
sbernard31
10
Contributing OSCORE to Californium.
enhancement
#516
opened Jan 9, 2018 by
LudwigSeitz
53
Reg. Developer manual?
question
#306
opened May 16, 2017 by
lakshT
14
Previous 1 2 Next
Previous Next
ProTip!
Adding no:label will show everything without a label.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
