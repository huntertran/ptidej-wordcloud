Welcome :: Eclipse Hono™
Welcome - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Connect. Command. Control.
Eclipse Hono™ provides remote service interfaces for connecting large numbers of IoT
devices to a back end and interacting with them in a uniform way regardless of the device
communication protocol.
Millions of Devices
Hono is designed for connecting large numbers of IoT devices. Its micro service based architecture and use of
a reactive programming model allow for scaling out horizontally.
Uniform API
Connect a multitude of different types of devices to your (cloud) back end. Communicate with all of them via
the same simple API regardless of the device protocol.
IoT Protocols
Hono supports devices communicating via common IoT protocols like HTTP, MQTT, AMQP and CoAP out of the box.
Messaging Patterns
Hono provides APIs for important IoT communication patterns: Telemetry and Event messages can be used by devices
to report sensor readings whereas applications can use Command & Control to invoke operations on devices.
Secure
Hono is designed for security by default. It supports common authentication mechanisms like username/password
and X.509 client certificates to verify a device’s identity and uses transport layer security (TLS) when
communicating with devices.
Extensible
Your device uses a custom protocol? Hono provides a simple mechanism to add custom protocol adapters.
Who uses Eclipse Hono?
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
Thank you :: Eclipse Hono™
Thank you - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Thank you
YourKit is kindly supporting this open source project with its full-featured Java Profiler. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit’s leading software products: YourKit Java Profiler and YourKit .NET Profiler.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
Resources :: Eclipse Hono™
Frequently Asked Questions :: Eclipse Hono™
Sandbox :: Eclipse Hono™
Get in Touch :: Eclipse Hono™
Contributing :: Eclipse Hono™
Documentation :: Eclipse Hono™
eclipse/hono - Gitter
Getting started with Eclipse Hono :: Eclipse Hono™
Resources - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Resources
On this page you can find links to arbitrary resources covering Eclipse Hono™ which have been presented at events, conferences
and meet-ups or are available online.
“Release of new MongoDB based device registry in Eclipse Hono” (Blog post November 2020)
Author: Kartheeswaran Kalidass (Bosch.IO)
Article
“X.509 based device authentication in Eclipse Hono” (Blog post February 2019)
Author: Kai Hudalla (Bosch Software Innovations)
Article
“Eclipse Hono: Command and Control” (Talk at eclipsecon Europe October 2018)
Frequently Asked Questions - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Frequently Asked Questions
FAQ is moving to Stack Overflow
The preferred support channel on which the Hono community would like to receive questions from users and answer them is
Stackoverflow. There is the special tag [eclipse-hono],
that the Hono developers keep watching. This FAQ page here will be removed soon.
Why do I get HTTP/1.1 503 Service Unavailable when sending messages to the HTTP protocol adapter?
See the accepted answer on Stackoverflow.
Why do I get the exception io.vertx.core.VertxException: OpenSSL is not available during startup of a protocol adapter?
See the accepted answer on Stackoverflow.
Why do I see ConnectionLimitManager - Connection limit (<VALUE>) exceeded in the logs of a protocol adapter?
See the accepted answer on Stackoverflow.
Sandbox - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Sandbox
We are providing a publicly accessible Eclipse Hono™ sandbox environment at hono.eclipseprojects.io.
The main purpose of the system is to provide an environment for experimenting with devices and how to connect them to Hono without the need for setting up a local instance.
Deprecated domain name
The sandbox used to be available at hono.eclipse.org. That domain name will still work for some time but
will eventually be disabled. Please update your URLs accordingly.
The sandbox hosts a Hono instance consisting of the same components as described in the Getting started Guide.
All services are exposed via the same ports as used in the guide.
Take note
The sandbox is intended for testing purposes only. Under no circumstances should it be used for any production use case.
Get in Touch - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Get in Touch
Wanna tell us what you think about Eclipse Hono™? What we can improve? Which feature is missing? Or just discuss architectural issues?
Ask a Question
We would be delighted to answer your questions regarding the usage of Hono on StackOverflow. Make sure to add the eclipse-hono tag to your question so that we can easily find (and answer) it.
Report an Issue
The easiest way to tell us about a problem you experience with Hono is by opening an issue on our GitHub page.
Please make sure to search the existing issues for similar symptoms before you open a new issue.
Chat
Downloads :: Eclipse Hono™
Contributing - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Contributing
Thank you for considering to contribute to Eclipse Hono™. We really appreciate the time and effort you want to
spend helping to improve things around here. And help we can use :-)
Here is a (non-exclusive, non-prioritized) list of things you might be able to help us with:
bug reports
bug fixes
improvements regarding code quality e.g. improving readability, performance, modularity etc.
documentation (Getting Started guide, Examples, Deployment instructions for cloud environments)
features (both ideas and code are welcome)
You might also want to take a look at our GitHub Issues page and see if you can help out with any of the issues listed. We have put a help wanted label on those issues that we are particularly keen on receiving contributions for.
Road Map :: Eclipse Hono™
We've detected that JavaScript is disabled in your browser. Would you like to proceed to legacy Twitter?
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Getting started with Eclipse Hono - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Getting started with Eclipse Hono
This guide will walk you through an interactive example usage scenario of Eclipse Hono. You will learn how devices can use Hono’s protocol adapters to publish telemetry data and events using both HTTP and/or MQTT. You will also see how a downstream application can consume this data using Hono’s north bound API without requiring the application to know anything about the specifics of the communication protocols used by the devices.
Prerequisites for the Getting started Guide
This guide requires several tools to be installed on your computer.
During the course of this guide, the devices publishing data will be represented by means of running some command line tools for posting HTTP requests and for publishing MQTT packets.
Talk description (October 23, 2018)
Speaker : Karsten Frank (Bosch Software Innovations)
Slides
“Using multi-tenancy in Eclipse Hono” (Blog post April 2018)
Author : Kai Hudalla (Bosch Software Innovations)
Article
“Eclipse Hono: Connecting large numbers of IoT devices” (Blog post January 2018)
Authors : Dejan Bosanac (Red Hat), Karsten Frank (Bosch Software Innovations), Paolo Patierno (Red Hat)
Article
“Eclipse Hono: Connect. Command. Control.” at Virtual IoT Meetup
Virtual IoT Meetup hosted by Eclipse Foundation (October 11, 2017)
Speakers : Kai Hudalla (Bosch Software Innovations), Paolo Patierno (Red Hat)
Video and slides
“Eclipse Hono: Connect. Command. Control.” at Eclipse Day Milan 2017
Eclipse Day Milan 2017 (September 22, 2017)
Speaker : Paolo Patierno (Red Hat)
Slides
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Why do I see MemoryBasedConnectionLimitStrategy - Not enough memory in the logs of a protocol adapter?
See the accepted answer on Stackoverflow.
How do I use client certificates for authentication?
See the accepted answer on Stackoverflow.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
Command & Control :: Eclipse Hono™
It is also not allowed to register with nor publish any personally identifiable information to any of the sandbox’s services.
You can use the sandbox without revealing who you are or any information about yourself. The APIs of the Device Registry running
on the sandbox can be used anonymously for creating tenants, register devices and add credentials. However, data can only be added
but cannot be updated or removed using the corresponding APIs. This is to prevent others from tampering with your
tenants/devices/credentials. In order to minimize the risk of dissemination of data, all tenants, devices and credentials are
deleted periodically.
We do not collect nor share with third parties any of the data you provide when registering tenants, devices and credentials.
We also do not inspect nor collect nor share with third parties any of the data your devices publish to the sandbox.
Play fair! The sandbox’s computing resources are (quite) limited. The number of devices that can be registered per tenant
is therefore limited to 100.
The sandbox will be running the latest Hono release or milestone (if available). However, we may also deploy a more recent nightly
build without further notice.
In order to minimize the risk of collisions of device identities and credentials and to reduce the risk of others guessing
your identifiers, you are advised to use non-trivial, hard-to-guess tenant and device identifiers (e.g. a UUID).
The Apache Artemis instance we use for brokering events is configured with a maximum queue size of 1MB, i.e. you can only buffer
up to 1 MB of events (per tenant) without having any consumer connected that actually processes the events.
Once that limit is reached, no more events will be accepted by the protocol adapters for the corresponding tenant.
In addition to that, events that are not consumed will automatically be removed from the queue(s) after five minutes.
The sandbox exposes its API endpoints on both a TLS secured as well as an unsecured port. The secure ports use a Let’s Encrypt
certificate so you should not need to configure a specific trust store on your client in order to interact with them. Please note
that when using the unsecured ports, the information you exchange with the sandbox might be exposed to eavesdroppers.
We therefore strongly suggest that you use the secure ports only, if possible!
When using the Hono client to access the sandbox’
Device Notifications :: Eclipse Hono™
Connecting Devices :: Eclipse Hono™
Device Provisioning :: Eclipse Hono™
Multi-Tenancy :: Eclipse Hono™
Device Identity :: Eclipse Hono™
Concepts :: Eclipse Hono™
The most direct way of interacting with the Hono developers is by means of joining our room on Gitter.
Keep in mind, though, that our Gitter room is mainly used by committers and contributors for discussing issues related to development of new features and organizational stuff. The preferred way of posting questions regarding usage of Hono is via StackOverflow.
Mailing List
An excellent way to get the latest news and announcements around Hono is to join the mailing list. This is the place where we announce new releases and discuss architectural issues of greater impact.
Project Call
There is a bi-weekly community call which is open to everyone interested in
the development of Hono. You can join by using the following link:
https://bluejeans.com/494114785
You can also import the calendar file project-call.ics
which contains more information about joining by computer or telephone.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Downloads - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Downloads
Binaries
Eclipse Hono’s service components are provided by means of pre-built Docker images available from
Docker Hub. These container images can be deployed to popular
container orchestration platforms like Kubernetes and OpenShift.
The Eclipse IoT Packages project hosts the
Hono Helm chart
which can be used to install the most recent release of Hono to a Kubernetes cluster
using the Helm package manager.
Eclipse Contributor Agreement
Before your contribution can be accepted by the project team contributors must
electronically sign the Eclipse Contributor Agreement (ECA).
http://www.eclipse.org/legal/ECA.php
Commits that are provided by non-committers must have a Signed-off-by field in
the footer indicating that the author is aware of the terms by which the
contribution has been provided to the project. The non-committer must
additionally have an Eclipse Foundation account and must have a signed Eclipse
Contributor Agreement (ECA) on file.
For more information, please see the Eclipse Committer Handbook:
https://www.eclipse.org/projects/handbook/#resources-commit
Conventions
The groupId of all Hono modules is org.eclipse.hono, artifactId always starts with hono-.
All code complies with the formatting rules defined by the settings files in the eclipse folder.
Modules implementing one of the Hono APIs are sub-modules of services.
Making your Changes
Fork the repository on GitHub.
Create a new feature branch for your changes.
Make your changes.
Make sure your code complies with the formatting rules defined by the settings files in the eclipse folder.
If you are creating new class files, make sure that they include a proper copyright header at the top.
Any new file created should contain a header based on the following template:
/**
*
Road Map - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Road Map
We are trying our best to anticipate the needs and requirements of users based on the feedback we get from users. From this information we maintain a Road Map for the next several releases.
We try to maintain a steady pace of releases every three months with milestones in between. However, due to changes in requirements over time and because we all have only limited time to spend on Hono, the scope of the releases may change over time as well. The best way to make sure that a certain feature that you anticipate or need the most actually makes it into a release, is by becoming a contributor and/or committer to Hono yourself.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Yes
Something went wrong, but don’t fret — let’s give it another shot.
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
Curl HTTP Command Line Client
The curl command is used in this guide for registering devices with Hono and for simulating a device publishing data using HTTP.
On most *nix like systems curl will probably already be installed. Otherwise, please refer to the
Curl project page for installation instructions.
Mosquitto MQTT Command Line Client
The mosquitto_pub command is used in this guide for simulating a device publishing data using the MQTT protocol.
Please refer to the Mosquitto project page for installation instructions, if you do not
have it installed already.
NB The installation of the Mosquitto command line client is optional. If you do not install it then you will not be able to simulate
an MQTT based device but otherwise will be able to get the same results described in this guide.
Hono Command Line Client
The Hono command line client is used in this guide for simulating an application that consumes telemetry data and events published by devices.
The client is available from Hono’s download page.
Note that running the command line client requires a Java 11 runtime environment being installed locally.
Very quick Quickstart
In the following all necessary commands and operations will be explained on how to register a tenant and a device via the HTTP API.
Then, it will be shown how messages can be sent via the HTTP and MQTT protocol adapters.
If you want to really kickstart your Hono experience there also is a convenience Python script which you can use to
automatically replay the Tutorial given here (at least the telemetry part for now).
Python Quickstart
You can find the Python tutorial in the Examples.
The python script does
Set up a Tenant
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Telemetry and/or Event APIs, make sure to not set a trust store explicitly but instead set the tlsEnabled property to true.
The command line client binary is available from the downloads page and
can be used to consume telemetry/event messages from the sandbox as below:
# in directory where the hono-cli-*-exec.jar file has been downloaded to
java -jar hono-cli-*-exec.jar --hono.client.host=hono.eclipseprojects.io --hono.client.port=15671 --hono.client.tlsEnabled=true --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver
Note that only the receiver profile is activated but not the ssl profile.
Warning
Everybody who knows your tenant identifier will be able to consume data published by your devices and everybody who also knows the device identifier can read the registration information of that device.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
Template by Bootstrapious.
Ported to Hugo by DevCows
eclipse/hono - Gitter
Please refer to the deployment guide
for installation instructions.
A Java based command line client for consuming telemetry data and events from Hono is available for download from
Eclipse Hono 1.4.3 Command Line Client
The client requires a Java 11 runtime environment to run.
Please refer to the Admin Guide for details regarding the command
line options that the client supports.
Source Code
The source code can be cloned or downloaded from Hono’s GitHub repository.
The Building from Source guide provides instructions on how to build Hono locally.
Release Notes
For a list of the changes in this release, take a look at the release notes.
Previous versions
Eclipse Hono 1.4.0 Command Line Client
Eclipse Hono 1.3.1 Command Line Client
Eclipse Hono 1.3.0 Command Line Client
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* https://www.eclipse.org/legal/epl-2.0
*
* SPDX-License-Identifier: EPL-2.0
*/
Do not forget to add yourself or your organization to the copyright holder list in the NOTICE file in the parent folder if you haven’t already done so in a previous contribution.
Make sure you include test cases for non-trivial features.
Make sure the test suite passes after your changes.
Commit your changes into your feature branch.
Use descriptive and meaningful commit messages.
Squash multiple commits related to the same feature/issue into a single one, if reasonable.
Make sure you use the -s flag when committing in order to add a Signed-off-by footer as mentioned above.
Push your changes to your branch in your forked repository.
Submitting the Changes
Submit a pull request via the GitHub UI.
After Submitting
Do not use your feature branch for any other development, otherwise further changes that you make will be visible in the PR.
More
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Set up a Device in the tenant
Add credentials to the device
Start an (northbound) AMQP Receiver as “Consumer” of the data
Send a Telemetry message via HTTP API
Send a Telemetry message via MQTT API
For more details have a look in the Readme.
Hono Sandbox
The most important prerequisite is, of course, a Hono instance that you can work with.
The most straightforward option to use for this guide is the Hono Sandbox which is running on
infrastructure provided by the Eclipse Foundation and which is publicly accessible from the internet.
Using the Sandbox, there is no need to set up your own Hono instance locally. However, it requires several non-standard ports
being accessible from your computer which may not be the case, e.g. if you are behind a firewall restricting internet access to
a few standard ports only.
You can verify if you can access the relevant ports of the Sandbox by running the following command and comparing the output:
curl -sIX GET http://hono.eclipseprojects.io:28080/v1/tenants/DEFAULT_TENANT
If you get output like this
HTTP/1.1 200 OK
etag: 89d40d26-5956-4cc6-b978-b15fda5d1823
content-type: application/json; charset=utf-8
content-length: 260
you can use the Sandbox. Run the following commands to set some environment variables which will be used during the guide
export REGISTRY_IP=hono.eclipseprojects.io
export HTTP_ADAPTER_IP=hono.eclipseprojects.io
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Ported to Hugo by DevCows
Release Notes :: Eclipse Hono™
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
navigation
Documentation
Learn about Eclipse Hono™ and look up details.
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
export MQTT_ADAPTER_IP=hono.eclipseprojects.io
and then proceed to the Overview of Hono Components.
However, if the curl command yielded different output, you will need to set up Hono locally as described in the next section.
Setting up a local Hono Instance
In case you cannot access the Hono Sandbox as described above, you will need to set up an instance of Hono running on your local computer.
For evaluation purposes a single node Minikube cluster is sufficient to deploy Hono to.
Please refer to the installation instructions for setting up a local Minikube cluster, then
follow the Deployment Guide in order to install Hono to your local Minikube cluster.
Once Hono has been deployed to your local cluster, run the following commands to set some environment variables which will be used during the guide
Verify the last step with
echo $REGISTRY_IP
If this does not print an IP address, check that minikube tunnel is running.
Overview of Hono Components
Hono consists of a set of microservices which are deployed as Docker containers. The diagram below provides an overview of the containers that are part of the example deployment of Hono on the Sandbox or a local Minikube cluster.
Components of the example Hono deployment
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Release Notes - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Release Notes
1.5.0 (not yet released)
New Features
The CoAP adapter has been promoted from experimental to fully supported.
The Hono Client now supports several configuration properties that can be used
to limit its resource usage. In particular the AMQP connection’s max-frame-size,
the AMQP session’s incoming window size and the max-message-size of receiver
links can be configured (and thus limited).
Fixes & Enhancements
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
GitHub - eclipse/hono: Eclipse Hono™ Project
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
Hono Instance
An HTTP Adapter instance that exposes Hono’s Telemetry and Event APIs as URI resources.
An MQTT Adapter instance that exposes Hono’s Telemetry and Event APIs as a generic MQTT topic hierarchy.
An AMQP Adapter instance that exposes Hono’s Telemetry and Event APIs as a set of AMQP 1.0 addresses.
A Device Registry instance that manages registration information and issues device registration assertions to protocol adapters.
An Auth Server instance that authenticates Hono components and issues tokens asserting identity and authorities.
AMQP Network
An Apache Qpid Dispatch Router instance that downstream applications connect to in order to consume telemetry data and events from devices.
An Apache ActiveMQ Artemis instance serving as the persistence store for events.
Monitoring Infrastructure
A Prometheus instance for storing metrics data from services and protocol adapters.
A Grafana instance providing a dash board visualizing the collected metrics data.
In the example scenario used in the remainder of this guide, the devices will connect to the HTTP and MQTT adapters in order to publish telemetry data and events.
The devices will be authenticated using information stored in the Device Registry. The data is then forwarded downstream to the example application via the AMQP Messaging Network.
Registering Devices
When a device tries to connect to one of Hono’s protocol adapters, the protocol adapter first tries to authenticate the device using information kept in the Device Registry.
The information maintained in the registry includes the tenant (a logical scope) that the device belongs to, the device’s unique identity within the tenant and the credentials used by the device for authentication.
Before a device can connect to Hono and publish any data, the corresponding information needs to be added to the Device Registry.
Creating a new Tenant
Register a tenant using Hono’s Device Registry’s management HTTP API (a random tenant identifier will be generated):
curl -i -X POST http://$REGISTRY_IP:28080/v1/tenants
Version:
stable (1.4)
1.4
1.3
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Command & Control
General concept
Command & Control involving a gateway
Command consumer links in the protocol adapter
Example with multiple adapters involved
Gateway subscriptions
Gateway subscribing for commands for a particular device
Gateway subscribing for commands for all its devices
Command & Control
Business applications can send commands to devices following the Command & Control API. This concept page describes how this API is used by applications to send commands and describes how Hono’s protocol adapters process the commands so that they reach their target device.
The file based as well as the MongoDB based registry implementations now remove the shared-key from
PSK credentials returned in the response of the Management API’s get credentials operation.
The Device Registry Management API erroneously declared the plaintext password conveyed in the
update credentials operation’s request payload as a Base64 encoded byte array instead of a
plain string. This has been fixed.
The file based as well as the Mongo DB based registry implementations had failed to do both
updating an existing secret (referred to by ID) and adding a new secret to the same credentials
in a single request. This has been fixed.
The property names for specifying the patterns for validating Tenant and Device IDs have been fixed
in the admin guides for the file based and the Mongo DB based registry implementations.
The registry implementations did not accept X.509 credentials in an update Credentials request.
They also failed to remove existing credentials of a device if they were not included in an
update Credentials request. This has been fixed.
The file based device registry also now supports searching devices for a tenant with optional filters,
paging and sorting options.
Please refer to the Device registry management API
for details.
The wildcards ? and * are now supported by the search devices operation in the MongoDB based device registry.
Please refer to the Device registry management API
for details.
Command messages that have their payload in an AMQP body section whose type isn’t supported in Hono
now get rejected, instead of getting forwarded to the device with an empty payload.
The authentication providers in Hono use CredentialsObject.getCandidateSecrets to retrieve valid secrets.
The secrets are currently filtered based on their validity period regardless of whether the status is enabled
or not. This has been fixed now, so that the disabled secrets are filtered out.
1.3
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Device Notifications
Time until Disconnect Notification
Determining a Device’s Connection Status
Source of the ttd Value
Hono’s HTTP protocol adapter
Hono’s MQTT protocol adapter
Examples
Device Notifications
Business Applications need to know when an attempt to send a command to device is feasible, e.g. because the device is then known to be connected to a protocol adapter. Devices and Protocol Adapters can indicate to Business Applications a device’s intent to e.g. receive commands using specific notifications.
Time until Disconnect Notification
Devices and Protocol Adapters can notify an application about the fact that a device is connected and ready to receive one or more commands by means of including a time ‘til disconnect (ttd) property in telemetry or event messages.
The ttd property value indicates the time that the device will stay connected to the protocol adapter.
Using this value together with the creation-time of the message, an application can determine whether an attempt to send a command to the device has a reasonable chance of succeeding.
The ttd property can be included in any regular telemetry or event message. However, if a device does not have any telemetry data or event to upload to the adapter, it can also use an empty notification instead.
Hono includes utility classes that application developers can use to register a callback to be notified when a device sends a ttd notification.
1.3
1.2
1.1
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Connecting Devices
Connecting to a Protocol Adapter directly
Connecting via a Device Gateway
Gateway Groups
Connecting via a Protocol Gateway
Generic MQTT Protocol Gateway Template
Example Code
Connecting Devices
One of the most important features of Eclipse Hono™ is to abstract away the specific communication protocols
used by devices. This page describes the different ways of how devices can be connected to Hono.
Before a device can connect to Hono and upload data or receive commands from downstream applications,
it needs to be provisioned to the system.
As part of device provisioning, the device is associated with the tenant that it belongs to and gets
1.4
1.3
1.2
1.1
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Device Provisioning
Manual Device Provisioning
Automatic Device Provisioning
Prerequisites
Sequence of steps in Auto-Provisioning
Step 1: Configure the Tenant
Step 2: Connect an unregistered Device to Hono
Device Provisioning
This page describes how devices are provisioned in Hono, i.e. how their digital representation is generated.
For each device, registration information is stored that defines a device identity.
Each device belongs to exactly one tenant. Each device must have at least one set of credentials that are used to authenticate to Hono.
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Multi-Tenancy
The Tenant API
Protocol Adapters respect the Tenant API
Protocol Adapter Configuration
AMQP 1.0 Endpoints
Devices and Tenants
Tenant based Flow Control
Authorization at Tenant Level
Business Applications and Tenants
Separation of Tenants
Hints for Production
Multi-Tenancy
Hono is designed to structure the set of all internally managed data and data streams into strictly isolated subsets.
This includes the registration data and credentials of devices, internal users that are used for authentication,
and the Business Applications that are part of such subsets as well.
This way of strict isolation is generally known as multi-tenancy, where a tenant is the term for such a subset.
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Device Identity
Tenant
Device Registration
Device Authentication
Device Identity
This page describes how devices are represented and identified throughout Hono and its APIs.
The main purpose of Hono is to provide a uniform API for applications to interact with devices,
regardless of the particular communication protocol the devices natively use.
In order to do so, Hono uses a unique logical identifier to refer to each device individually.
Hono does not make any assumptions about the format of a device identifier (or device-id for short).
It basically is a string which is defined at the time a device is being
provisioned. Once created, the device can be referred
to by this identifier when using Hono’s APIs until the device is being removed from the system.
Tenant
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts
Concepts
Understand the concepts behind Eclipse Hono™.
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
HTTP/1.1 201 Created
etag: becc93d7-ab0f-48ec-ad26-debdf339cbf4
location: /v1/tenants/85f63e23-1b78-4156-8500-debcbd1a8d35
content-type: application/json; charset=utf-8
content-length: 45
{"id":"85f63e23-1b78-4156-8500-debcbd1a8d35"}
Random tenant ID value
You will receive a randomly generated tenantId value. It will probably be different than the value given in this example.
Make sure to export it to an environment variable to make the following steps easier:
export MY_TENANT=85f63e23-1b78-4156-8500-debcbd1a8d35
Adding a Device to the Tenant
Register a device using Hono’s Device Registry’s management HTTP API (a random device identifier will be assigned):
curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANT
HTTP/1.1 201 Created
etag: 68eab243-3df9-457d-a0ab-b702e57c0c17
location: /v1/devices/85f63e23-1b78-4156-8500-debcbd1a8d35/4412abe2-f219-4099-ae14-b446604ae9c6
content-type: application/json; charset=utf-8
content-length: 45
{"id":"4412abe2-f219-4099-ae14-b446604ae9c6"}
Random device ID value
You will receive a randomly generated deviceId value. It will probably be different than the value given in this example.
Make sure to export it to an environment variable to make the following steps easier:
export MY_DEVICE=4412abe2-f219-4099-ae14-b446604ae9c6
Commands can be sent following a request/response or a one-way pattern. For Request/Response commands, there is always a response expected from the device.
General concept
The following sequence diagram gives an overview of a device indicating its availability for receiving commands, of a business application sending a command to the device and of the device sending back a command response.
The application and the adapter connect to the AMQP Network, which forwards the transfer - for clarity this is not shown in the diagram below.
Request/Response Command overview
In (1) the device subscribes for commands (if connecting to the AMQP or MQTT adapter) or indicates that it will stay connected for a given amount of time to receive a command (if connecting to the HTTP adapter), using the ttd (“time till disconnect”) parameter.
The protocol adapter will then create the necessary AMQP consumer link with the AMQP messaging network if it doesn’t exist already (for more details see below) and will send a notification to the application that the device is ready to receive commands (2).
After receiving the command, the protocol adapter instance will forward the command to the device (4) and send a disposition update back to the application (5).
In case of a Request/Response command, the device can then send a command response (6) that will be forwarded by the protocol adapter back to the application (7).
Command & Control involving a gateway
Hono has special support for sending commands to devices that are connected via a gateway to Hono.
Such devices are configured in the Hono device registration service in such a way, that certain gateways may act on behalf of the device.
When sending commands, the northbound applications do not have to know to which gateway the command target device is connected to.
The application sends the command with the device address and Hono will direct the command to a gateway that has subscribed for such commands and that is configured to act on behalf of the command target device. If there are multiple matching gateways, the one that the command target device was last connected to is chosen.
The information about which gateways are subscribed and which gateway a device has last communicated by is managed via the device connection service.
Command consumer links in the protocol adapter
The protocol adapter opens 2 kinds of consumer links to receive commands.
This is the link address used by applications to send commands. Upon receiving a command message on this link, the protocol adapter checks whether the command target device id needs to be mapped to a gateway. Furthermore it is checked to which particular protocol adapter instance the target device (or mapped gateway) is actually connected. Since this kind of link is opened from all protocol adapter instances receiving commands for the tenant, a command message is first received by any one of these protocol adapter instances. Therefore, if necessary, the command will be delegated to the adapter instance that is connected to the target device or to the gateway receiving commands for the device.
On this link, commands will be received that have been forwarded from another protocol adapter instance. This link address is only used for communication between protocol adapter instances, so attaching to this link address should not be enabled for applications.
Example with multiple adapters involved
The following diagrams show the message flow if the command message is first received on a protocol adapter instance that the target device is not connected to.
The MQTT adapter now supports specifying the content-type of a telemetry/event message via a MQTT property bag.
The MQTT adapter now sets the MQTT client identifier as client-id in the payload of a Credentials API get
operation request also when authenticating a device using the username/password mechanism. Previously that was
only done for the client certificate authentication mechanism.
API Changes
The deprecated configuration property singleTenant of the protocol adapters and the device registry has been removed.
The default pattern for valid device identifiers used for the file based and the MongoDB based registry
implementations now also contains a colon for compatibility with Eclipse Ditto.
1.4.3
Fixes & Enhancements
The file based as well as the Mongo DB based registry implementations now remove the shared-key from
PSK credentials returned in the response of the Management API’s get credentials operation.
The Device Registry Management API erroneously declared the plain text password conveyed in the
update credentials operation’s request payload as a Base64 encoded byte array instead of a
plain string. This has been fixed.
The file based as well as the Mongo DB based registry implementations had failed to do both
updating an existing secret (referred to by ID) and adding a new secret to the same credentials
in a single request. This has been fixed.
The property names for specifying the patterns for validating Tenant and Device IDs have been fixed
in the admin guides for the file based and the Mongo DB based registry implementations.
See Hono’s example module for details where such a notification callback is used.
Please refer to the Telemetry API and the Event API for further details.
The following table defines the possible values of the ttd property and their semantics:
TTD
Description
> 0
The value indicates the number of seconds that the device will stay connected. Devices using a stateless protocol like HTTP will be able to receive a single command only before disconnecting.
-1
The device is now connected (i.e. available to receive upstream messages) until further notice.
0
The device is now disconnected (i.e. not available anymore to receive upstream messages).
Determining a Device’s Connection Status
An application receiving a downstream message containing a ttd property can check if the device is currently connected
(and thus ready to receive a command) by
adding the ttd value to the creation-time to determine the expiration time, and then
comparing the current time with the expiration time
If the current time is after the expiration time, the device should be assumed to already have disconnected again.
Source of the ttd Value
While it seems to be natural that a device itself indicates when it is ready to receive a command, it may not always be
possible or desirable to do so.
A device could e.g. be not capable to specify the value for ttd in it’s message, or all devices of a particular setup
would always use the same value for ttd, so it would not make much sense to provide this value always again.
assigned a logical identifier which is unique within the tenant.
Devices can be generally partitioned into two groups: devices which natively support the Internet Protocol
(IP) for communication and devices that don’t.
Devices falling into the former group can connect to Hono directly using any of the IP based protocols supported
by Hono’s protocol adapters. Devices from the latter group often use radio based or serial line communication protocols
that are limited to a local area and require a gateway in order to connect to one of Hono’s protocol
adapters via IP.
The diagram below shows a device that supports the MQTT protocol and connects directly to Hono’s MQTT protocol adapter
and another device that uses Bluetooth LE for connecting locally to a gateway which then connects to Hono’s MQTT adapter.
Connecting to a Protocol Adapter directly
The most straight forward scenario is a device connecting to one of Hono’s protocol adapters directly via IP based
network infrastructure. For this to work, the device needs to use a communication protocols supported
by one of the adapters and needs to be able to use the resource endpoints exposed by that particular protocol adapter
as described in its user guide.
In this case the connected device’s identity will be resolved as part of authentication during connection establishment.
For this to work, a set of credentials needs to be provisioned for the device which needs to be appropriate for
usage with one of the adapter’s supported authentication schemes.
Connecting via a Device Gateway
In some cases, a device may not be able to directly connect to one of Hono’s protocol adapters.
An example is a device that uses a serial bus or radio waves for local communication.
Such devices can be connected to a protocol adapter by means of a device gateway which acts on behalf
of the device(s) when communicating with Hono. A device gateway is often implemented as a (small) hardware box
To get an understanding of what is meant by the terms tenant, device registration and credentials,
it is recommended to read the Device Identity page first.
So in order to use a device with Hono, it has to be provisioned.
This means that registration information and at least one credential record must be stored in the device registry.
There are different ways to perform device provisioning.
Manual Device Provisioning
Devices can be provisioned using Hono’s Device Registry Management API via HTTP.
If the desired tenant does not yet exist, it must be created first.
How to do this is described in the tenants section of the Device Registry Management API.
The actual Device Provisioning is then performed by adding devices as described under devices section of the
Device Registry Management API.
This creates both a device identity and an (empty) credentials record. The last step is to add real credentials
as described in the credentials section of the Device Registry Management API.
Automatic Device Provisioning
The term Auto-Provisioning denotes a feature of Hono where the Device Registry automatically generates
the credentials and registration information for a device the first time it connects.
Auto-Provisioning is supported by Hono’s protocol adapters for devices that authenticate with client certificates.
The feature can be enabled per certificate authority (CA) at the tenant.
Prerequisites
Hono does not require a specific Device Registry implementation, but only specifies a set of APIs that must be provided by a compatible implementation.
Since the main part of the Auto-Provisioning has to be done by the Device Registry, the used implementation must explicitly support this feature.
Sequence of steps in Auto-Provisioning
Auto-Provisioning consists of two steps.
Step 1: Configure the Tenant
Such an isolation is essential for enabling a scalable distributed architecture to handle independent subsets as if each subset had its
own installation (which would be much harder to maintain and would not benefit from runtime cost sharing).
provided in the context of a previously created tenant - except the creation of a tenant itself.
In the following the different aspects of multi-tenancy in Hono are addressed and a full overview of the concept is given.
The Tenant API
By means of the Tenant API Hono handles tenants as own entities.
The API defines how to retrieve the details of a specific tenant. This offers the possibility to handle arbitrary
properties on the level of a tenant (see e.g. Protocol adapter configuration).
For convenience, there are CRUD operations for the handling of tenants, which can be found in the
Device Registry Management API.
Protocol Adapters respect the Tenant API
When a device connects to one of Hono’s protocol adapters, the adapter determines the tenant this device belongs to.
How this is done is described in the User Guide.
After the tenant is determined, the adapter retrieves the details of the determined tenant by means of the Tenant API.
Only if the tenant exists and is enabled the adapter further processes the data of the device that is connecting. Otherwise
the connection will be closed.
Protocol Adapter Configuration
Protocol adapters retrieve parts of their configuration on a tenant level by using the details of the determined tenant.
This includes e.g. if a specific protocol adapter is enabled at all for this tenant, allowing to define tenants with
Example: a tenant that
can use the MQTT protocol adapter
Hono supports the logical partitioning of devices into groups called tenants. Each tenant has a unique identifier, a string called the tenant-id, and can be used to provide a logical grouping of devices belonging e.g. to the same application scope or organizational unit. Each device can thus be uniquely identified by the tuple (tenant-id, device-id). This tuple is broadly used throughout Hono’s APIs when addressing a particular device.
Device Registration
Hono components use the Device Registration API to access device registration information. The API defines the assert Registration operation for verifying a device’s registration status.
In many real world scenarios there will already be a component in place which keeps track of devices and which supports the particular provisioning process being used to bring devices into life. In such cases it makes sense to simply implement the Device Registration API as a facade on top of the existing component.
In addition to that, Hono defines a Device Registry Management API, which can be implemented to take advantage of standardized operations for managing devices and credentials. This API is optional because Hono components do not require it during runtime.
Hono comes with a MongoDB and a simple file based implementations of both APIs. The file based implementation, which keeps all data in memory, is to be used only for demonstration purposes and is not supposed to be used in production scenarios.
Device Authentication
Devices connect to protocol adapters in order to publish telemetry data or events. Downstream applications consuming this data often take particular actions based on the content of the messages. Such actions may include simply updating some statistics, e.g. tracking the average room temperature, but may also trigger more serious activities like shutting down a power plant. It is therefore important that applications can rely on the fact that the messages they process have in fact been produced by the device indicated by a message’s source address.
Hono relies on protocol adapters to establish a device’s identity before it is allowed to publish downstream data or receive commands. Conceptually, Hono distinguishes between two identities
an identity associated with the authentication credentials (termed the authentication identity or auth-id), and
an identity to act as (the device identity or device-id).
A device therefore presents an auth-id as part of its credentials during the authentication process which is then resolved to a device identity by the protocol adapter on successful verification of the credentials.
In order to support the protocol adapters in the process of verifying credentials presented by a device, the Credentials API provides means to look up secrets on record for the device and use this information to verify the credentials.
The Credentials API supports registration of multiple sets of credentials for each device. A set of credentials consists of an auth-id and some sort of secret information. The particular type of secret determines the kind of information kept. Please refer to the Standard Credential Types defined in the Credentials API for details. Based on this approach, a device may be authenticated using different types of secrets, e.g. a hashed password or a pre-shared key, depending on the capabilities of the device and/or protocol adapter.
Once the protocol adapter has resolved the device-id for a device, it uses this identity when referring to the device in all subsequent API invocations, e.g. when forwarding telemetry messages downstream to the AMQP Messaging Network.
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
Setting a Password for the Device
Choose a (random) password and register it using Hono’s Device Registry’s management HTTP API (replace my-pwd with your password):
export MY_PWD=my-pwd
curl -i -X PUT -H "content-type: application/json" --data-binary '[{
"type": "hashed-password",
"auth-id": "'$MY_DEVICE'",
"secrets": [{
"pwd-plain": "'$MY_PWD'"
}]
}]' http://$REGISTRY_IP:28080/v1/credentials/$MY_TENANT/$MY_DEVICE
HTTP/1.1 204 Updated
etag: cf91fd4d-7111-4e8a-af68-c703993a8be1
Content-Length: 0
Starting the example Application
In this guide we will use the Hono command line client to simulate such an application.
The client will connect to Hono’s north bound Telemetry and Event APIs using the AMQP 1.0 transport protocol, subscribe to all telemetry and event messages and log the messages to the console.
Open a new terminal window and set the AMQP_NETWORK_IP environment variable.
If you are using the Sandbox server:
export AMQP_NETWORK_IP=hono.eclipseprojects.io
Otherwise, if you are using a local Minikube cluster:
The client can then be started from the command line as follows (make sure to replace my-tenant with your tenant identifier):
# in directory where the hono-cli-*-exec.jar file has been downloaded to
export MY_TENANT=my-tenant
Command subscription
In the scenario here there is a protocol adapter instance #2 through which a command subscription for the example tenant was already made (0).
The device subscribes for commands (1) and the protocol adapter creates the receiver link (2) on the tenant-scoped link. The protocol adapter then updates the command-handling protocol adapter instance for device information (3), assigning the device 4711 to adapter instance id #1. Following that, the notification about the device subscription is sent to the application via the AMQP messaging network (4).
Command handling
Upon receiving the notification, the application prepares sender and command response receiver links (1,2) and sends the command message to the AMQP messaging network. Here it is received by protocol adapter instance #2. The protocol adapter then queries the command-handling protocol adapter instances information for the device id of the command message (4). In this case here, the protocol adapter instance #1 is returned (5). The command then gets forwarded to the AMQP messaging network on the address for adapter instance #1 (6). The protocol adapter instance #1 will receive the message (7) and forward it to the device (8). As the last step, an “accepted” disposition will be sent back to the application (9).
Command response handling
The command response message is sent back to the application from the protocol adapter via the AMQP messaging network.
Gateway subscriptions
Gateway subscribing for commands for a particular device
The following sequence diagrams show the different steps involved in having a gateway subscribe for commands of a particular device.
Command subscription
The gateway “gw-1” is connected to a protocol adapter and subscribes to commands for a device 4711 (1). This device has to be configured so that the gateway may act on its behalf (see Configuring Gateway Devices for details).
The protocol adapter creates the tenant-scoped consumer link on the command/TENANT address (if it doesn’t already exist) (2) and then updates the command-handling protocol adapter instance for device information (3), assigning the device 4711 to adapter instance id #1.
Just like it is done when a protocol adapter handles any kind of message from a gateway acting on behalf of a device, the protocol adapter updates the last-known gateway information here, sending a request to the device connection service (4). The notification event is then sent containing the device id 4711 (5)
Command handling
Command response handling
Gateway subscribing for commands for all its devices
A gateway may also subscribe for commands sent to all the different devices that the gateway acts on behalf of. Such a scenario is shown in the following sequence diagram.
Command subscription
The gateway subscribes for commands just like a normal device would, only using its id gw-1 (1). The protocol adapter creates the tenant-scoped consumer link on the command/TENANT address (if it doesn’t already exist) (2) and then updates the command-handling protocol adapter instance for device information (3), assigning the device ‘gw-1’ to adapter instance id #1.
The registry implementations did not accept X.509 credentials in an update Credentials request.
They also failed to remove existing credentials of a device if they were not included in an
update Credentials request. This has been fixed.
The AMQP protocol adapter did accept messages from clients (devices) exceeding the adapter’s configured
max-message-size. This has been fixed and the adapter now closes the link to the device in this case.
API Changes
The default pattern for valid device identifiers used for the file based and the MongoDB based registry
implementations now also contains a colon (:) for compatibility with Eclipse Ditto.
1.4.0
New Features
The protocol adapters now report connection attempts made by devices
in a new metric. In particular, the metric includes a tag reflecting the outcome
of the attempt to establish a connection and the reason for failure.
Please refer to the Metrics API for details.
A new Quarkus based HTTP protocol adapter is now available. This adapter version provides better memory consumption and
startup times comparing to the existing one.
The LoraWAN protocol adapter has been extended with support for the Actility Enterprise provider.
The LoraWAN protocol adapter has been extended with support for the Orbiwise provider.
Added metrics for tracking the RTT between sending an AMQP message to receiving the disposition.
The CoAP adapter now supports configuration of the timeoutToAck parameter at the tenant level
in addition to the adapter level. If set, the tenant specific value is used for all devices of the
particular tenant. If not set, the value defined at the adapter level is used.
The Device Registry Management API has been extended now to support searching devices for a tenant
with optional filters, paging and sorting options.
Additionally different protocols may or may not let a sender set specific values for a message, so a device using a
specific protocol may not be able to provide a value for the ttd property at all.
For these reasons there are (resp. may be) additional ways of setting the value of ttd:
Hono’s Tenant and Device Registration APIs support the inclusion of default values for application-properties in the
AMQP 1.0 message. By these means a device can be configured to always have a specific value for ttd.
In a future extension there may be a configuration value per tenant and protocol adapter that sets the value of ttd
if it was not provided by other means already (like provided to the protocol adapter or by setting a default value).
Hono’s HTTP protocol adapter
Hono’s HTTP protocol adapter supports the setting of the ttd value in requests explicitly - please refer to the
HTTP Adapter for details.
Alternatively the default property values for devices from the Device Registry can be used (described above).
Hono’s MQTT protocol adapter
The MQTT protocol adapter automatically sends a Time until disconnect notification with a ttd value of -1
for a device that subscribes to the appropriate command topic (refer to the MQTT Adapter user guide for details).
When a device unsubscribes again, the adapter automatically sends a Time until disconnect notification with a ttd value of 0.
Examples
The following sequence diagram shows a Time until disconnect notification while sending a telemetry message downstream
via the HTTP protocol adapter:
Device command readiness with telemetry data
The following sequence diagram shows a Time until disconnect notification by sending an empty event message downstream
via the HTTP protocol adapter:
Device command readiness with explicit event
close to the devices, running some gateway software which translates hence and forth between the device and one
of Hono’s protocol adapters.
From the perspective of a protocol adapter, the gateway looks just like any other device having its own device
identity and credentials.
The following diagram illustrates how a gateway publishes data on behalf of a device that uses Bluetooth for local
communication with the gateway.
The device establishes a Bluetooth connection with the gateway.
The gateway sends an MQTT CONNECT packet to Hono’s MQTT adapter to establish an MQTT connection.
The packet contains the gateway’s credentials.
The MQTT adapter determines the tenant from the username contained in the CONNECT packet and retrieves
the hashed password that is on record for the gateway from the Credentials service.
The Credentials service returns the hashed password.
The MQTT adapter checks the password and accepts the connection request.
The device sends some sensor readings via Bluetooth to the gateway.
The gateway forwards the sensor data in an MQTT PUBLISH packet to the MQTT adapter.
The topic name contains the identifier of the device that the gateway acts on behalf of.
The MQTT adapter invokes the Device Registration service’s assert Device Registration operation to
check if the gateway is authorized to act on behalf of the device.
The Device Registration service confirms the gateway’s authorization.
The MQTT adapter accepts the sensor data from the gateway and forwards it downstream.
Note that the device itself is not authenticated by the MQTT adapter in this case. The responsibility
for establishing and verifying the device identity lies with the gateway in this setup.
It is therefore not necessary to provision credentials for the devices to Hono.
The CA to be used by the devices needs to be configured. The following tasks must be performed:
Create tenant
Configure the trusted CA for the tenant
Enable the feature for the CA
If the Device Registry implementation provides the Management API, this could be done in a single step.
For details refer to the Tenant API specification.
Step 2: Connect an unregistered Device to Hono
Automatic Provisioning of a Device
Hono’s protocol adapters query the APIs of the Device Registry during Device Authentication.
First, the Tenant API is queried. If the Tenant configuration returned contains the CA used for authentication and the
feature is switched on for this CA, the protocol adapter assumes that automatic provisioning must be performed.
It puts the device’s certificate into the query to enable the device registry to do the provisioning.
If the Device Registry does not find any credentials for the device, it takes the information from the client
certificate to create both credentials and device registration data for it.
The Device Registry is expected to perform the following steps:
Generate a unique device-id
Create device
Create credentials
Optional: Provision device in external systems
The newly created credentials are returned to the protocol adapter in the response as if they had been present before.
The following query of the Device Registration API returns the previously generated registration data.
but is not allowed to use the HTTP protocol adapter
Please refer to the Tenant API to find out which protocol adapter properties
can be configured at the tenant level.
AMQP 1.0 Endpoints
The AMQP 1.0 endpoints for all APIs of Hono are scoped to a tenant, by using the scheme <api-name>/TENANT/....
Examples:
telemetry/TENANT
event/TENANT
registration/TENANT
This separates the AMQP endpoints from each other on a tenant level.
The only exception to this is the Tenant API which does not follow this scheme since it
is addressing the tenants themselves.
Devices and Tenants
A physical device will usually be represented in Hono as an entity in the device registry, having a unique identity
and belonging to exactly one tenant. All data sent from a device, as well as from the application to the device,
is therefore treated as belonging to the corresponding tenant.
The following diagram shows the relation between tenants, devices and their credentials:
Tenants, Devices and Credentials
Tenant based Flow Control
An important detail in Hono’s architecture is that data sent downstream is transported via the tenant
scoped AMQP 1.0 links from the protocol adapters to the AMQP 1.0 network.
Each tenant has its own pair of AMQP 1.0 links and is treated
independently from other tenants regarding the back pressure mechanism that AMQP 1.0 offers.
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Eclipse Hono™ Project
www.eclipse.org/hono
EPL-2.0 License
307
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
java -jar hono-cli-*-exec.jar --hono.client.host=$AMQP_NETWORK_IP --hono.client.port=15672 --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver --tenant.id=$MY_TENANT
Publishing Telemetry Data to the HTTP Adapter
Now that the downstream application is running, devices can start publishing telemetry data and events using Hono’s protocol adapters.
First, you will simulate a device publishing data to Hono using the HTTP protocol.
Go back to the original terminal and run:
HTTP/1.1 202 Accepted
Content-Length: 0
If you have started the downstream application as described above, you should now see the telemetry message being logged to the application’s console
in the other terminal. The output should look something like this:
You can publish more data simply by re-running the curl command above with arbitrary payload.
Service Unavailable
When you invoke the command above for the first time, you may get the following response:
HTTP/1.1 503 Service Unavailable
Content-Length: 23
Content-Type: text/plain; charset=utf-8
Retry-After: 2
temporarily unavailable
This is because the first request to publish data for a given tenant is used as the trigger to establish a tenant specific sender link with
the AMQP 1.0 Messaging Network to forward the data over. However, the HTTP adapter may not receive credits quickly enough for the
request to be served immediately. You can simply ignore this response and re-submit the command.
If you haven’t started the application you will always get 503 Resource Unavailable responses because Hono does not
accept any telemetry data from devices if there aren’t any consumers connected that are interested in the data. The reason for this is
that Hono never persists Telemetry data and thus it doesn’t make any sense to accept and process telemetry data if there is no
The subscription notification sent to the application contains the gateway id gw-1. That means that either the application has to know about the gateway, or that it just assumes that the devices it sends commands to (and that are connected to the gateway) are always available for receiving commands. This may especially be the case for long-lasting command subscriptions (with the MQTT or AMQP adapter).
Command handling
In the example above, there is no adapter instance associated with the device 4711. Therefore it is checked whether there are adapter instances handling commands for the gateways, configured to possibly act on behalf of the device.
If there is an adapter instance associated with the last known gateway of the device, that instance is returned as the result. Otherwise, and in the example above, the command handling adapter instance for any of these gateways is returned (the choice being random if there are multiple instances). In the above example that is the instance #1 associated with gateway gw-1 (5).
Then the command gets forwarded to that gateway (6). It is the responsibility of the gateway to forward the command to the device 4711. After the gateway has acknowledged the command message, an “accepted” disposition will be sent back to the application (7).
Handling of the command response is done in the same way as shown in the chapter above for a gateway subscribing for a particular device and is therefore omitted here.
If a gateway has already subscribed for commands for all its device, it may still subscribe for commands for a particular device (and the other way around).
The particular device subscription has precedence then in choosing over which subscription protocol/channel to send the command to the gateway.
Please refer to the Device registry management API
for details.
The MongoDB based device registry now supports searching devices for a tenant with optional filters,
paging and sorting options.
Fixes & Enhancements
The MongoDB based device registry now checks for tenant existence during device registration and credentials management operations.
Deprecations
The configuration property singleTenant of the protocol adapters and the device registry is now deprecated
and planned to be removed in a future release. The use case of a system with just a single tenant should be
realized by configuring just one tenant in the device registry.
The HONO_REGISTRY_REST_* configuration properties of the file based device registry have been deprecated
in favor of corresponding properties with the HONO_REGISTRY_HTTP_ prefix.
1.3.1
Fixes & Enhancements
The file based as well as the Mongo DB based registry implementations now remove the shared-key from
PSK credentials returned in the response of the Management API’s get credentials operation.
The Device Registry Management API erroneously declared the plain text password conveyed in the
update credentials operation’s request payload as a Base64 encoded byte array instead of a
plain string. This has been fixed.
The file based as well as the Mongo DB based registry implementations had failed to do both
updating an existing secret (referred to by ID) and adding a new secret to the same credentials
in a single request. This has been fixed.
The property names for specifying the patterns for validating Tenant and Device IDs have been fixed
in the admin guides for the file based and the Mongo DB based registry implementations.
The Device Registry Management API’s /devices resource can be used to
register gateways and devices. The gateways that are authorized to act on behalf of a device can be set by means
of the device’s via and viaGroups properties. This is useful in cases where a device may roam among multiple gateways.
When sending commands to a device, Hono needs to determine which of the authorized gateways should be used to forward
the command message to the device. For this purpose, Hono’s protocol adapters keep track of the last known gateway
which has acted on behalf of each device by means of the Device Connection API.
Gateway Groups
In larger deployments with many gateways it can become cumbersome to list all possible gateways in the via property
of each device explicitly. This becomes even more of a burden when gateways are added and/or removed frequently.
To help with such situations it is possible to define groups of gateways using Hono’s Device Registry Management API.
A gateway group can be defined implicitly by means of adding the group’s identifier to the list in the memberOf
property of a (gateway) device that should belong to the group. The gateway group ID can then be added to the viaGroups
property of those devices that all gateways in the gateway group are authorized to act on behalf of.
Note that the Device Registration API, which is used by protocol adapters to verify if a gateway may act on behalf of a
device, has no notion of gateway groups. Thus, the response message of the Device Registration API’s
assert Device Registration operation does
not contain the IDs of gateway groups in its via property but instead contains the IDs of all (gateway) devices
that are a member of any of the authorized gateway groups.
Note
Hono’s example device registry does not support nested gateway groups.
Connecting via a Protocol Gateway
Hono already comes with a set of standard protocol adapters which support the most widely used (IP based) IoT protocols
The provisioning is, of course, a one-time action, on subsequent connections the APIs simply return the stored records.
This enables a Business application to limit the rate at which it consumes AMQP 1.0 messages per tenant.
For the other direction, when commands are sent from the application to the device, the rate is also limited per tenant.
Authorization at Tenant Level
Hono’s components authenticate each other by means of the Authentication API.
The returned token for a successful authentication contains authorization information that is addressing the AMQP 1.0
endpoints. Since the endpoints (as outlined above) are scoped to a tenant, this enables to configure tenants that are
Example: a tenant (defined by means of authorization configuration) that
is allowed to send telemetry data downstream
but is not allowed to send event data
This is done by not including the event endpoint in the authorization token for these tenants.
Business Applications and Tenants
The northbound Business applications are always connecting to the AMQP 1.0 endpoints of Hono.
By means of the authentication and authorization setup and the fact that the endpoints are scoped to a tenant, the
Business application is only acting in the context of one tenant.
Separation of Tenants
Tenants are separated from each other in all of Hono’s components.
Here is a summary of how this is implemented:
the registration of devices are strictly scoped to a tenant
the credentials of devices are strictly scoped to a tenant
protocol adapters can be enabled/disabled for a tenant
the downstream data flow is isolated for every tenant
the upstream data flow (Command & Control) is isolated for every tenant
Business applications need to authenticate to the AMQP 1.0 network and are by that mechanism scoped to their tenant
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
_
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
stars
103
forks
Star
Watch
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
consumer to deliver it to.
The HTTP Adapter also supports publishing telemetry messages using at least once delivery semantics. For information on how that works
and additional examples for interacting with Hono via HTTP, please refer to the
HTTP Adapter’s User Guide.
Publishing Events to the HTTP Adapter
In a similar way you can upload events:
HTTP/1.1 202 Accepted
Content-Length: 0
Again, you should see the event being logged to the console of the downstream application.
Publishing Telemetry Data to the MQTT Adapter
Devices can also publish data to Hono using the MQTT protocol. If you have installed the mosquitto_pub command line client, you
can run the following command to publish arbitrary telemetry data to Hono’s MQTT adapter using QoS 0:
Again, you should now see the telemetry message being logged to console of the downstream application.
The MQTT Adapter also supports publishing telemetry messages using QoS 1. For information on how that works
and additional examples for interacting with Hono via MQTT, please refer to the
MQTT Adapter’s User Guide.
Publishing Events to the MQTT Adapter
In a similar way you can upload events:
Again, you should now see the telemetry message being logged to console of the downstream application.
The registry implementations did not accept X.509 credentials in an update Credentials request.
They also failed to remove existing credentials of a device if they were not included in an
update Credentials request. This has been fixed.
The AMQP protocol adapter did accept messages from clients (devices) exceeding the adapter’s configured
max-message-size. This has been fixed and the adapter now closes the link to the device in this case.
API Changes
The default pattern for valid device identifiers used for the file based and the MongoDB based registry
implementations now also contains a colon (:) for compatibility with Eclipse Ditto.
1.3.0
New Features
The LoraWAN protocol adapter has been extended with support for the ChirpStack provider.
Hono’s integration tests can now be run with a Jaeger back end in order to collect tracing
information.
The AMQP 1.0 event message based Connection Event producer now sets a TTL on the event messages
it produces. The TTL is the max TTL configured at the tenant level.
like HTTP, MQTT and AMQP 1.0. Devices using one of these protocols might be able to directly connect to the corresponding
adapter as described in the previous section. However, even if the device supports MQTT it might still not be possible
to connect to the MQTT adapter because the device expects to use a topic structure that differs from the one employed
by the MQTT adapter. In other cases devices might use a proprietary, highly optimized, binary (IP based) protocol for
communication with back end infrastructure.
Hono supports connecting such devices to one of the standard protocol adapters by means of a protocol gateway.
A protocol gateway is a software service which translates hence and forth between the device’s proprietary protocol and
the protocol used by the Hono protocol adapter. This concept is very similar to the device gateway described above.
The main difference is that a protocol gateway is usually deployed in the back end (close to the protocol adapter) whereas
a device gateway is usually deployed close to the devices that are connected to the gateway using a mechanism that is
usually constrained to a local area.
The diagram below illustrates how two devices use a proprietary IP based protocol to connect to a protocol gateway in the
back end which in turn is connected to Hono’s standard AMQP 1.0 protocol adapter.
The devices publish data to the protocol gateway using the proprietary IP based protocol. The gateway then puts the
data into AMQP 1.0 messages and forwards them to the Hono AMQP adapter using the AMQP 1.0 protocol.
The requirements and prerequisites for this approach are the same as those for the standard device gateway scenario.
Hints for Production
To be flexible for the different needs of production setups, Hono tries to make as few assumptions about the combination
of the different APIs as possible.
This means e.g. that the Device Registry does not enforce referential integrity of the APIs:
devices can be created for a tenant that is not existing (yet)
credentials can be created for a tenant and/or a device that is not existing (yet)
tenants can be deleted and leave their scoped devices and credentials still in the configuration (which may not be usable
anymore, since the tenant is missing)
These are points that production setups may want to implement differently.
eclipse/hono - Gitter
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
master
17
branches
53
tags
Go to file
Code
Clone
HTTPS
GitHub CLI
Use Git or checkout with SVN using the web URL.
Work fast with our official CLI.
Learn more.
eclipse/hono - Gitter
eclipse/hono - Gitter
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
[#1960] Implementing status property for device registrations. by fkaltner · Pull Request #2189 · eclipse/hono · GitHub
Congratulations
You have successfully connected a device to Hono and published sensor data for consumption by an application connected to Hono’s north bound API.
The application used the AMQP 1.0 protocol to receive messages regardless of the transport protocol used by the device to publish the data.
What to try next?
Continue with the next sections to learn how applications can send commands to devices by means of the Command & Control API.
Take a look at some of the metrics collected by Hono’s components by opening the Hono dashboard. On the Sandbox server the dashboard is available at https://hono.eclipseprojects.io:3000. When running a local Minikube cluster, please refer to Opening the Dashboard for instructions.
Check out the User Guides to explore more options for devices to connect to Hono using different transport protocols.
Learn more about the managing tenants, devices and credentials using the Device Registry’s HTTP API.
Advanced: Sending Commands to a Device
The following example will guide you through an advanced feature of Hono. You will see how an application can send a command
to a device and receive a response with the result of processing the command on the device. The communication direction here is exactly the other way round than with telemetry and events.
The following assumes that the steps in the Prerequisites for the Getting started Guide
and Registering Devices sections above have been completed.
To simulate the device, you can use the Mosquitto tools again while the Hono Command Line Client simulates the application as before.
Receiving a Command
With the mosquitto_sub command you simulate an MQTT device that receives a command.
Create a subscription to the command topic in the terminal for the simulated device (don’t forget to set the environment variables MQTT_ADAPTER_IP, MY_TENANT and MY_DEVICE)
mosquitto_sub -v -h $MQTT_ADAPTER_IP -u $MY_DEVICE@$MY_TENANT -P $MY_PWD -t command/+/+/req/#
Now that the device is waiting to receive commands, the application can start sending them.
Start the Command Line Client in the terminal for the application side (don’t forget to set the environment variables AMQP_NETWORK_IP, MY_TENANT and MY_DEVICE)
# in directory where the hono-cli-*-exec.jar file has been downloaded to
java -jar hono-cli-*-exec.jar --hono.client.host=$AMQP_NETWORK_IP --hono.client.port=15672 --hono.client.username=consumer@HONO --hono.client.password=verysecret --tenant.id=$MY_TENANT --device.id=$MY_DEVICE --spring.profiles.active=command
Note that this time the profile is command instead of receiver, which enables a different mode of the Command Line Client.
A new Device Registry implementation based on MongoDB database is now available in Hono.
Please refer to the MongoDB Device Registry User Guide
for additional information.
Hono protocol adapters can now be configured to use address rewriting when opening AMQP 1.0 links to the messaging network.
This allows an easier deployment in multi-tenant messaging environments.
Please refer to the Hono Client Configuration Guide
for additional information.
Fixes & Enhancements
An admin guide for the CoAP adapter has been added.
The Prometheus based resource limits checker now supports configuring a query timeout.
Please refer to Resource Limits Checker Configuration
for additional information.
When sending a command message to a device, the AMQP adapter now waits for a
configurable period of time (default is 1 second) for the acknowledgement from the device.
If none is received, the downstream command sender gets back a released outcome.
Please refer to the sendMessageToDeviceTimeout property description in the
AMQP Adapter admin guide for additional information.
The client for storing device connection information to a data grid now supports configuring
the name of the cache to store the data in.
When the connection to a device is closed or lost, a protocol adapter instance will now
stop listening for commands targeted at the device.
The AMQP adapter before accepting any connections checks if the connection limit is exceeded
or not and if the adapter is enabled or not. These checks are currently done inside the
AmqpAdapterSaslAuthenticatorFactory. Thereby, if any of these checks failed, the AMQP adapter
reported authentication failure instead of the actual reason. This has been fixed now.
Authentication and authorization of gateways works in the same way.
Generic MQTT Protocol Gateway Template
The repository hono-extras contains a generic template for an MQTT protocol gateway.
This template allows you to develop a production-ready protocol gateway with minimal effort, with which you can connect
existing MQTT-enabled devices to Hono.
For example, you can use other topic names or structures, or you can transform, enrich, compress, or encrypt the payload.
Example Code
Hono’s examples module contains code for
a simple protocol gateway illustrating how devices using a binary TCP based protocol can be connected to Hono’s AMQP adapter.
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Open with GitHub Desktop
Download ZIP
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back
Launching Xcode
If nothing happens, download Xcode and try again.
Go back
Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back
Latest commit
Git stats
4,455
commits
Files
Permalink
Failed to load latest commit information.
Type
Name
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
_
Sign in to start talking
Issues · eclipse/hono · GitHub
Issues · eclipse/hono · GitHub
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
The client will prompt you to enter the command’s name, the payload to send and the payload’s content type.
The example below illustrates how a one-way command to set the volume with a JSON payload is sent to the device.
>>>>>>>>> Enter name of command for device [<DeviceId>] in tenant [<TenantId>] (prefix with 'ow:' to send one-way command):
ow:setVolume
>>>>>>>>> Enter command payload:
{"level": 50}
>>>>>>>>> Enter content type:
application/json
INFO org.eclipse.hono.cli.app.Commander - Command sent to device
In the terminal for the simulated device you should see the received command as follows
Sending a Response to a Command
Now that you have sent a one-way command to the device, you may get to know request/response commands where the device sends a response to the application.
A request/response command received from an application contains an identifier that is unique to each new command.
The device must include this identifier in its response so that the application can correctly correlate the response with the request.
If you send a request/response command like this
>>>>>>>>> Enter name of command for device [<DeviceId>] in tenant [<TenantId>] (prefix with 'ow:' to send one-way command):
setBrightness
>>>>>>>>> Enter command payload:
{"brightness": 87}
>>>>>>>>> Enter content type:
application/json
INFO org.eclipse.hono.cli.app.Commander - Command sent to device... [waiting for response for max. 60 seconds]
The AMQP adapter did not consider the HONO_CONNECTIONEVENTS_PRODUCER configuration variable
to set a Connection Event producer. This has been fixed.
The logging Connection Event producer now supports configuring the level
at which information should be logged. The producer type none has been added to explicitly
turn off connection event reporting altogether.
Please refer to the Common Configuration admin guide for details.
The packages org.eclipse.hono.service.credentials, org.eclipse.hono.service.management,
org.eclipse.hono.service.management.credentials, org.eclipse.hono.service.management.device,
org.eclipse.hono.service.management.tenant, org.eclipse.hono.service.registration and
org.eclipse.hono.service.tenant have been moved from the service-base to the
device-registry-base module.
The Device Connection service did return a 500 error code if no last known gateway could
be found for a device ID. This has been fixed so that the service now returns a 404 in that
case as specified by the Device Connection API.
The cache based Device Connection service implementation now applies a lifespan of 28 days
when setting/updating cache entries containing last known gateway information. This means
no global expiration configuration is needed anymore for the cache.
Protocol adapters failed to re-establish receiver links for commands to be routed after loss
of connection to the AMQP Messaging Network. This has been fixed.
The AMQP adapter reported an incorrect number of connections if resource limits had been
defined and exceeded. This has been fixed.
The device registry management HTTP endpoints now reject requests to register or update objects
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
Latest commit message
Commit time
.github/workflows
adapters
bom
cli
client-device-connection-infinispan
client
clients
core
demo-certs
deploy
eclipse
examples
jenkins
jmeter
legal
logo
service-base-quarkus
service-base
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
the application will wait up to 60 seconds for the device’s response.
In the terminal for the simulated device you should see the received command that looks like this
The element between req and setBrightness is the request identifier that must be included in the response.
You can cancel the command mosquitto_sub in the terminal of the device (press the key combination Ctrl + C) to reuse the
configuration with the environment variables for sending the response.
The following example shows how an answer can be sent with MQTT. Note that the actual identifier from the received command must be used.
export REQ_ID=10117f669c12-09ef-416d-88c1-1787f894856d
The 200 at the end of the topic is an HTTP status code that reports the result of processing the command to the application.
If the Command Line Client has successfully received the response in time, it will print it to the console. This looks like this:
If the 60 seconds have already expired, an error message is logged.
In this case you can send a new command or restart the Command Line Client with a higher timeout (append --command.timeoutInSeconds=120).
Congratulations. Now you have successfully sent commands to a device and responded to them.
For more information on Command & Control refer to Commands using HTTP
and Commands using MQTT.
The Command and Control Concepts page contains sequence diagrams that
explain this in more detail.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
containing unknown properties. In the past such properties had been simply ignored.
The Device Registry Management API has been amended with example messages and more thorough
description of operations.
The CoAP adapter has been enhanced to asynchronously look up a device’s PSK during the
DTLS handshake. This will allow the adapter to handle a lot more handshakes concurrently.
The adapter also employs a more efficient message de-duplicator which reduces the adapter’s
memory footprint.
API Changes
The getRemoteContainer method in org.eclipse.hono.client.HonoConnection has been
renamed to getRemoteContainerId.
The getName method in org.eclipse.hono.connection.ConnectionFactory has been removed
and an additional connect method has been added.
The set command-handling protocol adapter instance operation of the Device Connection API
has been extended to support an additional parameter which can be used to indicate the
maximum amount of time that the given information is to be considered valid.
The hono-core module no longer embeds any external classes by default.
This includes the OpenTracing API and Spring Crypto classes. You can still
embed the classes, as in Hono versions 1.2.x and before, by enabling the
Maven profile embed-dependencies (e.g using the command line switch
-Pembed-dependencies). By default this profile is not active.
The org.eclipse.hono.client.DeviceRegistration interface’s get methods have been removed
because the Device Registration API does not define a corresponding operation.
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
@/all Everybody, please join me in welcoming Kartheeswaran Kalidass as a new committer on the Eclipse Hono project! Well deserved, @kaniyan :-)
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Florian Kaltner
@fkaltner
@ctron Can you take a look at eclipse/hono#2189 again?
Karthees Kalidass
@kaniyan
@sophokles73 +1 from my side
Kai Hudalla
@sophokles73
How do I use client certificates for authentication against Hono? - Stack Overflow
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
@sophokles73 +1 from my side
Kai Hudalla
@sophokles73
ok, I have disabled the Travis build on master and the 1.4.x branch ...
Kai Hudalla
@sophokles73
@/all Everybody, please join me in welcoming Kartheeswaran Kalidass as a new committer on the Eclipse Hono project! Well deserved, @kaniyan :-)
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
ok, I have disabled the Travis build on master and the 1.4.x branch ...
Kai Hudalla
@sophokles73
@/all Everybody, please join me in welcoming Kartheeswaran Kalidass as a new committer on the Eclipse Hono project! Well deserved, @kaniyan :-)
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
services
site
test-utils
tests
.gitignore
CODEOWNERS
CONTRIBUTING.md
DEPENDENCIES
LICENSE
NOTICE
pom.xml
push_hono_images.sh
readme.md
View code
readme.md
Eclipse Hono provides uniform (remote) service interfaces for connecting large numbers of IoT devices to a (cloud) back end. It specifically supports scalable and secure data ingestion (telemetry data) as well as command & control type message exchange patterns and provides interfaces for provisioning & managing device identity and access control rules.
Getting started
Please refer to the Getting Started guide on the project web site.
Running Hono
Eclipse Hono consists of multiple micro service components. Please refer to the Admin Guide and User Guide sections on the project web site for details on how to configure and use these components.
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Jens Reimann
@ctron
big +1!
Florian Kaltner
@fkaltner
@ctron Can you take a look at eclipse/hono#2189 again?
Karthees Kalidass
@kaniyan
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
method has been removed.
Protocol adapters implementing the org.eclipse.hono.service.AbstractAdapterConfig class
now need to implement the getAdapterName method. The customizeDownstreamSenderFactoryConfig
method has been renamed to getDownstreamSenderFactoryConfigDefaults, while now returning
properties instead of working on given ones. The new method name now more accurately conveys
what the method is used for. The same change has been applied to the other customize[*]Config
methods in the AbstractAdapterConfig class.
The file based as well as the MongoDB based device registry implementations now disallow certain
special characters in device and tenant identifiers. The configuration properties
HONO_REGISTRY_HTTP_TENANT_ID_PATTERN and HONO_REGISTRY_HTTP_DEVICE_ID_PATTERN (and corresponding ones with
prefix HONO_REGISTRY_REST for the file based registry) can be used to override the patterns for matching
valid identifiers. Please refer to the
file based registry or
MongoDB based registry
configuration guide for details.
Deprecations
The configuration property HONO_MQTT_COMMAND_ACK_TIMEOUT of the MQTT adapter is now deprecated
and planned to be removed in a future release. Use HONO_MQTT_SEND_MESSAGE_TO_DEVICE_TIMEOUT instead.
1.2.4
Fixes & Enhancements
The HonoConnection implementation didn’t use a delay before a reconnect attempt after
a certain number of reconnect attempts (58 with the default configuration) had already
failed. This has been fixed.
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
Sign in to start talking
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
ok, I have disabled the Travis build on master and the 1.4.x branch ...
Kai Hudalla
@sophokles73
@/all Everybody, please join me in welcoming Kartheeswaran Kalidass as a new committer on the Eclipse Hono project! Well deserved, @kaniyan :-)
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Stack Overflow
About
Products
For Teams
Stack Overflow
Public questions & answers
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Jobs
Programming & related technical career opportunities
Talent
Recruit tech talent & build your employer brand
Advertising
Reach developers & technologists worldwide
About the company
Loading…
Log in
Sign up
current community
Stack Overflow
help
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Using Hono
Please take a look at the Developer Guide which provides examples of how clients can interact with Hono and how to create a custom protocol adapter.
Remote API
Clients can interact with Hono by means of AMQP 1.0 based message exchanges. Please refer to the corresponding API documentation pages for details:
Get in Touch
Please check out the Eclipse Hono project home page for details regarding our mailing list and #IRC channel.
Build status
About
Eclipse Hono™ Project
www.eclipse.org/hono
Topics
eclipseiot
internet-of-things
messaging
Resources
Readme
License
EPL-2.0 License
Releases
53
Eclipse Hono 1.0.1
Latest
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
@sophokles73 +1 from my side
Kai Hudalla
@sophokles73
ok, I have disabled the Travis build on master and the 1.4.x branch ...
Kai Hudalla
@sophokles73
@/all Everybody, please join me in welcoming Kartheeswaran Kalidass as a new committer on the Eclipse Hono project! Well deserved, @kaniyan :-)
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
97
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
An error when freeing Command & Control related resources of an idle tenant has been fixed.
The Hotrod based DeviceConnectionClientFactory has been improved to prevent locking of
objects in a clustered cache.
The AMQP adapter reported an incorrect number of connections if resource limits had been
defined and exceeded. This has been fixed.
1.2.3
Fixes & Enhancements
The Device Connection service did return a 500 error code if no last known gateway could
be found for a device ID. This has been fixed so that the service now returns a 404
in that case as specified by the Device Connection API.
The cache based Device Connection service implementation now applies a lifespan of 28 days
when setting/updating cache entries containing last known gateway information. This means
no global expiration configuration is needed anymore for the cache.
Protocol adapters failed to re-establish receiver links for commands to be routed after loss
of connection to the AMQP Messaging Network. This has been fixed.
API Changes
The org.eclipse.hono.client.DeviceRegistration interface’s get methods have been removed
because the Device Registration API does not define a corresponding operation.
method has been removed.
1.2.2
Fixes & Enhancements
Commands might not have been routed to the target device or gateway if multiple
Verticle instances were deployed in a protocol adapter instance. This has been fixed.
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
By using our site, you acknowledge that you have read and understand our Cookie Policy, Privacy Policy, and our Terms of Service.
Home
Public
Stack Overflow
Tags
Users
Find a Job
Jobs
Companies
Teams
What’s this?
Free 30 Day Trial
Teams
Q&A for Work
Stack Overflow for Teams is a private, secure spot for you and
your coworkers to find and share information.
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
Nov 7, 2019
+ 52 releases
Packages 12
+ 9 packages
Contributors 37
+ 26 contributors
Languages
Java
97.5%
CSS
1.1%
Shell
0.6%
Groovy
0.5%
HTML
0.2%
JavaScript
0.1%
© 2020 GitHub, Inc.
Terms
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Labels
39
Milestones
1
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Labels
39
Milestones
1
Labels
39
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
[#1960] Implementing status property for device registrations.
#2189
Merged
sophokles73
merged 4 commits into
eclipse:master
from
bosch-io:#1960_status_in_device_registration
Oct 27, 2020
The example registry’s admin guide has been amended with some missing configuration
variables.
has been updated to reflect recent changes.
Some dependencies have been updated to more recent versions fixing potential
vulnerabilities.
1.2.1
Fixes & Enhancements
The AMQP adapter didn’t report any metrics anymore. This has been fixed.
The CoAP and HTTP adapters’ user guide now correctly documents the 413 status code returned
in response to a request that contains a payload exceeding the configured maximum size.
1.2.0
New Features
The protocol adapters can now be configured with a direct connection to a data grid
for storing device connection information.
This has the advantage of saving the network hop to the Device Connection service.
Please refer to the protocol adapter Admin Guides for details.
The Prometheus based resource limits check can now be configured with a trust store, key material
and/or a username and password in order to be able to connect to a Prometheus server
that requires TLS and/or client authentication.
A Java client for the communication with the AMQP protocol adapter has been added.
It can be used to implement devices, (protocol) gateways and for testing purposes.
For more information refer to AMQP Adapter Client for Java.
Devices can now be configured with groups of gateways that are allowed to act on behalf of the
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
_
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
_
Kai Hudalla
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
_
Abel Büchner-Mihaljević
@b-abel
Learn more
How do I use client certificates for authentication against Hono?
Ask Question
Asked
1 year, 1 month ago
Active
1 year, 1 month ago
Viewed
83 times
0
Where do I best start if I want to use authentication with client certificates in Hono? In the User Guide is a short description but a this does not show all required steps in one place.
eclipse-hono
share
|
follow
|
asked Sep 27 '19 at 10:35
b-abelb-abel
8322 silver badges66 bronze badges
add a comment
|
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
_
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
_
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
_
Florian Kaltner
@fkaltner
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
_
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Labels
39
Milestones
1
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Clear current search query, filters, and sorts
6 Open
38 Closed
6 Open
38 Closed
Author
Filter by author
Label
Milestones
1
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
97 Open
879 Closed
97 Open
879 Closed
Author
Filter by author
Label
Filter by label
Use alt + click/return to exclude labels.
Merged
[#1960] Implementing status property for device registrations.
#2189
sophokles73
merged 4 commits into
eclipse:master
from
bosch-io:#1960_status_in_device_registration
Oct 27, 2020
Conversation
60
Commits
4
Checks
3
Files changed
Conversation
Copy link
Quote reply
Contributor
fkaltner
commented
Sep 17, 2020
device. This makes it easier to support scenarios in which a device may roam between multiple
gateways. The HTTP based management API has been adapted accordingly.
The CoAP adapter now supports forwarding commands to devices in the response body of requests for
uploading telemetry data and/or events, analogous to the HTTP adapter.
Please note that the CoAP adapter is still considered experimental and its device facing API
is therefore still subject to change.
Fixes & Enhancements
When a message arrived, the message limit checks failed to calculate the payload size
of the incoming message based on the configured minimum message size. Instead, it used the
actual payload size to verify if the message limit has been exceeded or not. This has been
fixed now.
The Command & Control implementation in the protocol adapters has been optimized to use
far fewer consumer links to the AMQP Messaging Network, saving up on resources.
Before this change, the protocol adapters created a separate receiver link for each device that wanted
to receive commands. Now each protocol adapter instance creates only a single receiver link over
which all commands for all devices connected to the adapter instance are transmitted.
The base classes for implementing a device registry have been moved into their own device-registry-based
module.
The example device registry’s AMQP and HTTP endpoints do no longer exchange incoming request messages and outgoing
response messages with the service implementation verticles over the Vert.x EventBus. This reduces complexity
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
1 Answer
1
Active
Oldest
Votes
1
Make sure that you are able to connect to the respective protocol adapter with TLS
(see the Admin Guide for configuration). Here is an article, that
provides a complete walk-through guide for all required steps.
Additionally you can use and adapt the script for the creation of demo certificates in the Hono repository. More information can be found in the user guide of the protocol adapters (MQTT, HTTP).
share
|
follow
|
answered Sep 27 '19 at 10:49
kaniyankaniyan
73944 silver badges77 bronze badges
add a comment
|
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
Filter by label
Use alt + click/return to exclude labels.
Projects
Filter by project
Milestones
Filter by milestone
Assignee
Filter by who’s assigned
Sort
Sort by
Newest
Oldest
Most commented
Least commented
Recently updated
Least recently updated
Most reactions
👍
👎
😄
🎉
Projects
Filter by project
Milestones
Filter by milestone
Assignee
Filter by who’s assigned
Sort
Sort by
Newest
Oldest
Most commented
Least commented
Recently updated
Least recently updated
Most reactions
👍
👎
😄
🎉
😕
❤️
🚀
The idea was to separate the Device class into two: one with a status property and one without (this emerged from a discussion with @kaniyan and personally I think this simplifies a lot of things and I do like the idea 😃).
Because of that separation it is easier to make sure that a user is actually not able to change the status (which is in fact system internal as far as I understood)
In order to make as much logic as possible generic I also refactored the Device and the MongoDb based registry so that they both use DTOs and introduced a new BaseDTO class. By this we can separate internal and user-editable state. Also, I hope this fits the JDBC based registry (given I understood the code in the current PRs correctly): it is still a JSON based object as the Device class itself.
The generic wildcard in DeviceManagementService / AbstractDeviceManagementService was intended to allow merging this first without having to implement this in the JDBC registry (or in general: to allow implementations without a status property...)
The BaseDTO should also allow for adding corresponding TenantWithStatus and CredentialsWithStatus implementations. Since status implementations will differ (at least we need the two status properties auto-provisioned and auto-provisioning-notification-sent for #2053 which do not make sense for tenants or credentials) I think it is easier to have concrete subclasses for that.
Let me know what you think!
fkaltner
requested a review
from dejanb
as a
code owner
Sep 17, 2020
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
2 times, most recently
from
926511c
to
024ad73
Sep 18, 2020
dejanb
and should improve throughput as messages no longer need to be serialized anymore.
A first version of the CoAP User Guide has been added.
A concept page explaining the different ways devices can be connected to Hono’s protocol adapters has been
added. There is also example code illustrating how a protocol gateway which connects to the AMQP adapter can
be implemented.
API Changes
The device registry credentials endpoint will no longer hand out sensitive details for hashed-password secrets.
Each secret is given an ID which is now returned, along with the other metadata (time validity and optional fields).
The tenant and devices endpoints of the management HTTP API now accept creation requests without a body.
As there is no mandatory field, having a mandatory body was confusing.
The methods of the service base classes CredentialsManagementService, CredentialsService,
DeviceConnectionService, DeviceManagementService, RegistrationService, TenantManagementService and
TenantService have been refactored to now return a Vert.x Future instead of taking a Handler as an argument.
The CommandConsumerFactory interface has been renamed to ProtocolAdapterCommandConsumerFactory and method
signatures have been changed slightly. Also, a new initialize method has been added to be called on protocol
adapter startup.
The AMQP Messaging Network now has to be configured in such a way that protocol adapters can send and
receive messages on the command_internal/* instead of the control/* address pattern.
The Device Registry Management API has been extended to support the definition of Gateway Groups which
can be referenced in a device’s viaGroups property in order to authorize all gateways that are a member
of any of the groups to act on behalf of the device.
1.1.2
API Changes
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Facebook
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy
Not the answer you're looking for? Browse other questions tagged eclipse-hono or ask your own question.
The Overflow Blog
Podcast 288: Tim Berners-Lee wants to put you in a pod. A web pod.
The macro problem with microservices
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
😕
❤️
🚀
👀
Management API: Search tenants with optional filters, paging and sorting options
Device Registry
Feature Request
JDBC Device Registry
Management API
MongoDB Device Registry
help wanted
#2239
opened Oct 8, 2020 by
kaniyan
2
Message mapping API does not return a failed future
help wanted
#2133
opened Aug 26, 2020 by
Alfusainey
23
Support authentication of devices using X.509 certificates in the CoAP adapter
CoAP Adapter
Feature Request
👀
Hono Github home page doesn't show the correct latest release
#2316
opened Nov 23, 2020 by
kaniyan
Remove Hono Load Tests module (JMeter plugin)
#2314
opened Nov 23, 2020 by
calohmn
Implement search devices operation in the JDBC based device registry
JDBC Device Registry
#2311
opened Nov 20, 2020 by
kaniyan
JDBC based device registry does not support client context matching
JDBC Device Registry
#2310
opened Nov 20, 2020 by
kaniyan
Device Registry Management API status object uses kebab-case property
Management API
reviewed
Sep 24, 2020
View changes
Copy link
Quote reply
Contributor
dejanb
left a comment
Looks good in general. I would just wait for #2159 before merging this, to minimize conflicts.
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Outdated
Show resolved
Hide resolved
...a/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java
Show resolved
Hide resolved
Copy link
Contributor
Author
fkaltner
commented
The org.eclipse.hono.client.DeviceRegistration interface’s get methods have been removed
because the Device Registration API does not define a corresponding operation.
method has been removed.
1.1.1
Fixes & Enhancements
The FireFly LoRa adapter now supports mapping of the mic property.
A bug preventing the lora and SigFox adapters to start up correctly has been fixed.
The MQTT adapter failed to accept command response messages from authenticated gateways that had
and the adapter now correctly uses the gateway’s tenant in this case.
When a north bound application sent a command to a device that is connected via a gateway, the
AMQP adapter set the gateway’s ID instead of the device’s ID in the command response forwarded
to the application. This has been fixed.
1.1.0
New Features
The Sigfox and LoRaWAN adapters now report metrics analogously to the other protocol
adapters.
With the release of Eclipse Californium 2.0.0,
the CoAP adapter became an official part of the Hono release. The adapter also supports
tracking of request processing using OpenTracing but is still considered experimental.
A lorawan provider has been added for the loriot network provider.
Hono’s protocol adapters now support Server Name Indication in order
to allow devices to establish a TLS connection with adapters using a tenant specific
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
Featured on Meta
A big thank you, Tim Post
“Question closed” notifications experiment results and graduation
Related
0
Eclipse-hono MQTT adapter: cannot process message
1
Subscribe to all tenants using a wildcard in Eclipse-hono
0
Sending Command to device in Eclipse hono
0
Eclipse Hono MQTT adapter: MQTT topic mapping
0
Ports mapping after Hono deployment
0
Gateways in Hono
Hot Network Questions
Why user-assembled kits?
Why did decimal arithmetic slow down VisiCalc?
Word for money given before a job is started
Why does this review of Star Trek IV include an image of Link from Legend of Zelda?
Omitting acute accent on a display with limited character set
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
help wanted
#2099
opened Aug 4, 2020 by
mostafa-eltaher
8
AMQP/MQTT: Gateways may subscribe for commands to disabled devices
C&C
help wanted
#1764
opened Feb 12, 2020 by
calohmn
3
HTTP adapter should support Bearer token authentication scheme
HTTP Adapter
enhancement
help wanted
#901
opened Nov 16, 2018 by
sophokles73
9
Device lifecycle tracking and events
enhancement
help wanted
#2309
opened Nov 20, 2020 by
sophokles73
1.5.0
Add kustomize based deployment
Deployment
question
#2305
opened Nov 17, 2020 by
garyedwards
6
Add integration tests for auto-provisioning status properties
Device Registry
JDBC Device Registry
MongoDB Device Registry
#2301
opened Nov 17, 2020 by
fkaltner
1.5.0
1
(Add option to) forward command & control message to all available gateways
C&C
enhancement
#2295
Sep 24, 2020
Looks good in general. I would just wait for #2159 before merging this, to minimize conflicts.
I made a generic type parameter less restrictive (see: e009fd4) and created a draft PR for checking compatibility with #2159 (see: #2206).
The only adaption required was a signature change in DeviceManagementServiceImpl(see e9966bf).
So I think there should be no conflict.
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
from
ea8cbe3
to
9307d19
Sep 25, 2020
Copy link
Contributor
Author
fkaltner
commented
Sep 25, 2020
Rebased on master to resolve conflicts.
Copy link
Contributor
server certificate and host name. Please refer to the Secure Communication admin
guide for details.
Hono now supports auto-provisioning of devices that authenticate with X.509 client certificates.
For more information please refer to the Device Provisioning
concept and for details to the Tenant API
and the Credentials API.
The Hono Auth Server and Device Registry components now support configuring the SASL
mechanisms advertised to a client connecting to these components. This can be used to
restrict the support to only one of the SASL PLAIN and EXTERNAL mechanisms instead of both.
A new metric namely hono.connections.authenticated.duration has been introduced to track the
connection duration of the authenticated devices. Please refer to the
Metrics API for more details.
The protocol adapters that maintain connection state can now be configured to verify the connection
duration limit for each tenant before accepting any new connection request from the devices. Please
refer to the resource-limits
section for more details.
Hono’s example device registry now supports configuring a time out for processing requests from clients.
This is configured using the property sendTimeOutInMs in org.eclipse.hono.config.ServiceConfigProperties.
Hono’s Helm chart is now available from the
Eclipse IoT Packages chart repository.
All future development of the chart will be done in the IoT Packages project only.
The deployment guide has been adapted accordingly.
Fixes & Enhancements
Hono’s Helm chart now supports configuring resource requests and limits of the container images.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
"Render mathematics" is inactive in Inkscape
What is the significance of barley as opposed to wheat in Ancient Rome?
Fibonacci sequence output
Using water as a high density storable hydro-lox propellant
How to make old bikes seatpost slide smoothly when needs adjustment again?
It may not be in my best interest to ask a professor I have done research with for recommendation letters. Can this seem suspicious in my application?
Feeding a flumph
We know a human cannot run on water, but could a much stronger and faster animal?
What does it mean to do a recount *after* a US state has certified its election results?
Removal of the 5th in extended chord voicings
Are pictures taken from ISS geolocalized?
What is 22 equal temperament?
Do you add your ability mod to damage for the Soulknife's second attack?
Didn't understand joke about No Child Left Behind
Main differences of Karate & Taekwondo
How to write formally about skipping one year of highschool on CV
How do I prevent myself from freezing up during a game I'm DMing?
Why was/is Wayne County Michigan so consistent in support for Democratic presidential candidates?
Exact definition of average time complexity?
more hot questions
Question feed
Subscribe to RSS
Question feed
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Sign in to start talking
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
Sign in to start talking
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
#120
opened Mar 15, 2017 by
bergie
3
ProTip!
Adding no:label will show everything without a label.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
opened Nov 12, 2020 by
calohmn
HTTP Adapter forwards wrong QoS default level as application property when sending events
HTTP Adapter
#2288
opened Nov 10, 2020 by
fkaltner
5
[#8] Authentication and authorisation of Kafka clients used in Hono
#2282
opened Nov 4, 2020 by
kaniyan
4
Explanation of Connection Event is unclear
#2279
opened Nov 3, 2020 by
b-abel
Support using Kafka for Command & Control messages
C&C
enhancement
#2273
opened Oct 28, 2020 by
calohmn
Author
fkaltner
commented
Sep 28, 2020
FYI: I just did some testing and found a bug regarding in the MongoDb based device registry. Will fix this...
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
4 times, most recently
from
337c319
to
1ce0f3d
Sep 29, 2020
fkaltner
mentioned this pull request
Sep 30, 2020
Add JDBC device registry
#2159
The MQTT adapter now includes a device’s MQTT client ID in its request to retrieve the device’s
credentials. This additional information can be used by device registry implementations when determining
the device identity.
The domain name of the Hono Sandbox has been changed to
hono.eclipseprojects.io.
It will still be available at the old domain name for some time as well, though.
Hono’s OpenTracing instrumentation has been upgraded to Opentracing 0.33.0.
The example deployment now uses the Jaeger Java client in version 0.35.2 and the
Jaeger 1.16 agent and back end components.
Some of the environment variable names documented in the user guides which can be used for configuring
Hono components had not been recognized during start up of the components.
In particular, the names for configuring the connection to the Device Connection service
and for configuring a heath check server have been fixed.
The AMQP adapter now correctly accepts command response messages from devices that do not
contain any payload. Such responses are useful to only convey a status code in reply to
a command.
API Changes
The already deprecated endpoints with the control prefix have been removed. The northbound and southbound
Command & Control endpoints can now only be used with the command and command_response prefixes
(or the respective shorthand version). Note that the AMQP Messaging Network still needs to be
configured in such a way that protocol adapters can send and receive messages on the control/*
address pattern. This is now used for internal communication between protocol adapters only.
The create method in org.eclipse.hono.client.HonoConnection now requires its Vertx parameter to be not null.
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Sign in to start talking
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Sign in to start talking
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Sign in to start talking
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
Stack Overflow
Questions
Jobs
Developer Jobs Directory
Salary Calculator
Help
Mobile
Products
Teams
Talent
Advertising
Enterprise
Company
About
Press
Work Here
Legal
Privacy Policy
Contact Us
Stack Exchange Network
Technology
Life / Arts
Culture / Recreation
Science
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
Sign in to start talking
Travis CI - Test and Deploy Your Code with Confidence
Hey there!
Looks like you have JavaScript disabled.
The Travis CI webclient needs JavaScript to work properly.
Please enable JavaScript to get the best Travis CI experience.
Thank you!
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Sign in to start talking
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
19
Auto-Provisioning of Gateways
#2272
opened Oct 27, 2020 by
alinaserg
17
Add AMQP 1.0 based implementation of Hono client for protocol adapters
Client
#2267
opened Oct 27, 2020 by
sophokles73
1.5.0
Include Jaeger client in published Hono images
Tracing
suitable for new contributors
#2250
opened Oct 13, 2020 by
calohmn
1.5.0
2
Don't propagate ClientErrorExceptions on telemetry sender creation to device
Merged
dejanb
approved these changes
Oct 1, 2020
View changes
Copy link
Contributor
dejanb
commented
Oct 1, 2020
@fkaltner Can you squash these commits?
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
2 times, most recently
from
fa4babf
to
aedbda1
Oct 5, 2020
Copy link
Contributor
1.0.4
API Changes
The org.eclipse.hono.client.DeviceRegistration interface’s get methods have been removed
because the Device Registration API does not define a corresponding operation.
method has been removed.
1.0.3
Fixes & Enhancements
Hono’s Helm Chart now correctly configures Prometheus based resource limit checks if
a Prometheus server is being used for collecting metrics.
Some OpenTracing spans used for tracking processing of messages haven’t properly been finished.
This has been fixed.
Protocol adapters are now able to process messages while still trying to re-establish connections
to other services after a connection loss. This might result in fewer messages being rejected
in such situations.
1.0.2
Fixes & Enhancements
The example deployment now also works with Kubernetes 1.16 using Helm 2.15 and later.
The Hono chart can now also be deployed using the recently released Helm 3. In fact,
Helm 3 is now the recommended way for deploying Hono as it doesn’t require installation
of any Helm specific components to the Kubernetes cluster.
The example data grid which can be deployed using the Hono Helm chart can now be scaled
out to more than one node.
Under rare circumstances an HTTP adapter instance might have gotten into a state where
a device’s requests to receive commands could no longer be processed successfully
Hono CI Pipeline [Jenkins]Skip to contentJenkinslog inJenkinsHono CI PipelineENABLE AUTO REFRESH Back to Dashboard Status Changes Full Stage View Maven Embeddable Build Status Git Polling LogtrendWDescription%Test Result: 0 tests failing out of a total of 2,303 tests.100Build stability: No recent builds failed.100Build Historyx#2047Nov 6, 2020 4:44 AM
Other
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Software Engineering
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
ExpressionEngine® Answers
Stack Overflow em Português
#2247
opened Oct 12, 2020 by
calohmn
Management API: Search tenants with optional filters, paging and sorting options
Device Registry
Feature Request
JDBC Device Registry
Management API
MongoDB Device Registry
help wanted
#2239
opened Oct 8, 2020 by
kaniyan
2
Support service configuration for local development
#2232
opened Oct 7, 2020 by
b-abel
Provide metrics for message credits
#2226
opened Oct 1, 2020 by
fkaltner
Feature Request: Device Connection Rate Limiting
Author
fkaltner
commented
Oct 5, 2020
When testing manually I found out that there was still a bug which wasn't spotted by our automated tests: my changes in itself were consistent, but when deployed upon data created with a version before my changes there was an incompatibility due to a missing annotation on TenantDto.
This is fixed now. In the process I also made all DTOs immutable.
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
from
aedbda1
to
225bffa
Oct 6, 2020
fkaltner
mentioned this pull request
Oct 6, 2020
[#2053] Implementing auto provisioning of devices for gateways
#2094
Open
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
anymore until the adapter instance had been restarted. This has been fixed.
A potential issue has been identified where some command messages might not get sent to
the corresponding gateway. The scenario here involves the gateway sending event/telemetry
messages via HTTP with a hono-ttd header in order to receive commands, and doing so
with multiple concurrent requests for different devices. To resolve this issue, the
corresponding tenant can be configured with a support-concurrent-gateway-device-command-requests
option set to true in the ext field of an adapters entry of type hono-http.
Note that with this option it is not supported for the authenticated gateway to send
one message with a hono-ttd header and no device id to receive commands for any
device that has last sent a telemetry or event message via this gateway.
1.0.1
Fixes & Enhancements
The AMQP protocol adapter now requests devices to send traffic periodically in order
to prevent a time out of the connection. This way the adapter is able to detect and
close stale connections which is important to reliably close the device’s corresponding
command consumer. The time period after which the adapter should consider a connection stale
can be configured using an environment variable. Please refer to the AMQP adapter’s
admin guide for details.
The example deployment using the Helm chart correctly creates the DEFAULT_TENANT again.
1.0.0
#2046Nov 6, 2020 4:07 AM
#2045Nov 5, 2020 11:20 AM
#2044Nov 5, 2020 10:29 AM
#2043Nov 5, 2020 8:06 AM
#2042Nov 5, 2020 3:51 AM
#2041Nov 4, 2020 9:18 AM
#2040Nov 4, 2020 5:41 AM
#2039Nov 3, 2020 8:21 AM
#2038Nov 3, 2020 7:42 AM
#2037Nov 3, 2020 4:37 AM
#2036Nov 2, 2020 11:46 AM
#2035Nov 2, 2020 6:25 AM
#2034Oct 30, 2020 11:55 AM
#2033Oct 30, 2020 6:19 AM
#2032Oct 30, 2020 6:03 AM
#2031Oct 30, 2020 4:55 AM
#2030Oct 29, 2020 8:17 AM
#2029Oct 29, 2020 5:06 AM
#2028Oct 27, 2020 2:06 PM
#2027Oct 27, 2020 11:07 AM
#2026Oct 27, 2020 10:45 AM
#2025Oct 27, 2020 4:55 AM
#2024Oct 27, 2020 4:27 AM
#2023Oct 27, 2020 4:19 AM
#2022Oct 27, 2020 4:12 AM
Blender
Network Engineering
Cryptography
Code Review
Magento
Software Recommendations
Signal Processing
Emacs
Raspberry Pi
Stack Overflow на русском
Code Golf
Stack Overflow en español
Ethereum
Data Science
Arduino
Bitcoin
Software Quality Assurance & Testing
Sound Design
Windows Phone
more (28)
Photography
Science Fiction & Fantasy
Graphic Design
Movies & TV
#2205
opened Sep 24, 2020 by
Christian-Schmid
Homepage: Items in 'Who uses Hono' section are hidden
bug
website
#2197
opened Sep 21, 2020 by
calohmn
1.5.0
4
PasswordSecret's pwd-hash type is not used as declared
Device Registry
Management API
bug
#2194
opened Sep 21, 2020 by
sophokles73
1.5.0
4
branch
from
225bffa
to
cbef61b
Oct 6, 2020
sophokles73
added
the
Device Registry
label
Oct 7, 2020
sophokles73
reviewed
Oct 7, 2020
View changes
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Show resolved
Hide resolved
services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Outdated
public static final String FIELD_VERSION = "version";
public static final String FIELD_DATA = "data";
New Features
A tenant can now be configured with a max-ttl which is used as a upper boundary for default
TTL values configured for devices/tenants. Please refer to the Tenant API for details.
The AMQP, HTTP, MQTT and Kura protocol adapters consider this property when setting a TTL on
downstream event messages.
A protocol adapter can now be configured with a timeout for idle tenants. When there has been no
communication between a protocol adapter instance and the devices of a tenant, the former one releases
allocated resources of the tenant. Currently this means that it closes AMQP links and stops reporting
metrics for this tenant. The timeout is configured with the property tenantIdleTimeout for a protocol
adapter. Please refer to the protocol adapter configuration guides
for details.
The accounting period for the message limit checks can now be configured as monthly.
In this case the data usage for a tenant is calculated from the beginning till the end of the
(Gregorian) calendar month. Refer resource limits
for more information.
The devices can now indicate a time-to-live duration for event messages published using
the HTTP and MQTT adapters by setting the hono-ttl property in requests explicitly. Please refer to the
HTTP Adapter
and MQTT Adapter for details.
The device registry HTTP management API now properly implements cross-origin resource sharing (CORS) support,
by allowing the service to be exposed to configured domains (by default, it’s exposed to all domains).
The org.eclipse.hono.util.MessageHelper now provides convenience factory methods for creating
new downstream messages from basic properties.
org.eclipse.hono.service.AbstractProtocolAdapterBase has been adapted to delegate to these
#2021Oct 26, 2020 2:35 PM
#2020Oct 26, 2020 12:06 PM
#2019Oct 26, 2020 9:23 AM
#2018Oct 26, 2020 4:59 AM
Atom feed for all Atom feed for failuresPipeline Hono CI PipelineContinuous integration build of Hono master. Checks GitHub repository every minute for changes.
This project is currently disabled
Test Result Trend(just show failures) enlargeLast Successful ArtifactsRecent ChangesLatest Test Result (no failures)PermalinksLast build (#2047), 17 days agoLast stable build (#2047), 17 days agoLast successful build (#2047), 17 days agoLast failed build (#2037), 20 days agoLast unsuccessful build (#2037), 20 days agoLast completed build (#2047), 17 days agoPage generated: Nov 23, 2020 1:26:09 PM ESTREST APIJenkins ver. 2.222.4
Music: Practice & Theory
Worldbuilding
Video Production
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
Academia
Law
Physical Fitness
Gardening & Landscaping
Parenting
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
English Language Learners
Japanese Language
Chinese Language
French Language
German Language
Biblical Hermeneutics
Invalidating tenant/device/credentials cache entries in protocol adapters
Device Registry
enhancement
#2176
opened Sep 14, 2020 by
calohmn
3
Registry should support upload of client certificate for X.509 credentials type
Device Registry
Feature Request
Management API
#2170
opened Sep 11, 2020 by
sophokles73
1.5.0
Message mapping API does not return a failed future
help wanted
#2133
opened Aug 26, 2020 by
Alfusainey
23
Previous 1 2 3 4 Next
Previous Next
@JsonProperty(value = FIELD_VERSION, required = true)
This comment has been minimized.
Sign in to view
sophokles73
Oct 7, 2020
Member
setting required = true has no meaning when annotating a property. If you want an exception to be thrown if this JSON property is missing, then you need to use the constructor for setting the property.
This comment has been minimized.
Sign in to view
fkaltner
Oct 7, 2020
Author
Contributor
Good point, wasn't aware of that. Basically I moved the code of the old BaseDto (org.eclipse.hono.deviceregistry.mongodb.model.BaseDto) where this was already in place. The old BaseDto also allowed to create an instance even if those properties were null.
So I guess required = True can be removed. @kaniyan am I right about this?
This comment has been minimized.
Sign in to view
kaniyan
Oct 7, 2020
Contributor
The classes that extend abstract BaseDto such as TenantDto and DeviceDto uses BaseDto.setVersion(...) in their constructors to set the version. We can remove the required = True here.
new factory methods.
Hono’s protocol adapters can now use multiple trusted certificate authorities per tenant to authenticate
devices based on client certificates. The list of trusted certificate authorities can be managed at the
tenant level using the Device Registry Management API.
Authenticated gateway devices can now subscribe to commands for specific devices. Before, gateways
could only subscribe to commands directed at any of the devices that the gateway has acted on behalf of.
With the new feature of also being able to subscribe to commands for specific devices, northbound
applications will get notified of such a subscription along with the specific device id.
Now a max-ttd value, which is used as an upper boundary for the hono-ttd value specified by the devices,
can be set as an extension property in the adapters section of the tenant configuration.
API Changes
The already deprecated legacy metrics support has been removed.
The already deprecated legacy device registry and the corresponding base classes, which had been deprecated
as well, have been removed.
The topic filters used by MQTT devices to subscribe to commands has been changed slightly
to better fit the addressing scheme used by the other protocol adapters.
The existing topic filters have been deprecated but are still supported.
Please refer to the MQTT adapter user guide
for details.
History
Spanish Language
Islam
Русский язык
Russian Language
Arqade (gaming)
Bicycles
Role-playing Games
Anime & Manga
Puzzling
Motor Vehicle Maintenance & Repair
Board & Card Games
Bricks
Homebrewing
Martial Arts
The Great Outdoors
Poker
Chess
Sports
more (16)
MathOverflow
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
ProTip!
Type g p on any issue or pull request to go back to the pull request listing page.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Outdated
@HonoTimestamp
private Instant creationTime;
@JsonProperty(value = FIELD_UPDATED_ON, required = true)
This comment has been minimized.
Sign in to view
sophokles73
Oct 7, 2020
Member
see above
...in/java/org/eclipse/hono/service/management/device/DeviceWithStatus.java
Outdated
Show resolved
Hide resolved
...in/java/org/eclipse/hono/service/management/device/DeviceWithStatus.java
Outdated
Show resolved
Hide resolved
...rg/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java
Outdated
Show resolved
eclipse/hono - Gitter
The interface ResourceLimitChecks and its implementation classes have been moved to
package org.eclipse.hono.service.resourcelimits from org.eclipse.hono.service.plan.
Also the configuration parameters for the resource limits were renamed from hono.plan
to hono.resourceLimits. Please refer to the protocol adapter configuration guides for more information.
The response payload of the get Tenant operation of the Tenant API has been changed to contain
a list of trusted certificate authorities instead of just a single one. This way, protocol
adapters can now authenticate devices based on client certificates signed by one of multiple
different trusted root authorities defined for a tenant.
All standard protocol adapters have been adapted to this change.
The Tenant JSON schema object used in the tenant related resources of the Device Registry Management API
has also been adapted to contain a list of trusted authorities instead of a single one.
Deprecations
The OpenShift specific source-to-image deployment model has been removed in
favor of the Helm charts and the Eclipse IoT Packages project. You can still
deploy Hono on OpenShift using the Helm charts.
API and will be removed in the upcoming versions. You should use pwd-plain property only going forward.
1.0-M7
New Features
The Hono Helm chart now supports to choose if the example Device Registry, example AMQP Messaging Network
and/or the example Jaeger back end should be deployed and used with the Hono components or not.
In the latter case, the chart now also supports setting configuration properties for using an already
existing AMQP Messaging Network, Device Registry and/or Jaeger back end.
Chemistry
Biology
Computer Science
Philosophy
Linguistics
Psychology & Neuroscience
Computational Science
more (10)
Meta Stack Exchange
Stack Apps
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
site design / logo © 2020 Stack Exchange Inc; user contributions licensed under cc by-sa. rev 2020.11.23.38057
Stack Overflow works best with JavaScript enabled
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
Hide resolved
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Show resolved
Hide resolved
kaniyan
requested changes
Oct 7, 2020
View changes
...ase/src/main/java/org/eclipse/hono/service/management/device/Device.java
Outdated
Show resolved
Hide resolved
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
from
ee486e3
to
9c34194
Oct 13, 2020
Copy link
Device Registries :: Eclipse Hono™
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
A data grid based implementation of the Device Connection API has been added to Hono. This implementation
can be used in production environments using a highly scalable data grid for storing device connection
information. The service can be used instead of the simple implementation provided by the example Device
Registry by means of setting a configuration property when deploying using the Helm chart.
A tenant can now be configured so that all OpenTracing spans created when processing messages for that
specific tenant will be recorded in the tracing backend (overriding the default sampling strategy that
might only record a certain percentage of traces). See
Monitoring & Tracing
for more details.
API Changes
The obsolete method variants of reportTelemetry in org.eclipse.hono.service.metric.Metrics
have been removed. The new variants of this method accept an additional parameter of type TenantObject.
The already deprecated org.eclipse.hono.service.AbstractProtocolAdapterBase.getRegistrationAssertion
method has been removed. The alternate variant of the getRegistrationAssertion method which accepts an
additional OpenTracing span parameter should be used.
The already deprecated getRegistrationAssertion, getTenantConfiguration, sendConnectedTtdEvent,
sendDisconnectedTtdEvent and sendTtdEvent methods in org.eclipse.hono.service.AbstractProtocolAdapterBase
have been removed. The alternate variant of these methods which accepts an additional OpenTracing span parameter
should be used.
Deprecations
The deprecated Kura adapter is no longer deployed by default by the Helm chart.
However, it can still be deployed by means of setting a configuration property.
1.0-M6
New Features
Contributor
Author
fkaltner
commented
Oct 13, 2020
Rebased onto master since JDBC registry was merged.
Copy link
Member
sophokles73
commented
Oct 13, 2020
@fkaltner can you fix the failing unit test(s)?
ctron
reviewed
Oct 15, 2020
View changes
...es/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java
@@ -63,7 +65,7 @@
@JsonProperty(RegistryManagementConstants.FIELD_STATUS)
@JsonInclude(value = Include.NON_EMPTY)
private Status status = new Status();
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
eclipse/hono - Gitter
eclipse/hono - Gitter
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
Implementation of the new HTTP management API for tenants, devices and
credentials.
The health check endpoints of services can now be called securely via TLS.
Please refer to the protocol adapter configuration guides
for the new parameters available.
The Tenant API now optionally allows
specifying minimum message size. If it is specified, then the payload size of the incoming telemetry, event
and command messages are calculated in accordance with the minimum message size by the AMQP, HTTP and MQTT
protocol adapters and then recorded in the metrics system.
See Metrics for more details.
Fixes & Enhancements
The automatic reconnect handling of the HonoConnection implementation has been
improved and now applies an exponential back-off algorithm. The behavior can be
refer to the Hono Client Configuration guide
for details regarding these new variables.
The message limit checks is now extended to include command and control messages.
Please refer to the resource limits for details.
The health check server endpoint will now bind to a default port value of 8088 if no values
are set explicitly in the configuration. It is also possible to start both a secure and an insecure
server (using different ports)
Refer to the Monitoring configuration guide
for details.
API Changes
With the implementation of the new HTTP management API for the device registry,
private Status status;
This comment has been minimized.
Sign in to view
ctron
Oct 15, 2020
Contributor
I think it may good to avoid null cases here. Having an empty object object is better IMHO than null.
This comment has been minimized.
Sign in to view
fkaltner
Oct 26, 2020
Author
Contributor
The reason why I removed this is that @JsonInclude(value = Include.NON_EMPTY) does only work with null values for Status objects (unless we would write a custom serializer).
Since I wanted the status property not to show up at all in the JSON responses instead of an empty status property as below
...
"status": {}
...
I decided to remove that line.
Copy link
Contributor
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Welcome :: Eclipse Hono™
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
the class hierarchy for implementing device registry was significantly
refactored. This also includes the deprecation of a list of classes and tests.
Also see Device registry changes for more information.
The complete interfaces, and the base and complete implementation
classes for services got deprecated, and are planned to be removed in a future
release. Also see Device registry changes for
more information.
The example Device Registry that comes with Hono now implements the new
HTTP management API. Consequently, the URI endpoints for managing the content
of the registry have changed accordingly.
The configuration parameters for the health check endpoint were moved from
hono.app to hono.healthCheck and renamed. hono.app.healthCheckPort is now
hono.healthCheck.insecurePort and hono.app.healthCheckBindAddress is now
hono.healthCheck.insecurePortBindAdress. Please refer to the protocol adapter
configuration guides for additional
information on the new naming.
Device registry changes
The section summarizes changes made for 1.0-M5 in the device registry.
During the development of Hono 1.0, we defined a new HTTP API for managing
information stored in the device registry. This API replaces the current,
ctron
commented
Oct 15, 2020
I don't see the benefit of all the "dto" stuff, which isn't "dto" to some degree anyway. It looks like that introduces yet another abstraction layer in the code base, which diverges between the different implementations. But if everyone else is fine with that, I don't object.
Copy link
Contributor
Author
fkaltner
commented
Oct 15, 2020
•
edited
I don't see the benefit of all the "dto" stuff, which isn't "dto" to some degree anyway. It looks like that introduces yet another abstraction layer in the code base, which diverges between the different implementations. But if everyone else is fine with that, I don't object.
@ctron I agree that it isn't the really DTO pattern which is employed here, but this abstraction layer was already there in the MongoDb based registry, so I thought it was already agreed upon. Actually I thought it was envisioned to implement this as an abstraction layer when I asked in Gitter about this already being worked on (see Sep 11 09:19):
not yet, bit I think this should be implemented in a way that it covers all three (File, MongoDB and JDBC) using some base classes
Copy link
Member
sophokles73
commented
Oct 15, 2020
I don't see the benefit of all the "dto" stuff, which isn't "dto" to some degree anyway. It looks like that introduces yet another abstraction layer in the code base, which diverges between the different implementations. But if everyone else is fine with that, I don't object.
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
Welcome - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Connect. Command. Control.
Eclipse Hono™ provides remote service interfaces for connecting large numbers of IoT
devices to a back end and interacting with them in a uniform way regardless of the device
communication protocol.
Millions of Devices
Hono is designed for connecting large numbers of IoT devices. Its micro service based architecture and use of
a reactive programming model allow for scaling out horizontally.
Uniform API
Connect a multitude of different types of devices to your (cloud) back end. Communicate with all of them via
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Bob Claerhout
@BobClaerhout
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
eclipse/hono - Gitter
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
eclipse/hono - Gitter
hono/MongoDbBasedTenantService.java at 9be401bdd636dedff3d0eb5e9447981f005cca80 · eclipse/hono · GitHub
hono/MongoDbBasedCredentialsService.java at 9be401bdd636dedff3d0eb5e9447981f005cca80 · eclipse/hono · GitHub
Add MS SQLServer support to JDBC device registry, also test and fix Postgres support in JDBC device registry by lhotari · Pull Request #2317 · eclipse/hono · GitHub
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
provisional API, which was originally intended for tests to manipulate the file
based device registry during system tests. The new HTTP based API is intended
to replace the existing HTTP API, as well as the management part of the AMQP
based API.
The first major change is, that all the complete classes got deprecated. As
they are based on the services for the protocol adapters. And those services
are no longer considered to be used for managing information. The replacement
for those classes are the new management APIs.
Each of the three APIs got a companion API for management, which are located
in the org.eclipse.hono.service.management base package.
The class hierarchy was decoupled in order to make it easier to implement those
services. The new design only requires to implement a service, which is not
based on any other interface. And while your concrete implement still can
implement the Verticle interface, this is no longer a requirement.
Also the base classes got deprecated. Instead of inheriting the common
event bus adapter classes, which take the reference of a service, and bind
this service to the event bus instead of using inheritance. Those change
requirement to inherit from either the complete or base classes. And
this finally allows your service implementation to be extend your specific
service implementations to implement both the standard API, as well as the
management API in the same class. As Java does not allow inheritance
@ctron Do you have an idea for an alternative way of having the (read-only) status properties in the different implementations? I believe we are all open for other proposals ...
sophokles73
reviewed
Oct 26, 2020
View changes
Copy link
Quote reply
Member
sophokles73
left a comment
I don't know if I have covered everything but it is very hard to review this PR as so many changes are involved all over the place. IMHO it would be better to split this PR up into smaller parts, maybe based on the three different registry implementations? We could then discuss the overall idea and concept in a smaller scope first, before rolling it out to all implementations.
One thing that struck my mind in particular is that of DB migration, i.e. can a user update to this new code and still use his/her existing DB content?
...ase/src/main/java/org/eclipse/hono/service/management/device/Device.java
Outdated
Show resolved
Hide resolved
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Outdated
Show resolved
Hide resolved
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > Device Registries
Device Registries
Eclipse Hono™ provides these device registry implementations:
File Based Device Registry
MongoDB Based Device Registry.
the same simple API regardless of the device protocol.
IoT Protocols
Hono supports devices communicating via common IoT protocols like HTTP, MQTT, AMQP and CoAP out of the box.
Messaging Patterns
Hono provides APIs for important IoT communication patterns: Telemetry and Event messages can be used by devices
to report sensor readings whereas applications can use Command & Control to invoke operations on devices.
Secure
Hono is designed for security by default. It supports common authentication mechanisms like username/password
and X.509 client certificates to verify a device’s identity and uses transport layer security (TLS) when
communicating with devices.
Extensible
Your device uses a custom protocol? Hono provides a simple mechanism to add custom protocol adapters.
Who uses Eclipse Hono?
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
Authentication/Authorization :: Eclipse Hono™
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Bob Claerhout
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
from multiple classes, this was not possible before.
The new default file based device registry, was modified to use the new class
hierarchy and support the new management model.
The device registry, which was provided in 1.0-M4 and before, is still part of
the source tree, but was moved to services/device-registry-legacy. It is
there to show the compatibility with the older class hierarchy, using the,
now deprecated, base and complete classes. Newer implementations should not
be build on this model.
Clients of the base variants of the services, like the protocol adapters,
do not need to make any changes.
Implementations of the device registry services, using the existing base and
complete can re-use that model, but are encouraged to migrate to the new model
as soon as possible, as the legacy model is planned to be removed. The only
impacting change is that the service interfaces no longer extend from
Verticle directly, but that has been moved to the base implementation.
Outdated
Show resolved
Hide resolved
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Outdated
Show resolved
Hide resolved
...stry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java
Show resolved
Hide resolved
2 hidden conversations
Load more…
.../src/main/java/org/eclipse/hono/service/management/device/DeviceDto.java
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Newest 'eclipse-hono' Questions - Stack Overflow
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
Implementations of the services for protocol adapters (the non-management API),
can switch to the new class hierarchy by dropping inheritance to the base
class, and starting up a new instance of the corresponding event bus adapter,
providing a reference to the service. For the RegistrationService it is also
Implementations of the services for management need to simply inherit from the
new management interfaces, and set up the event bus adapters the same way.
The module device-registry-legacy as well as all classes and interfaces,
which got deprecated, are planned to be dropped in 1.1.
1.0-M5
New Features
Hono’s protocol adapters and the other components now support using ECC based server certificates.
The protocol adapters also support authenticating devices which present an ECC based client certificate.
The example configuration now uses ECC based certificates by default.
Hono now specifies a Device Connection API and
contains an exemplary implementation of this API included in the device registry component. The purpose of the API is
to be able to set and retrieve information about the connections from devices or gateways to the protocol adapters.
This version implements the new HTTP management API for tenants, devices, and credentials.
Fixes & Enhancements
The Hono Sandbox’s protocol adapters support using the gateway mode again.
The Getting Started guide has been rewritten
to use the Hono Sandbox or a local Minikube cluster
instead of Docker Swarm.
The MQTT adapter now closes the network connection to device on publish failures.
API Changes
Outdated
Show resolved
Hide resolved
.../src/main/java/org/eclipse/hono/service/management/device/DeviceDto.java
Outdated
Show resolved
Hide resolved
...src/test/java/org/eclipse/hono/service/management/device/DeviceTest.java
Outdated
Show resolved
Hide resolved
...src/test/java/org/eclipse/hono/service/management/device/DeviceTest.java
Outdated
Show resolved
Hide resolved
...rg/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java
Outdated
Show resolved
Hide resolved
Copy link
Contributor
Author
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
Stack Overflow
About
Products
For Teams
Stack Overflow
Public questions & answers
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Jobs
Programming & related technical career opportunities
Talent
Recruit tech talent & build your employer brand
Advertising
Reach developers & technologists worldwide
About the company
Loading…
Log in
Sign up
current community
Stack Overflow
help
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
97
Pull requests
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
97
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
_
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
The optional methods of the Tenant API have been
removed. Implementations of the Tenant API are encouraged to expose the tenants endpoint defined by
Hono’s HTTP based management API instead.
Several of the formerly mandatory to include properties of the request and response messages have
been made optional or removed altogether. Existing clients should not be affected by these changes, though.
The optional methods of the
Device Registration API have been
removed. Implementations of the Device Registration API are encouraged to expose the devices endpoint defined by
Hono’s HTTP based management API instead.
Several of the formerly mandatory to include properties of the request and response messages have
been made optional or removed altogether. Existing clients should not be affected by these changes, though.
The response message format of the assert Device Registration operation of the Device Registration API
has been changed, replacing the optional gw-supported boolean field with an optional via field.
The value of this field contains the list of gateway that may act on behalf of the device on which
the operation is invoked.
The methods for invoking the optional operations of the Device Registration API have been removed
from org.eclipse.hono.client.RegistrationClient and org.eclipse.hono.client.impl.RegistrationClientImpl.
The optional methods of the Credentials API
have been removed. Implementations of the Credentials API are encouraged to expose the credentials endpoint defined
by Hono’s HTTP based management API instead.
Several of the formerly mandatory to include properties of the request and response messages have
been made optional or removed altogether. Existing clients should not be affected by these changes, though.
The control prefix in the northbound and southbound Command & Control endpoints has been renamed to command.
fkaltner
commented
Oct 26, 2020
•
edited
I don't know if I have covered everything but it is very hard to review this PR as so many changes are involved all over the place. IMHO it would be better to split this PR up into smaller parts, maybe based on the three different registry implementations? We could then discuss the overall idea and concept in a smaller scope first, before rolling it out to all implementations.
One thing that struck my mind in particular is that of DB migration, i.e. can a user update to this new code and still use his/her existing DB content?
The changes should be backward compatible for the MongoDb based registry (see #2189 (comment)). *But: * I would like to run a final test after having rebased on master again, just to be sure.
Regarding the JDBC Registry, I added two columns so the schema was changed. I am not sure about the migration (besides running a migration SQL script adding the two columns of course) - I would really appreciate feedback from @ctron on that 😃
fkaltner
added 4 commits
Sep 17, 2020
[#1960] Implementing status property for device registrations.
…
801022e
Putting the status property to work which now properly indicates when a device was created and updated.
This fixes #1960
Signed-off-by: Florian Kaltner <florian.kaltner@bosch.io>
[#1960] Implementing status property for device registrations.
…
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
marcel-bluestone
@marcel-bluestone
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Deniz
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Mailing list: hono-dev (99 subscribers) | Eclipse - The Eclipse Foundation open source community website.
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
eclipse/hono - Gitter
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
_
Dejan Bosanac
@dejanb
@sophokles73 will do
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
By using our site, you acknowledge that you have read and understand our Cookie Policy, Privacy Policy, and our Terms of Service.
Home
Public
Stack Overflow
Tags
Users
Find a Job
Jobs
Companies
Teams
What’s this?
Free 30 Day Trial
Teams
Q&A for Work
Stack Overflow for Teams is a private, secure spot for you and
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
_
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
_
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
_
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Permalink
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Permalink
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
307
Fork
103
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Dismiss
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
The endpoint names with the control prefix are still supported but deprecated. The northbound endpoint for
business applications to receive command responses has the command_response prefix now. The old control prefix
for the receiver address is also still supported but deprecated.
The deviceId parameter of the getOrCreateCommandClient and getOrCreateAsyncCommandClient methods of the
org.eclipse.hono.client.ApplicationClientFactory interface has been removed.
This means that a CommandClient or AsyncCommandClient instance can be used to send commands to arbitrary
devices of a tenant now. Accordingly, the CommandClient.sendCommand and AsyncCommandClient.sendAsyncCommand
methods now require an additional deviceId parameter.
The deprecated methods of org.eclipse.hono.client.HonoConnection have been removed.
1.0-M4
New Features
Default properties can now also be set at the tenant level, affecting all devices
belonging to the tenant. Please refer to the
protocol adapter user guides for details.
CredentialsClientImpl now supports caching of response data received from a Credentials service based on
cache directives. The protocol adapters are now equipped to cache the response from the Credentials Service.
The protocol adapters support configuration variables to set the default cache timeout, the minimum
and maximum cache sizes for this service.
The example device registry’s Credentials service implementation now includes a cache directive
in its response to the get Credentials operation which allows clients to cache credentials of
type hashed-password and x509-cert for a configurable amount of time. Please refer to the
Device Registry Admin Guide
for details regarding the configuration properties to use.
There is now an official specification of an HTTP API for managing the content of a device registry.
1be622f
Putting the status property to work which now properly indicates when a device was created and updated.
This fixes #1960
Signed-off-by: Florian Kaltner <florian.kaltner@bosch.io>
[#1960] Implementing status property for device registrations.
…
39fd7d2
Putting the status property to work which now properly indicates when a device was created and updated.
This fixes #1960
Signed-off-by: Florian Kaltner <florian.kaltner@bosch.io>
[#1960] Implementing status property for device registrations.
…
Loading status checks…
da5c493
Putting the status property to work which now properly indicates when a device was created and updated.
This fixes #1960
Signed-off-by: Florian Kaltner <florian.kaltner@bosch.io>
fkaltner
force-pushed the
bosch-io:#1960_status_in_device_registration
branch
from
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Architecture > Authentication/Authorization
Requirements
How it works today
Device Auth
System Component Auth
Google Tag Manager Skip to main content
Log in
Manage Cookies
Eclipse - The Eclipse Foundation open source community website.
Download
ProjectsWorking GroupsMembersCommunity MarketplaceEventsPlanet EclipseNewsletterVideosBlogsParticipate Report a BugForumsMailing ListsWikiIRCResearchEclipse IDE DownloadLearn MoreDocumentationGetting Started / SupportHow to ContributeIDE and ToolsNewcomer Forum
More
CommunityMarketplaceEventsPlanet EclipseNewsletterVideosBlogsParticipateReport a BugForumsMailing ListsWikiIRCResearchEclipse IDEDownloadLearn MoreDocumentationGetting Started / SupportHow to ContributeIDE and ToolsNewcomer Forum
Toggle navigation
Log in
Search
Mailing list: hono-dev (99 subscribers)
hono developer discussions
About hono-dev
hono developer discussions
Using hono-dev
To post a message to all the list members,
send email to hono-dev@eclipse.org. You must be subscribed
to the list before you can post. To access a web archive of this list, visit the hono-dev Archives or subscribe to this list's RSS feed
Subscribing hono-dev
All contributions you make to our web site
are governed by our Terms Of Use. Your interactions
with the Eclipse Foundation web properties and any
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
Grafana
Loading Grafana
If you're seeing this Grafana has failed to load its application files
1. This could be caused by your reverse proxy settings.
2. If you host grafana under subpath make sure your grafana.ini root_url setting includes subpath
3. If you have a local dev build make sure you build frontend using: yarn start, yarn start:hot, or yarn build
4. Sometimes restarting grafana-server can help
Docs
Support Plans
eclipse/hono - Gitter
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
Eclipse Hono | projects.eclipse.org
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
your coworkers to find and share information.
Learn more
Questions tagged [eclipse-hono]
Ask Question
Eclipse Hono™ provides remote service interfaces for connecting large numbers of IoT devices to a back end and interacting with them in a uniform way regardless of the device communication protocol.
Learn more…
Top users
Synonyms
59
questions
Newest
Active
Bountied
Unanswered
More
Bountied
0
Unanswered
Frequent
Votes
Unanswered (my tags)
Filter
Filter by
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
_
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
9be401bdd6
hono/services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedTenantService.java
/
Jump to
Code definitions
No definitions found in this file.
Code navigation not available for this commit
Go to file
Go to file
T
Go to line
L
Go to definition
R
Copy path
Cannot retrieve contributors at this time
409 lines (356 sloc)
19.2 KB
Raw
Blame
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
9be401bdd6
hono/services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java
/
Jump to
Code definitions
No definitions found in this file.
Code navigation not available for this commit
Go to file
Go to file
T
Go to line
L
Go to definition
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
The HTTP Management API is defined using by
means of OpenAPI v3. Note, that the API is not yet implemented by the example device registry that comes with Hono.
The Command & Control feature now supports gateway agnostic addressing of devices. This means that applications are
able to send commands to devices without knowing the particular gateway they may be connected to.
The concept and implementation of message limit have been added. The protocol adapters can be now
enabled to verify this message limit for each tenant before accepting any telemetry/event messages.
Please refer to the resource limits for details.
A basic Sigfox protocol adapter, for use with the Sigfox backend. Please read
the Sigfox protocol adapter
documentation to learn more about pre-requisites and limitations.
Fixes & Enhancements
vert.x has been updated to version 3.7.0.
API Changes
The org.eclipse.hono.util.RegistrationConstants.FIELD_DEFAULTS constant
has been renamed to org.eclipse.hono.util.RegistrationConstants.FIELD_PAYLOAD_DEFAULTS.
The org.eclipse.hono.service.AbstractProtocolAdapterBase.newMessage and
org.eclipse.hono.service.AbstractProtocolAdapterBase.addProperties methods have
been changed to accept an additional parameter of type TenantObject which may contain default
properties defined for the tenant to be included in downstream messages.
The get Registration Information operation of the Device Registration API is not optional anymore,
it is now mandatory to implement. For device registry implementations based on the
CompleteRegistrationService interface, there is no change needed as the operation is already
defined there.
1e5abc0
to
da5c493
Oct 26, 2020
Copy link
Member
sophokles73
commented
Oct 27, 2020
Regarding the JDBC Registry, I added two columns so the schema was changed. I am not sure about the migration (besides running a migration SQL script adding the two columns of course)
@fkaltner for the JDBC registry there is no migration scenario because the JDBC registry has been added in 1.5.0 just recently ...
sophokles73
approved these changes
Oct 27, 2020
View changes
Copy link
Quote reply
Member
sophokles73
left a comment
LGTM
sophokles73
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Application Auth
Management of Identities and Authorities
Future Approach
Authentication/Authorization
This page describes how authentication and authorization of devices, consumers (back end applications) and system components works in Hono.
Requirements
Devices are authenticated and authorized when they connect to a protocol adapter.
Consumers are authenticated and authorized when they connect to a Dispatch Router instance.
System components are authenticated and authorized when they connect to each other.
Credentials and authorization rules can be managed centrally, i.e. credentials and rules do not need to be configured manually on each component.
How it works today
The following diagram provides an overview of the components involved in use cases requiring authentication and authorization.
Device Auth
Both the HTTP adapter as well as the MQTT adapter require devices to authenticate during connection establishment by default. Both rely on the Credentials API to help in verifying credentials provided by a device. Please refer to Device Authentication for a general overview of Hono’s approach to authenticating devices and to the protocol adapter user guides for specifics regarding how devices can authenticate to the corresponding protocol adapters.
System Component Auth
Client components opening an AMQP connection to a server component are authenticated using SASL PLAIN as specified in RFC 4422. The server component takes the authentication information provided by the client component and opens a connection to the Auth Server, using the credentials provided by the client in its SASL PLAIN exchange with the server component. On successful authentication the Auth Server issues a JSON Web Token (JWT) asserting the client’s identity and its granted authorities to the server component. The server component then attaches this token to its AMQP connection with the client and from then on uses it to make authorization decisions regarding the client’s requests. See Authentication API for details regarding the authentication process and the format of the tokens issued by the Auth Server.
Based on the components shown above, the following sequence diagram shows how the MQTT Adapter connects to the Device Registry and gets authenticated transparently using the Auth Server.
Client components are authorized whenever they open a new AMQP link on an existing connection to the server. When a client tries to open a receiver link, the server checks if the client is authorized to read from the source address the client has specified in its AMQP attach frame. Analogously, when a client tries to open a sender link, the server checks if the client is authorized to write to the target address from the client’s attach frame.
Service implementations may additionally authorize individual (request) messages received from the client, e.g. based on the message’s subject property which is used by Hono’s AMQP 1.0 based APIs to indicate the operation to invoke. In such a case the server checks if the client is authorized to execute the operation indicated by the message subject on the link’s target address.
Application Auth
Business Applications connect to the AMQP 1.0 Messaging Network in order to consume telemetry data and events and send commands to devices. It is therefore the responsibility of the AMQP Network to properly authenticate and authorize the application.
The Apache Qpid Dispatch Router which is used in Hono’s example deployment can be configured to authenticate consumers using arbitrary SASL mechanisms. Access to addresses for receiving messages can be restricted to certain identities. The Dispatch Router instance which is used in the example deployment is configured to delegate authentication of clients to the Auth Server by means of its Auth Service Plugin mechanism. This mechanism works in a very similar way as described above for the authentication of system components. The main difference is that the clients’ authorities are not transferred by means of a JSON Web Token but instead are carried in a property of the Auth Server’s AMQP open frame.
Management of Identities and Authorities
eclipse/hono - Gitter
information you may provide us about yourself are governed
by our Privacy Policy.
To subscribe to a mailing list, you must have an Eclipse.org account.
Log in
- Or -
Create an account
Once you’ve are logged in, you can manage your mailing list subscriptions on the Mailing List page.
View All Mailing Lists
Mailing List
View All Mailing Lists
View Archived Mailing Lists
Privacy Policy
Terms of Use
Mailing list: hono-devRSS Feed
Archive
Eclipse Foundation
About UsContact UsDonateMembersGovernanceCode of ConductLogo and ArtworkBoard of Directors
Legal
Privacy PolicyTerms of UseCopyright AgentEclipse Public LicenseLegal Resources
Useful Links
Report a BugDocumentationHow to ContributeMailing ListsForumsMarketplace
Other
IDE and ToolsProjectsWorking GroupsResearch@EclipseReport a VulnerabilityService Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Community
Grafana
v6.3.5 (commit: 67bad72)
New version available!
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Google Tag Manager Skip to main content
Log in
Manage Cookies
projects.eclipse.org
Download
ProjectsWorking GroupsMembersCommunity MarketplaceEventsPlanet EclipseNewsletterVideosBlogsParticipate Report a BugForumsMailing ListsWikiIRCResearchEclipse IDE DownloadLearn MoreDocumentationGetting Started / SupportHow to ContributeIDE and ToolsNewcomer Forum
More
CommunityMarketplaceEventsPlanet EclipseNewsletterVideosBlogsParticipateReport a BugForumsMailing ListsWikiIRCResearchEclipse IDEDownloadLearn MoreDocumentationGetting Started / SupportHow to ContributeIDE and ToolsNewcomer Forum
Toggle navigation
Home
Projects
Eclipse IoT
Eclipse Hono
Governance
Eclipse Hono
Primary tabsOverview
Downloads
Who's Involved
Developer Resources
Governance(active tab)
Contact Us
Scope: Eclipse Hono™ provides remote service interfaces for connecting large numbers of IoT devices to a back end and interacting with them in a uniform way regardless of the device communication protocol.
Hono specifically supports scalable and secure ingestion of large volumes of sensor data by means of its Telemetry and Event APIs. Hono's Command & Control API allows for sending commands (request messages) to devices and receive a reply to such a command from a device in an asynchronous way.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
No answers
No accepted answer
Has bounty
Sorted by
Newest
Recent activity
Most votes
Most frequent
Bounty ending soon
Tagged with
My watched tags
The following tags:
Apply filter
Cancel
0
votes
1answer
29 views
Difficulty in Sending AMQP 1.0 Message
I am using Eclipse Hono as an IoT Platform which is running locally in my private Kubernetes cluster. I have registered a device to receive commands through MQTT.
In Hono it is mandatory to send ...
python iot amqp eclipse-hono
asked Nov 5 at 13:31
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
/*******************************************************************************
* Copyright (c) 2020 Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0
*
* SPDX-License-Identifier: EPL-2.0
*******************************************************************************/
package org.eclipse.hono.deviceregistry.mongodb.service;
import java.net.HttpURLConnection;
import java.util.Objects;
import java.util.Optional;
import javax.security.auth.x500.X500Principal;
import org.eclipse.hono.client.ClientErrorException;
R
Copy path
Cannot retrieve contributors at this time
507 lines (442 sloc)
21.9 KB
Raw
Blame
/*******************************************************************************
* Copyright (c) 2020 Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0
*
* SPDX-License-Identifier: EPL-2.0
*******************************************************************************/
package org.eclipse.hono.deviceregistry.mongodb.service;
import java.net.HttpURLConnection;
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
Add MS SQLServer support to JDBC device registry, also test and fix Postgres support in JDBC device registry
#2317
Open
lhotari
wants to merge
16
commits into
eclipse:master
base:
master
from
lhotari:lh-sqlserver-support
Open
Add MS SQLServer support to JDBC device registry, also test and fix Postgres support in JDBC device registry
#2317
lhotari
wants to merge
16
commits into
eclipse:master
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
_
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
_
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
The response message of the assert Device Registration operation does not contain an assertion
token anymore. The org.eclipse.hono.service.registration.BaseRegistrationService class
has been adapted accordingly.
The already deprecated org.eclipse.hono.client.CommandConsumerFactory.closeCommandConsumer
method has been removed.
The response message format of the assert Device Registration operation of the Device Registration API
has been changed to include an optional gw-supported boolean field. The value of this field refers to
whether the device on which the operation is invoked allows one or more gateways to act on its behalf.
The AMQP sender link address to be used by business applications to send commands to devices has been
as sender link address is still possible but gateway agnostic addressing of devices is not supported for
such command messages.
Deprecations
Instructions for script based deployment to Kubernetes have been removed from the deployment guide.
Using Helm is now the only supported way of deploying Hono to Kubernetes.
1.0-M3
Fixes & Enhancements
The protocol adapters add tracing information about invocations of the Device Registry
services again.
The example deployment now uses Qpid Dispatch Router 1.6.0.
1.0-M2
New Features
A new experimental LoRa protocol adapter has been added which (so far) supports the reception
of telemetry data and events from devices connected to LoRa network providers and/or
LoRa gateways. Note that this adapter is not considered production ready yet.
Any help in improving and enhancing the adapter is more than welcome.
added this to In progress
in 1.5.0
via automation
Oct 27, 2020
sophokles73
added this to the 1.5.0 milestone
Oct 27, 2020
Copy link
Contributor
Author
fkaltner
commented
Oct 27, 2020
I retested with the current state:
0.) Build Hono based on "master"
1.) Deployed locally via packages project (which also creates some default data)
2.) Build Hono based on this branch
3.) Deleted the MongoDb Device Registry Pod which leads to the new registry based on this branch being deployed
4.) Checked if device with id 4711 (DEFAULT_TENANT) can still be queried via REST which is true
Hence the MongoDb registry is still backwards-compatible.
ctron
approved these changes
Oct 27, 2020
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
The identities and corresponding authorities that the Auth Server uses for verifying credentials and issuing tokens are defined in a configuration file (services/auth/src/main/resources/permissions.json) read in during start-up of the Auth Server. These authorities are used for authenticating and authorizing system components as well as Business Applications.
Please refer to the Dispatch Router documentation for details regarding configuration of Dispatch Router security.
Future Approach
In the long run Hono will still use tokens for authenticating clients but will use a policy based approach for authorizing requests, i.e. authorization decisions will be made by a central policy enforcement component. Hono services will pass in the client’s token, the resource being accessed and the intended action along with potentially other attributes to the policy enforcement component which will then make the authorization decision based on the configured rules (policy) and return the outcome to the component.
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Back to the top
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
_
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
eclipse/hono - Gitter
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
eclipse/hono - Gitter
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
_
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
_
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
Finally, Hono provides APIs for integration with existing device and credentials management systems.
The Hono project provides implementations of the remote service interfaces mentioned above, leveraging existing messaging infrastructure components. It is not the project's intention to create an additional message broker implementation.
Working Group: Internet of Things (IoT)Releases:
NameDate
1.5.02020-12-17
1.4.32020-11-06
1.3.12020-11-06
1.4.02020-09-11
1.3.02020-07-20
1.2.42020-07-10
1.2.32020-06-09
1.1.22020-05-27
1.0.42020-05-27
1.2.22020-04-15
1.2.12020-03-25
1.2.02020-03-24
1.1.12020-02-28
1.1.02020-02-06
1.0.32020-01-17
1.0.22019-12-13
1.0.12019-11-08
1.0.02019-10-17
0.92019-02-25
0.82018-11-21
0.72018-08-16
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
_
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
rohollah ehsani
311 bronze badge
0
votes
1answer
19 views
Error on running integration tests while building hono from source - certificate expired
I followed the steps for building hono from source from this page https://www.eclipse.org/hono/docs/dev-guide/building_hono/
The build completes without errors, but when running the integration tests, ...
eclipse-hono
asked Oct 29 at 12:59
Marcel Hell
122 bronze badges
0
votes
1answer
27 views
Eclipse Hono command line client is not able to connect to Hono on Sandbox
I am trying to use the Hono Sandbox as described in "Getting started with Eclipse Hono".
I followed all steps but when starting the command line client I can't connect to the server:
12:43:...
java raspberry-pi eclipse-hono
asked Oct 28 at 12:34
hope1976
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
_
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
_
import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedTenantsConfigProperties;
import org.eclipse.hono.deviceregistry.mongodb.model.TenantDto;
import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;
import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;
import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;
import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;
import org.eclipse.hono.deviceregistry.util.Versioned;
import org.eclipse.hono.service.management.Id;
import org.eclipse.hono.service.management.OperationResult;
import org.eclipse.hono.service.management.Result;
import org.eclipse.hono.service.management.tenant.Tenant;
import org.eclipse.hono.service.management.tenant.TenantManagementService;
import org.eclipse.hono.service.tenant.TenantService;
import org.eclipse.hono.tracing.TracingHelper;
import org.eclipse.hono.util.Constants;
import org.eclipse.hono.util.Lifecycle;
import org.eclipse.hono.util.RegistryManagementConstants;
import org.eclipse.hono.util.TenantResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.opentracing.Span;
import io.opentracing.noop.NoopSpan;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.eclipse.hono.auth.HonoPasswordEncoder;
import org.eclipse.hono.client.ClientErrorException;
import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedCredentialsConfigProperties;
import org.eclipse.hono.deviceregistry.mongodb.model.CredentialsDto;
import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;
import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;
import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;
import org.eclipse.hono.deviceregistry.service.credentials.AbstractCredentialsManagementService;
import org.eclipse.hono.deviceregistry.service.device.DeviceKey;
import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;
import org.eclipse.hono.service.credentials.CredentialsService;
import org.eclipse.hono.service.management.OperationResult;
import org.eclipse.hono.service.management.Result;
import org.eclipse.hono.service.management.credentials.CommonCredential;
import org.eclipse.hono.tracing.TracingHelper;
import org.eclipse.hono.util.CacheDirective;
import org.eclipse.hono.util.CredentialsConstants;
import org.eclipse.hono.util.CredentialsResult;
from
lhotari:lh-sqlserver-support
+430
−26
Conversation
2
Commits
16
Checks
6
Files changed
18
Conversation
Copy link
Quote reply
Contributor
lhotari
commented
Nov 23, 2020
Motivation
Add Microsoft SQLServer support to JDBC device registry
Changes
Adds DDL for MS SQLServer and adapt queries for SQLServer syntax
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
The concept and implementation of resource limits have been added. Now a connection limit to define
the maximum number of device connections to be allowed per tenant can be configured. The MQTT and AMQP
adapters can be enabled to verify this connection limit before accepting any new connections. Please
refer to the resource limits for details.
Fixes & Enhancements
The base classes for implementing the AMQP and HTTP endpoints for the Credentials, Tenant
and Device Registration APIs now create an OpenTracing Span for tracking the
processing of requests at a high level.
The hono-client and hono-core artifacts use Java 8 level again so that they
can be used in applications using Java 8.
The protocol adapters now always specify values for the ttd and qos tags when
reporting telemetry messages using meter name hono.messages.received. This fixes
an issue when using the Prometheus back end where the HTTP adapter failed to report
messages that contained a TTD value and others that didn’t.
The Helm based deployment of the device registry has been fixed by adding the secret
and deployment entries for the device-identities.json.
Before uploading command responses, the MQTT and AMQP adapters now check whether the device is
registered and also the adapter is enabled for the tenant.
API Changes
The hono-client module has undergone several major and incompatible changes. The most
important change affects the HonoClient interface which no longer serves as a factory
for the arbitrary clients to the Hono service endpoints.
It has been renamed to HonoConnection and now only represents the underlying
AMQP connection to a peer and provides methods for managing the connection state
View changes
sophokles73
added
JDBC Device Registry
MongoDB Device Registry
labels
Oct 27, 2020
kaniyan
approved these changes
Oct 27, 2020
View changes
Hide details
View details
sophokles73
merged commit 962c77a
into
eclipse:master
Oct 27, 2020
4 checks passed
4 checks passed
build (file)
Details
build (jdbc)
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
_
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
_
robmontalvojr
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
_
Bob Claerhout
@BobClaerhout
eclipse/hono - Gitter
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
0.62018-05-16
0.52018-02-12
Reviews:
NameDate
1.1.0 Release Review2020-02-05
1.0.0 Release Review2019-10-16
0.9 Release Review2019-02-20
0.8 Release Review2018-11-21
0.7 Release Review2018-08-15
0.6 Release Review2018-05-16
0.5 Release Review2018-02-07
Creation Review2016-02-03
IP Due Diligence Type: Type B - Full IP Due Diligience (License, Provenance, Scanning)
Project Links
Getting Started
Website
Next Release
Documentation
Current Release
Proposal
Plan
Related Projects
Related Projects:Eclipse RTEclipse Vert.x
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
322 bronze badges
0
votes
1answer
29 views
How to make service configurations in Eclipse Hono deployed on a K8s cluster?
I have deployed Hono on a K8s cluster using helm chart following the documentation from here. I am able to make some basic configuration changes using the values.yaml file. But I can't find where and ...
eclipse-hono
asked Oct 20 at 6:38
vasanthbk
122 bronze badges
0
votes
2answers
25 views
501 Not Implemented on devices/tenant endpoint
I'm running Hono v1.4.0, but get 501 Not Implemented when calling the devices endpoint with:
Am I doing something ...
eclipse-hono
asked Oct 6 at 15:22
bialad
7566 bronze badges
0
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.mongo.FindOptions;
import io.vertx.ext.mongo.IndexOptions;
import io.vertx.ext.mongo.MongoClient;
import io.vertx.ext.mongo.UpdateOptions;
/**
* An implementation of the tenant service and the tenant management service
* that uses a mongodb database to store tenants.
* <p>
* On startup this adapter tries to find the tenant collection, if not found, it gets created.
*
* @see <a href="https://www.eclipse.org/hono/docs/api/tenant/">Tenant API</a>
* @see <a href="https://www.eclipse.org/hono/docs/api/management/">Device Registry Management API</a>
*/
public final class MongoDbBasedTenantService implements TenantService, TenantManagementService, Lifecycle {
private static final Logger LOG = LoggerFactory.getLogger(MongoDbBasedTenantService.class);
private static final int INDEX_CREATION_MAX_RETRIES = 3;
private final MongoClient mongoClient;
private final MongoDbCallExecutor mongoDbCallExecutor;
private final MongoDbBasedTenantsConfigProperties config;
import org.eclipse.hono.util.Lifecycle;
import org.eclipse.hono.util.RegistryManagementConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.opentracing.Span;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.mongo.FindOptions;
import io.vertx.ext.mongo.IndexOptions;
import io.vertx.ext.mongo.MongoClient;
import io.vertx.ext.mongo.UpdateOptions;
/**
* This is an implementation of the credentials service and the credentials management service where data is
* stored in a mongodb database.
*
* @see <a href="https://www.eclipse.org/hono/docs/api/credentials/">Credentials API</a>
* @see <a href="https://www.eclipse.org/hono/docs/api/management/">Device Registry Management API</a>
*/
public final class MongoDbBasedCredentialsService extends AbstractCredentialsManagementService
implements CredentialsService, Lifecycle {
private static final Logger LOG = LoggerFactory.getLogger(MongoDbBasedCredentialsService.class);
Provide workaround for the fact that vertx jdbc doesn't support arrays (https://stackoverflow.com/a/42295098 for details)
Run SQLServer tests with TestContainers and official MS SQLServer Docker image
In addition, run PostgreSQL tests with TestContainer and postgres:12-alpine Docker image.
Add missing DDL for PostgreSQL
Fix failing tests for PostgreSQL. The similar workaround as used in SQLServer was needed for supporting arrays in queries.
Notice
SQLServer requires SelectMethod=Cursor in JDBC URL. This was needed to support the "SELECT ... FOR UPDATE" syntax used in JDBC device registry.
lhotari
requested review from
dejanb and
sophokles73
as
code owners
Nov 23, 2020
lhotari
added 15 commits
Nov 20, 2020
Include Microsoft SQLServer driver
…
cd74330
Signed-off-by: Lari Hotari <lari@hotari.net>
Port create table scripts to SQLServer syntax
and registering listeners for arbitrary life-cycle events of the connection.
In addition to this, several factory interfaces have been added which can be used
to create specific clients to Hono’s arbitrary services. All of the former HonoClient
interface’s factory methods have been distributed accordingly to:
org.eclipse.hono.client.ApplicationClientFactory for creating clients to
Hono’s north bound Telemetry, Event and Command & Control API.
org.eclipse.hono.client.DownstreamSenderFactory for creating clients to
Hono’s south bound Telemetry and Event APIs.
org.eclipse.hono.client.CommandConsumerFactory for creating clients to
Hono’s south bound Command & Control API.
org.eclipse.hono.client.TenantClientFactory for creating clients to
Hono’s Tenant API.
org.eclipse.hono.client.RegistrationClientFactory for creating clients to
Hono’s Device Registration API.
org.eclipse.hono.client.CredentialsClientFactory for creating clients to
Hono’s Credentials API.
In this context the org.eclipse.hono.client.MessageSender interface has been changed as follows:
The send methods have been changed to no longer accept a registration assertion token
which became obsolete with the removal of the Hono Messaging component.
The isRegistrationAssertionRequired method has been removed from the interface.
All send method variants which accept specific message parameters have been moved into
the new org.eclipse.hono.client.DownstreamSender interface which extends the existing
MessageSender.
Details
build (mongodb)
Details
eclipsefdn/eca
The author(s) of the pull request is covered by necessary legal agreements in order to proceed!
Details
1.5.0
automation
moved this from In progress
to Done
Oct 27, 2020
Copy link
Member
sophokles73
commented
Oct 27, 2020
@fkaltner thanks for your patience (and endurance) with this one 👍
fkaltner
mentioned this pull request
Oct 27, 2020
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
_
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
eclipse/hono - Gitter
eclipse/hono - Gitter
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
Eclipse IoTEclipse Kapua
Eclipse Ditto
Eclipse Kura
Eclipse Paho
Eclipse Californium (Cf) CoAP Framework
Project Hierarchy:Eclipse IoT
Eclipse Hono
Tags
Technology TypesInternet of Things
Build TechnologiesJenkins
Maven
Other Tagsmqtt m2m iot messaging amqp coap
Eclipse Foundation
About UsContact UsDonateMembersGovernanceCode of ConductLogo and ArtworkBoard of Directors
Legal
Privacy PolicyTerms of UseCopyright AgentEclipse Public LicenseLegal Resources
Useful Links
Report a BugDocumentationHow to ContributeMailing ListsForumsMarketplace
Other
IDE and ToolsProjectsWorking GroupsResearch@EclipseReport a VulnerabilityService Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
votes
1answer
40 views
How to replace default certificates on a cloud2edge instance?
I deployed a cloud2edge instance and now i want to replace the default certificates with other ones generated with the create_certs.sh script. According to the Hono documentation i can specify the ...
eclipse-hono
asked Aug 28 at 18:08
damian
322 bronze badges
0
votes
1answer
47 views
Accessing Eclipse Hono from a local network
We deployed Hono on a minikube cluster running on a virtual machine (CentOS 8). The load balancer is running and we can access and interact with Hono from within this virtual machine. However, we don'...
minikube eclipse-hono
asked Aug 27 at 13:07
Stefan Pfeifer
46355 silver badges1111 bronze badges
0
votes
1answer
69 views
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
/**
* Creates a new service for configuration properties.
*
* @param vertx The vert.x instance to run on.
* @param mongoClient The client for accessing the Mongo DB instance.
* @param config The properties for configuring this service.
*/
public MongoDbBasedTenantService(
final Vertx vertx,
final MongoClient mongoClient,
final MongoDbBasedTenantsConfigProperties config) {
Objects.requireNonNull(vertx);
Objects.requireNonNull(mongoClient);
Objects.requireNonNull(config);
this.mongoClient = mongoClient;
this.mongoDbCallExecutor = new MongoDbCallExecutor(vertx, mongoClient);
this.config = Objects.requireNonNull(config);
}
@Override
public Future<Void> start() {
// initialize indexes
return mongoDbCallExecutor.createCollectionIndex(
private static final String CREDENTIALS_FILTERED_POSITIONAL_OPERATOR = String.format("%s.$",
MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS);
private static final int INDEX_CREATION_MAX_RETRIES = 3;
private final MongoDbBasedCredentialsConfigProperties config;
private final MongoClient mongoClient;
private final MongoDbCallExecutor mongoDbCallExecutor;
/**
* Creates a new service for configuration properties.
*
* @param vertx The vert.x instance to run on.
* @param mongoClient The client for accessing the Mongo DB instance.
* @param config The properties for configuring this service.
* @param passwordEncoder The password encoder.
*/
public MongoDbBasedCredentialsService(
final Vertx vertx,
final MongoClient mongoClient,
final MongoDbBasedCredentialsConfigProperties config,
final HonoPasswordEncoder passwordEncoder) {
…
c7006c0
- CREATE TABLE table_name IF NOT EXISTS ->
IF OBJECT_ID('table_name', 'U') IS NULL
CREATE TABLE table_name
- BOOLEAN -> BIT
- TEXT -> NTEXT (for unicode support)
- TIMESTAMP -> DATETIME2
- CHAR/VARCHAR -> NVARCHAR
- support Unicode
- char -> varchar to get rid of issues with trailing spaces
Signed-off-by: Lari Hotari <lari@hotari.net>
Implement upsert queries for MS SQLServer
…
15aaf94
- using MERGE syntax,
https://docs.microsoft.com/en-us/sql/t-sql/statements/merge-transact-sql
Signed-off-by: Lari Hotari <lari@hotari.net>
Add possibility to test MS SQLServer with Testcontainers
…
60a7e51
Signed-off-by: Lari Hotari <lari@hotari.net>
Use java.sql.Timestamp when passing timestamp fields to vertx jdbc
Several changes have been made to the org.eclipse.hono.service.AbstractProtocolAdapterBase
class:
The newMessage and addProperties methods no longer require a boolean parameter indicating
whether to include the assertion token in the message being created/amended.
Custom protocol adapters should simply omit the corresponding parameter.
The base class now uses org.eclipse.hono.client.CommandConsumerFactory instead of
org.eclipse.hono.client.CommandConnection for creating
org.eclipse.hono.client.CommandConsumer instances.
The setCommandConnection and getCommandConnection methods have been
renamed to setCommandConsumerFactory and getCommandConsumerFactory
correspondingly.
The base class now uses org.eclipse.hono.client.TenantClientFactory instead of
org.eclipse.hono.client.HonoClient for creating org.eclipse.hono.client.TenantClient
instances.
The setTenantServiceClient and getTenantServiceClient methods have been
renamed to setTenantClientFactory and getTenantClientFactory correspondingly.
The base class now uses org.eclipse.hono.client.RegistrationClientFactory instead of
org.eclipse.hono.client.HonoClient for creating
org.eclipse.hono.client.RegistrationClient instances.
The setRegistrationServiceClient and getRegistrationServiceClient methods have been
renamed to setRegistrationClientFactory and getRegistrationClientFactory correspondingly.
The base class now uses org.eclipse.hono.client.CredentialsClientFactory instead of
#1960 status in device registration to constructor or not to constructor
#2243
Closed
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Reviewers
dejanb
ctron
sophokles73
kaniyan
Assignees
No one assigned
Labels
Device Registry
JDBC Device Registry
MongoDB Device Registry
Projects
1.5.0
Done
Milestone
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Eclipse Hono – Connecting large numbers of IoT devices
eclipse/hono - Gitter
packages/values.yaml at master · eclipse/packages · GitHub
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
java.io.EOFException (32109) when running Eclipse Paho simulator with example Hono client
I am using MQTT simulator script that uses the Java Eclipse Paho library. I did the device registration, set the device-id, tenant-id manually using the git bash terminal as per the instructions in ...
java mqtt paho eclipse-hono
asked Aug 26 at 3:12
nina
1777 bronze badges
0
votes
1answer
28 views
SunCertPathBuilderException when running HonoExampleApplication
I was following the steps in https://www.eclipse.org/hono/docs/dev-guide/java_client_consumer/ to start the example Hono client.
From the hono-client-examples folder I ran this command -
mvn exec:...
eclipse-hono
asked Aug 21 at 12:06
nina
1777 bronze badges
0
votes
1answer
68 views
Build error when building hono from source code - on project hono-adapter-amqp-vertx: Cannot create docker access object
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
config.getCollectionName(),
new JsonObject().put(
RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, 1),
new IndexOptions().unique(true), INDEX_CREATION_MAX_RETRIES)
// add unique index predicate for tenants with field of trusted-ca inside tenant object
// to ensure that no tenants have the same trusted-ca but only if trusted-ca exist
// to to deal with creating/updating tenants containing unique ids.
.compose(ok -> mongoDbCallExecutor.createCollectionIndex(
config.getCollectionName(),
new JsonObject().put(RegistryManagementConstants.FIELD_TENANT + "." +
RegistryManagementConstants.FIELD_PAYLOAD_TRUSTED_CA + "." +
RegistryManagementConstants.FIELD_PAYLOAD_SUBJECT_DN, 1),
new IndexOptions().unique(true)
.partialFilterExpression(new JsonObject().put(
RegistryManagementConstants.FIELD_TENANT + "." +
RegistryManagementConstants.FIELD_PAYLOAD_TRUSTED_CA,
new JsonObject().put("$exists", true))),
INDEX_CREATION_MAX_RETRIES))
.onSuccess(ok -> {
LOG.info("MongoDB Tenant service started");
super(Objects.requireNonNull(vertx),
Objects.requireNonNull(passwordEncoder),
config.getMaxBcryptCostFactor(),
config.getHashAlgorithmsWhitelist());
Objects.requireNonNull(mongoClient);
Objects.requireNonNull(config);
this.mongoClient = mongoClient;
this.config = config;
this.mongoDbCallExecutor = new MongoDbCallExecutor(vertx, mongoClient);
}
/**
*/
@Override
public Future<Void> start() {
return createIndices().onSuccess(ok -> {
LOG.info("MongoDB Credentials service started");
});
}
/**
*/
@Override
public Future<Void> stop() {
…
ce85e14
Signed-off-by: Lari Hotari <lari@hotari.net>
Configure support for "SELECT ... FOR UPDATE" in SQL Server JDBC driver
…
b87af69
Signed-off-by: Lari Hotari <lari@hotari.net>
Implement workaround for SQLServer since vertx jdbc doesn't support a…
…
70ff502
…rrays
- vertx jdbc doesn't support arrays, see https://stackoverflow.com/a/42295098
Signed-off-by: Lari Hotari <lari@hotari.net>
Fix bug in SQL statement
…
22e4a85
- remove extra comma
Signed-off-by: Lari Hotari <lari@hotari.net>
org.eclipse.hono.client.HonoClient for creating
org.eclipse.hono.client.CredentialsClient instances.
The setCredentialsServiceClient and getCredentialsServiceClient methods have been
renamed to setCredentialsClientFactory and getCredentialsClientFactory correspondingly.
The base class now uses org.eclipse.hono.client.DownstreamSendertFactory instead of
org.eclipse.hono.client.HonoClient for creating
org.eclipse.hono.client.DownstreamSender instances.
The setHonoMessagingClient and getHonoMessagingClient methods have been
renamed to setDownstreamSenderFactory and getDownstreamSenderFactory correspondingly.
The org.eclipse.hono.service.auth.device.UsernamePasswordAuthProvider and the
org.eclipse.hono.service.auth.device.X509AuthProvider now accept a
org.eclipse.hono.client.CredentialsClientFactory instead of a
org.eclipse.hono.client.HonoClient in their constructors.
The org.eclipse.hono.adapter.http.HonoBasicAuthHandler and
org.eclipse.hono.adapter.http.X509AuthHandler classes have been moved to
package org.eclipse.hono.service.http in the service-base module for
consistency reasons as all other reusable classes for implementing HTTP services/
adapters are located in that package already.
The org.eclipse.hono.client.HonoClient class has been renamed to
org.eclipse.hono.client.HonoConnection to better reflect its sole responsibility
for establishing (and maintaining) the connection to a Hono service endpoint.
Deprecations
The optional operations defined by the Tenant, Device Registration and Credentials API
1.5.0
Linked issues
Successfully merging this pull request may close these issues.
None yet
5 participants
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Add this suggestion to a batch that can be applied as a single commit.
Applying suggestions on deleted lines is not supported.
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
Subscribe
Find out first about new and important news
Subscribe
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
Share via email
Subscribe to blog alert
Developer
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
eclipse/hono - Gitter
eclipse/hono - Gitter
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
I was following the documentation here to build hono from source code - [1]: https://www.eclipse.org/hono/docs/dev-guide/building_hono/
But the build fails with this error -
[ERROR] Failed to execute ...
docker maven eclipse-hono
asked Aug 16 at 15:58
nina
1777 bronze badges
0
votes
1answer
26 views
Not able to install Eclipse Hono through Helm - error - failed to download "eclipse-iot/hono (hint: running `helm repo update may help)
I am trying to install Eclipse Hono using Helm and have the latest Helm version 3.3.0 installed in the system. I tried to follow the instructions from here - https://github.com/eclipse/packages/tree/...
eclipse-hono
asked Aug 14 at 12:41
nina
1777 bronze badges
0
votes
1answer
23 views
Deleting Credentials in Hono
Based on this swagger documentation(https://www.eclipse.org/hono/docs/api/management/#/credentials/setAllCredentials), there is currently no way to delete credentials in Hono. Credentials are deleted ...
});
}
@Override
public Future<Void> stop() {
this.mongoClient.close();
return Future.succeededFuture();
}
@Override
public Future<OperationResult<Void>> updateTenant(
final String tenantId,
final Tenant tenantObj,
final Optional<String> resourceVersion,
final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(tenantObj);
Objects.requireNonNull(resourceVersion);
Objects.requireNonNull(span);
return MongoDbDeviceRegistryUtils.isModificationEnabled(config)
.compose(ok -> processUpdateTenant(tenantId, tenantObj, resourceVersion, span))
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
private Future<OperationResult<Void>> processUpdateTenant(
mongoClient.close();
return Future.succeededFuture();
}
/**
*/
@Override
public Future<CredentialsResult<JsonObject>> get(
final String tenantId,
final String type,
final String authId,
final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(type);
Objects.requireNonNull(authId);
Objects.requireNonNull(span);
return processGetCredential(tenantId, type, authId, null);
}
/**
*/
Run SQLServer tests
…
85967d7
Signed-off-by: Lari Hotari <lari@hotari.net>
Run tests for Postgres with TestContainers
…
0377a17
Signed-off-by: Lari Hotari <lari@hotari.net>
Make it easy to change default db type temporarily in development
…
e50ca33
Signed-off-by: Lari Hotari <lari@hotari.net>
Add DDL scripts for Postgres
…
719a6e5
based on H2 DDL script, changes:
- char -> varchar to fix issue with trailing spaces
- use varchar(36) consistently for TENANT_ID
Signed-off-by: Lari Hotari <lari@hotari.net>
Run postgres tests
…
7840896
have been deprecated. They will be removed from Hono 1.0 altogether.
A new HTTP based API will be defined instead which can then be used to manage the content
of a device registry.
org.eclipse.hono.client.HonoConnection’s connect method variants accepting
a disconnect handler have been deprecated and will be removed in Hono 1.0.
Client code should use one of the other connect methods instead and register a
org.eclipse.hono.client.DisconnectListener and/or a
org.eclipse.hono.client.ReconnectListener to get notified about life-cycle
events of the underlying AMQP connection.
1.0-M1
New Features
The AMQP adapter now supports limiting the number of concurrent connections in order
to prevent Out of Memory errors. Please refer to
AMQP Adapter Configuration for details.
The org.eclipse.hono.client.AsyncCommandClient has been added to support the sending of
commands to devices and the receiving of responses in an asynchronous way. This can be used
to decouple the sender and receiver from each other.
The org.eclipse.hono.service.tenant.CompleteBaseTenantService class now rejects malformed
encodings of public keys/certificates included in a request to add a trust anchor to a tenant.
Deprecations
The HonoClient.closeCommandConsumer() method will be removed in Hono 1.0.
The CommandConsumer.close() method should be used instead.
0.9
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Eclipse Hono: Connect. Command. Control.
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
eclipse/hono - Gitter
Bosch IoT Suite
Eclipse Hono – Connecting large numbers of IoT devices
9 min
The value of an IoT solution often correlates directly to its ability to connect many different devices and integrate them into higher-level solutions. Although all solutions combine devices using a unique integration strategy, the reliable, secure, and scalable connection of devices is always crucial.
Connectivity is therefore best handled as a separate service, independent of a solution – and this is exactly what Eclipse Hono aims to accomplish.
Overview
Eclipse Hono is written entirely in Java. It also provides a uniform messaging infrastructure for IoT solutions. Eclipse Hono offers:
Dejan Bosanac
Senior Software Engineer @ Red Hat
Committer @ Eclipse Foundation / Apache Software Foundation
Follow Dejan on Twitter
a horizontally scalable microservice architecture
a design for container-based cloud environments (based on AMQP 1.0)
load protection for all microservices using AMQP 1.0 flow control
protocol adapters for different IoT protocols
handling of different communication patterns
a tenant-based security model, including authentication of device
Solutions integrated with Eclipse Hono are freed from the details of device connectivity, and can instead concentrate on providing business value.
IoT communication patterns and QoS
Most messages in IoT setups are usually telemetry messages: data flows from devices to solutions. Messages of this kind usually need not be guaranteed of reaching their destinations and can be handled especially efficiently because there are no acknowledgements involved (QoS “at most once”). A typical type of telemetry data is sensor data that is sent within short time frames.
Paolo Patierno
Principal Software Engineer @ Red Hat
Committer/Lead @ Eclipse Foundation
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
_
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
_
eclipse-hono
asked Aug 12 at 7:14
Erle Czar Mantos
311 bronze badge
0
votes
1answer
62 views
Eclipse Hono - ConnectTimeoutException when starting the Command Line Client in the terminal for sending commands
I am following the Eclipse Hono getting started guide and using the sandbox environment.
I opened git bash terminal and used this command for starting the device to receive commands:
mosquitto_sub -v -...
eclipse-hono
asked Aug 9 at 20:22
nina
1777 bronze badges
0
votes
1answer
94 views
Eclipse IoT Binding Hawkbit-Ditto-Hono
I am trying out Eclipse IoT Framework on my RP3.
On the host-side (local PC backend) I would like to bind Hawkbit with Ditto and at least Ditto with Hono. From here and here I can read that it is ...
eclipse-hono eclipse-ditto hawkbit eclipse-hawkbit
final String tenantId,
final Tenant newTenant,
final Optional<String> resourceVersion,
final Span span) {
final JsonObject updateTenantQuery = MongoDbDocumentBuilder.builder()
.withVersion(resourceVersion)
.withTenantId(tenantId)
.document();
final Promise<JsonObject> updateTenantPromise = Promise.promise();
final TenantDto newTenantDto = TenantDto.forUpdate(tenantId, newTenant, new Versioned<>(newTenant).getVersion());
mongoClient.findOneAndReplaceWithOptions(config.getCollectionName(), updateTenantQuery,
JsonObject.mapFrom(newTenantDto), new FindOptions(), new UpdateOptions().setReturningNewDocument(true),
updateTenantPromise);
return updateTenantPromise.future()
.compose(updateResult -> Optional.ofNullable(updateResult)
.map(updated -> {
span.log("successfully updated tenant");
return Future.succeededFuture(OperationResult.ok(
HttpURLConnection.HTTP_NO_CONTENT,
(Void) null,
Optional.empty(),
Optional.of(updateResult.getString(MongoDbDeviceRegistryUtils.FIELD_VERSION))));
@Override
public Future<CredentialsResult<JsonObject>> get(
final String tenantId,
final String type,
final String authId,
final JsonObject clientContext,
final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(type);
Objects.requireNonNull(authId);
Objects.requireNonNull(clientContext);
Objects.requireNonNull(span);
return processGetCredential(tenantId, type, authId, clientContext);
}
/**
*/
@Override
protected Future<OperationResult<Void>> processUpdateCredentials(
final DeviceKey deviceKey,
final Optional<String> resourceVersion,
final List<CommonCredential> updatedCredentials,
final Span span) {
Signed-off-by: Lari Hotari <lari@hotari.net>
Increase number of postgres connections
…
1ba7f5f
Signed-off-by: Lari Hotari <lari@hotari.net>
Pass array parameter as CSV string also for Postgres
…
Loading status checks…
9338a1e
Signed-off-by: Lari Hotari <lari@hotari.net>
lhotari
force-pushed the
lhotari:lh-sqlserver-support
branch
from
7a59f21
to
9338a1e
Nov 23, 2020
Fix checkstyle issues
…
Loading status checks…
New Features
The MQTT adapter now supports commands to be published using QoS 1. Please refer to
MQTT adapter User Guide for details.
The MQTT adapter now supports limiting the number of concurrent connections in order
to prevent running out of resources. Please refer to
MQTT Adapter Configuration for details.
The new Helm deployment for Kubernetes has been added. Please refer to
Helm based deployment guide for details.
Fixes & Enhancements
org.eclipse.hono.util.RequestResponseResult now provides access to AMQP application-properties conveyed in the
response message.
The org.eclipse.hono.service.registration.BaseRegistrationService class now supports authorization of gateways
(acting on behalf of a device) against a list of gateway identifiers instead of a single identifier only. For that purpose
the via property of the device’s registration information may contain either a single string or a JSON array containing
multiple strings. Based on this, a device can now be configured to connect via arbitrary gateways instead of just a single
one.
API Changes
The layout and structure of the metrics reported by Hono have been changed substantially. Many of the existing meters and tags
have been changed or replaced in order to provide a more consistent set of metrics and increase the value of the information
being reported. The legacy metrics still remain unchanged, though.
Please refer to the Metrics definition for details.
In case of a failed connection attempt, HonoClientImpl will now determine based on the error whether it will re-try
Accept
Reject
Save preferences
Scribd will begin operating the SlideShare business on December 1, 2020
As of this date, Scribd will manage your SlideShare account and any content you may have on SlideShare, and Scribd's General Terms of Use and Privacy Policy will apply. If you wish to opt out, please close your SlideShare account. Learn more.
SlideShare
Explore
Search
You
Upload
Login
Signup
Submit Search
Home
Explore
Successfully reported this slideshow.
We use your LinkedIn profile and activity data to personalize ads and to show you more relevant ads. You can change your ad preferences anytime.
Eclipse Hono: Connect. Command. Control.
Upcoming SlideShare
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
Follow Paolo on Twitter
Telemetry messages that absolutely must be delivered (QoS “at least once”) are called events, which are always acknowledged to the client and occur infrequently by comparison. Typical events include alarms that need a guarantee to reach the solution and must never be dropped.
The other direction is called command and control: data flows from solutions to devices. This addresses the control of actors, or in general messages initiated by the solution, and will be provided in future versions of Eclipse Hono (versions > 0.5).
Hono in production setups
Eclipse Hono defines APIs for all aspects of device connectivity:
Karsten Frank
Senior Software Developer @ Bosch.IO
Committer @ Eclipse Foundation
Spring Core 4.2 Certified Developer
Take a look at Karsten's GitHub page
sending and consuming message payloads for different communication patterns
handling of device identities and device credentials for secure communication
authentication of devices and microservices
Because the handling of device identities is assumed to be specific to a production setup, it is provided by a simple file-based implementation. Due to the use of Spring beans and the Vert.x event bus, this implementation can easily be substituted by a database implementation.
The same applies for the (file-based) authentication server, which may be replaced with other implementations.
Bird’s-eye architecture view
There are several different categories of Hono components:
Protocol adapters
Protocol adapters connect devices to Hono. Each covers a specific protocol and is responsible for the authentication of devices by querying the device registry.
Hono provides the following protocol adapters:
HTTP
MQTT
Eclipse Kura-based gateways
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
packages
Watch
14
Star
25
Fork
23
Code
Issues
8
Pull requests
5
eclipse/hono - Gitter
eclipse/hono - Gitter
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
_
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
asked Jul 23 at 10:43
arash javan
1,06822 gold badges1414 silver badges3232 bronze badges
0
votes
1answer
38 views
Do we need kubernetes instance to connect Eclipse Hono with Eclipse Ditto both running in sandbox environment?
I would like to know whether we need kubernetes cluster as required by cloud2edge package as mentioned in the link (https://www.eclipse.org/ditto/2018-05-02-connecting-ditto-hono.html) even if both ...
eclipse-hono eclipse-ditto
asked Jul 15 at 4:24
nja
6911 silver badge1010 bronze badges
0
votes
1answer
43 views
Problem installing Eclipse Hono - No resource found in hono namespace
We are having some trouble installing Eclipse Hono on CentOS 8. We are following the official getting started guide and it seems to be running, but the step to verify the installation keeps failing ...
eclipse-hono
asked Jul 13 at 15:05
Stefan Pfeifer
46355 silver badges1111 bronze badges
})
.orElseGet(() -> MongoDbDeviceRegistryUtils.checkForVersionMismatchAndFail(
tenantId, resourceVersion, findTenant(tenantId)))
)
.recover(error -> {
if (MongoDbDeviceRegistryUtils.isDuplicateKeyError(error)) {
LOG.debug(
"conflict updating tenant [{}]. An existing tenant uses a certificate authority with the same Subject DN",
tenantId,
error);
TracingHelper.logError(span,
"an existing tenant uses a certificate authority with the same Subject DN", error);
return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));
}
return Future.failedFuture(error);
});
}
@Override
public Future<Result<Void>> deleteTenant(final String tenantId, final Optional<String> resourceVersion,
final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(resourceVersion);
Objects.requireNonNull(deviceKey);
Objects.requireNonNull(resourceVersion);
Objects.requireNonNull(span);
TracingHelper.TAG_DEVICE_ID.set(span, deviceKey.getDeviceId());
return MongoDbDeviceRegistryUtils.isModificationEnabled(config)
.compose(ok -> {
final CredentialsDto updatedCredentialsDto = CredentialsDto.forUpdate(deviceKey.getTenantId(),
deviceKey.getDeviceId(),
updatedCredentials, DeviceRegistryUtils.getUniqueIdentifier());
if (updatedCredentialsDto.requiresMerging()) {
return getCredentialsDto(deviceKey, resourceVersion)
.map(updatedCredentialsDto::merge);
} else {
// simply replace the existing credentials with the
// updated ones provided by the client
return Future.succeededFuture(updatedCredentialsDto);
}
}).compose(credentialsDto -> {
2e01f13
Signed-off-by: Lari Hotari <lari@hotari.net>
lhotari
force-pushed the
lhotari:lh-sqlserver-support
branch
from
757c58e
to
2e01f13
Nov 23, 2020
sophokles73
requested a review
from ctron
Nov 23, 2020
sophokles73
assigned
ctron
Nov 23, 2020
Copy link
Contributor
kaniyan
to connect to the peer. Before, reconnect attempts were done unconditionally, by default infinitely or up to the
number of times defined in the reconnectAttempts property in the ClientConfigProperties. Now, when the outcome
of the SASL handshake received from the peer during connection establishment indicates that invalid credentials were
provided or that the server encountered a permanent error when handling the request, no further reconnect attempts
will be done.
The deprecated methods have been removed from org.eclipse.hono.client.MessageSender and
its implementations.
The Command & Control API’s send a request/response command operation has been changed. The response
message to a command now must include the device and tenant identifiers of the device. Including
these two properties should make it much easier to implement competing command response consumers
in business applications.
As a consequence, the org.eclipse.hono.client.CommandResponse’s factory methods have been changed to
accept the tenant and device IDs as parameters.
The connectTimeout configuration variable for the HonoClient now defines the time to wait not only for the TCP/TLS
connection establishment but also for the SASL handshake and the exchange of the AMQP open frame.
The (already deprecated) Hono Messaging component has been removed from Hono.
Deprecations
The script based deployment to Kubernetes has been deprecated and will be removed in the next version.
The Helm based deployment should be used instead.
The sendCommandResponse(String, String, Buffer, Map, int, SpanContext) of the
org.eclipse.hono.client.CommandResponseSender interface has been deprecated and
will be removed in the next version. Custom protocol adapters should use
sendCommandResponse(CommandResponse, SpanContext) instead.
Loading in …5
×
1
1 of 32
Like this presentation? Why not share!
Share
Email
Iot Conference Berlin M2M,IoT, devi...
by Julien Vermillard
9984 views
MQTT on the road
by Paolo Patierno
456 views
Eclipse Hono: Connect. Command. Con...
by Paolo Patierno
5065 views
Telemetry with Windows 10 IoT Core ...
by Paolo Patierno
9604 views
Reactive Internet of Things : the V...
by Paolo Patierno
6738 views
Eclipse Hono on Microsoft Azure · Issue #1120 · eclipse/hono · GitHub
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
Custom protocol adapters can be added by using the APIs of Hono Core.
Hono core
Hono core consists of:
the Device Registry, implementing
the registration and activation of devices belonging to a tenant
the provisioning of credentials for devices
the Auth Server, implementing
the construction of security tokens to support the authentication of a client
Hono Messaging, implementing
the messaging APIs for telemetry and event messages
verification of compliance with the APIs
the forwarding of messages to the AMQP 1.0 Network
AMQP 1.0 Network
The AMQP 1.0 Network decouples Hono’s core microservices from solution applications. It provides a scalable messaging infrastructure that supports different communication patterns with varying quality of service levels.
A few properties of the AMQP 1.0 messaging protocol make it an ideal candidate for this purpose.
First, this is one of very few messaging protocols that is truly symmetrical. It does not require a broker as an intermediary in the message exchange process. It supports both “store and forward” (brokered) and direct messaging communication patterns. The symmetrical nature of AMQP 1.0 allows Hono to use different communication semantics and different messaging components to handle various flows of messages.
The entry gateway into Hono’s AMQP messaging system is the Apache QPid Dispatch Router. It provides direct communication between producing and consuming endpoints. Unlike a broker, the router never takes ownership of messages; it instead simply passes AMQP packets between different endpoints. This means that, from a messaging perspective, the router is basically stateless. As such, it is much more vertically scalable than a message broker. In addition, it is far easier to scale it horizontally in a cloud environment – as we will see in a moment.
Another important feature of AMQP 1.0 is its flow control mechanism, which is implemented directly in the protocol. This means that consumers will, at every point, declare their capacity, or how many messages should be delivered to them. This information is propagated by the router, and producers of messages can be throttled to the speed of consumption.
It is now easy to see why Hono uses only routers to deliver telemetry messages to the solution tier. These messages typically exhibit a large volume, which requires scaling – but at the same time, we can afford to lose them if something goes wrong.
We have covered messaging needs for telemetry traffic. But what about events and command messages that require a genuine guarantee of delivery? Dispatch routers can be configured to “auto link” certain addresses to external AMQP 1.0 containers. In this way, we can route messages through the broker queue and provide “at least once” delivery guarantees for events and commands.
In the default deployment, Hono uses Apache ActiveMQ Artemis Broker. It provides a scalable AMQP 1.0 message broker; its queuing capabilities are used to store event messages.
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Actions
Projects
0
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Permalink
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
master
packages/charts/hono/values.yaml
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
17:18
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
_
Bob Claerhout
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
0
votes
1answer
18 views
Unable to register a tenant with X.509 based authentication in Hono
I am following this guide in order to authenticate devices with certificates, but when i run the following command i get 404 NOT FOUND (i am using the Hono sandbox):
curl -i -H 'Content-Type: ...
eclipse-hono
asked Jul 9 at 19:10
damian
322 bronze badges
0
votes
0answers
20 views
Grafana is not showing any update for eclipse-hono
I'm using Eclipse Hono, I've created a Tenant, and a device, and start to publish a data through MQTT and HTTP adapter, and i was able to consume it through the AMQP client.
I was trying to test the ...
eclipse-hono
asked Jun 13 at 12:47
Umar AlSammarraie
1
1
Objects.requireNonNull(span);
return MongoDbDeviceRegistryUtils.isModificationEnabled(config)
.compose(ok -> processDeleteTenant(tenantId, resourceVersion, span))
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
private Future<Result<Void>> processDeleteTenant(final String tenantId, final Optional<String> resourceVersion,
final Span span) {
final JsonObject deleteTenantQuery = MongoDbDocumentBuilder.builder()
.withVersion(resourceVersion)
.withTenantId(tenantId)
.document();
final Promise<JsonObject> deleteTenantPromise = Promise.promise();
mongoClient.findOneAndDelete(config.getCollectionName(), deleteTenantQuery, deleteTenantPromise);
return deleteTenantPromise.future()
.compose(tenantDtoResult -> Optional.ofNullable(tenantDtoResult)
.map(deleted -> {
span.log("successfully deleted tenant");
return Future.succeededFuture(Result.<Void> from(HttpURLConnection.HTTP_NO_CONTENT));
})
.orElseGet(() -> MongoDbDeviceRegistryUtils.checkForVersionMismatchAndFail(tenantId,
resourceVersion, findTenant(tenantId))));
credentialsDto.createMissingSecretIds();
return updateCredentials(
deviceKey,
resourceVersion,
JsonObject.mapFrom(credentialsDto),
span);
}).recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
/**
*/
@Override
protected Future<OperationResult<List<CommonCredential>>> processReadCredentials(
final DeviceKey deviceKey,
final Span span) {
Objects.requireNonNull(deviceKey);
Objects.requireNonNull(span);
return getCredentialsDto(deviceKey)
.map(credentialsDto -> OperationResult.ok(
HttpURLConnection.HTTP_OK,
credentialsDto.getCredentials(),
Optional.empty(),
Optional.of(credentialsDto.getVersion())))
commented
Nov 23, 2020
@lhotari Would you mind creating a separate PR for the last 2 commits (Include hono-service-device-registry-jdbc image in pushed images & tenantAdapterStore should use tenantsProperties().getAdapter())? One is a bug and the other extends the script also to push the JDBC device registry image to the Docker Hub. IMHO those can be separately reviewed and merged.
lhotari
force-pushed the
lhotari:lh-sqlserver-support
branch
from
5a6771b
to
2e01f13
Nov 23, 2020
lhotari
mentioned this pull request
Nov 23, 2020
tenantAdapterStore should use tenantsProperties().getAdapter()
#2321
Merged
Copy link
Contributor
Author
lhotari
0.9-M2
New Features
The MQTT protocol adapter now supports authentication of devices using X.509 client certificates. Please refer to
the MQTT adapter user guide for details regarding configuration.
Fixes & Enhancements
The OpenShift source-to-image (S2I) deployment is now the default
OpenShift / OKD deployment. The plain OpenShift deployment, which had been deprecated
in Hono 0.8, has been removed.
The protocol adapters can now be configured with a custom DNS timeout value, limiting the time that the adapter
will wait for the response to a DNS query. By default, a DNS query will time out after 5 seconds.
Please refer to the protocol adapter admin guides for details regarding the new configuration variable.
The following configuration variables have been added to HonoClient:
connectTimeout: Sets a limit on the time that the client will wait for a TCP/TLS connection with the peer
to be established. By default, a connection attempt will time out after 5 seconds.
idleTimeout: The idle timeout defines the amount of time after which a connection will be closed when no frames
have been received from the remote peer. The default value is 16 seconds.
sendMessageTimeout: Limits the time to wait for a downstream consumer’s acknowledgement of
an event or command response message received from a device. The default value is 1 second.
Please refer to the Hono Client Configuration guide
for details regarding the new configuration variables.
API Changes
Some of the tags used by Hono’s components when reporting metrics have been changed. The common tag component
has been renamed to component-type. The protocol tag formerly used by adapters to indicate the transport protocol
that a message has been received over, has been replaced by the generic component-name tag which indicates the name
MQTT on devices : geolocation in th...
by Paolo Patierno
3548 views
Share SlideShare
Facebook
Twitter
LinkedIn
Embed
Size (px)
Start on
Show related SlideShares at end
WordPress Shortcode
Link
Eclipse Hono: Connect. Command. Control.
3,887 views
Share
Like
Download
...
Paolo Patierno, Principal Software Engineer (Messaging & IoT) Red Hat
Follow
Published on Sep 22, 2017
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Of course, you can use any AMQP 1.0-compatible message broker for this. Or provide more scalable and more reliable solutions by using broker clusters and high-availability configurations. In addition, the default deployment of a single router and broker can be replaced with a scalable AMQP 1.0 cloud messaging platform – such as the one described later in this article.
Solution tier
All solutions connect to the AMQP 1.0 network and receive messages from the messaging endpoints.
/telemetry/<tenant>/<device>
or
/event/<tenant>/<device>
They do not themselves need to integrate specific IoT protocols and benefit from the flow control of the AMQP 1.0 network.
The User Guide portrays examples of how to write solutions.
Monitoring infrastructure
Hono Messaging and the protocol adapters report different kinds of metrics to an InfluxDB, which can be viewed using the Grafana dashboards provided. Please refer to Getting Started for details.
APIs and their endpoints
Hono’s internal APIs are defined as AMQP 1.0 endpoints:
Protocol adapters use Hono’s internal APIs to:
authenticate the device using the Credentials API
check the status of the device using the Registration API
forward device messages to the AMQP network using the Telemetry or Event API
As with the AMQP 1.0 network, flow control also enables the load protection regarding devices.
The Device Registry also implements RESTful variants of the Registration APIs and the Credentials APIs in order to support the administration of devices. This leverages the use of CLI tools like curl and simplifies implementation of a complex Device Operations Console (which is not part of Hono itself).
Deployment options
All microservices are built as Docker images and are available on Docker Hub. The following container management systems are supported based on the Docker images:
Kubernetes
OpenShift
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
Release of new MongoDB based device registry in Eclipse Hono
Using multi-tenancy in Eclipse Hono - Bosch ConnectedWorld Blog
X.509 based device authentication in Eclipse Hono
Go to file
Go to file
T
Go to line
L
Copy path
Cannot retrieve contributors at this time
executable file
1234 lines (1127 sloc)
50.6 KB
Raw
Blame
#
# Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
_
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
vote
1answer
47 views
How to know the connections number of MQTT adapter?
We want to do a performance test on Hono to verify that it supports 12000 device connections (MQTT), but I can't find the number of device connections in grafana's dashboard. I also checked the ...
eclipse-hono
asked Jun 9 at 7:55
Gong Zhao
1322 bronze badges
0
votes
1answer
22 views
Does Eclipse Hono crypto comply with FIPS 140-2?
What crypto library does Eclipse Hono use by default and is it FIPS 140-2 validated. If not is there a way to build it with a crypto library that is?
eclipse-hono
asked May 22 at 1:05
gh-tera
1
0
votes
0answers
}
@Override
public Future<TenantResult<JsonObject>> get(final String tenantId) {
return get(tenantId, NoopSpan.INSTANCE);
}
@Override
public Future<TenantResult<JsonObject>> get(final String tenantId, final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(span);
return readTenant(tenantId, span)
.compose(tenantDtoResult -> {
if (tenantDtoResult.getStatus() != HttpURLConnection.HTTP_OK) {
TracingHelper.logError(span, "tenant not found");
return Future.succeededFuture(TenantResult.from(HttpURLConnection.HTTP_NOT_FOUND));
}
return Future.succeededFuture(TenantResult.from(
HttpURLConnection.HTTP_OK,
DeviceRegistryUtils
.convertTenant(tenantId, tenantDtoResult.getPayload(), true),
DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge())));
});
}
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
/**
* Adds credentials for the given device.
*
* @param tenantId the id of the tenant which the device belongs to.
* @param deviceId the id of the device that is deleted.
* @param credentials A list of credentials.
* @param resourceVersion The identifier of the resource version to update.
* @param span The active OpenTracing span for this operation.
* @return A future indicating the outcome of the operation. The <em>status</em> will be
* <ul>
* <li><em>201 No Content</em> if the credentials have been created successfully.</li>
* </ul>
*/
public Future<Result<Void>> addCredentials(
final String tenantId,
final String deviceId,
final List<CommonCredential> credentials,
final Optional<String> resourceVersion,
final Span span) {
Objects.requireNonNull(tenantId);
commented
Nov 23, 2020
•
edited
Would you mind creating a separate PR for the last 2 commits (Include hono-service-device-registry-jdbc image in pushed images & tenantAdapterStore should use tenantsProperties().getAdapter())? One is a bug and the other extends the script also to push the JDBC device registry image to the Docker Hub. IMHO those can be separately reviewed and merged.
@kaniyan thanks for the feedback. I moved those commits out to new PRs #2321 and #2322 as you have suggested.
lhotari
mentioned this pull request
Nov 23, 2020
[hono] Add support for JDBC device registry
eclipse/packages#164
Open
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Reviewers
dejanb
ctron
sophokles73
Assignees
of the component that a metric has been reported by. Please refer to the Metrics API
for details. Note that these changes do not affect the legacy Graphite based metrics back end.
Deprecations
The Hono Messaging component is now deprecated and will be removed from Hono in version 0.9 altogether.
The example deployment has not been using Hono Messaging since 0.6 and there is no practical reason for
using it anymore.
0.9-M1
New Features
The default Micrometer back end is now Prometheus, the Grafana dash boards have been updated
to retrieve data from Prometheus instead of the old InfluxDB.
The Graphite based legacy metrics format can still be used but requires building Hono from source and activating
the metrics-graphite Maven build profile.
Please refer to the Monitoring admin guide for details.
The org.eclipse.hono.service.credentials.CompleteBaseCredentialsService class now supports the transparent
on-the-fly hashing of clear text passwords contained in hashed-password credentials. Please refer to the
Device Registry user guide for details.
Fixes & Enhancements
Session at Eclipse Day Milan 2017 Eclipse Hono: Connect. Command. Control. The open source counterpart to closed and proprietary IoT solutions is called Hono ! Born out of the collaboration of big companies, including Red Hat and Bosch both members of the Eclipse Foundation, Hono is an open source framework which aims to add features, such as device management and authentication, on top of an highly scalable messaging infrastructure in order to guarantee secured data exchange between devices and cloud applications. Using its APIs, devices can send data (telemetry and event) and can be controlled remotely (command/control). During this session we will see the “bricks” that make its architecture, the exposed APIs and the integration with other solutions.
...
Published in:
Software
5 Comments
3 Likes
Statistics
Notes
Full Name
Comment goes here.
12 hours ago
Delete
Reply
eclipse/hono - Gitter
Component View :: Eclipse Hono™
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
Docker Swarm
Deployments can be executed either on premise or hosted in a public cloud. On premise deployments work well for a small number of devices or test setups; a public cloud deployment is better for large installations that can scale dynamically per number of connected devices.
You can set up Hono yourself or use the sandbox deployment, which is accessible at hono.eclipse.org. The following steps assume you have Hono running locally:
Register a device by using the REST API of the device registry
Start a consumer; refer to Getting Started for details.
Upload data using the HTTP adapter.
Observe the consumer receiving the data.
Scale it up!
Hono is fundamentally designed for horizontal scalability. This is reflected in its microservices architecture:
protocol adapters can be scaled independently from the messaging infrastructure itself.
solutions are decoupled from Hono by the AMQP 1.0 network layer, which can be scaled independently from Hono itself.
the device registry is separated from the messaging components and, consequently, can be scaled independently as well.
You can use the scaling strategy of your container management system to scale the microservices you need. The internally used AMQP 1.0 protocol is designed for scalability and very large networks.
EnMasse – the elastic messaging infrastructure
Because Eclipse Hono is not itself a messaging system, it needs an underlying messaging infrastructure to work. Messages are exchanged between all internal components and sent from external devices to and from business applications. We refer to this type of infrastructure as the “AMQP 1.0 Network” in the overall Eclipse Hono architecture. As noted elsewhere, the off-the-shelf solution consists of the Qpid Dispatch Router and the ActiveMQ Artemis Broker.
The Eclipse Hono architecture was designed and developed in such a way that the underlying messaging infrastructure can be modified – provided that it is based on AMQP 1.0. This means you can use RabbitMQ with the AMQP 1.0 plugin, for example, or any other messaging broker implementing the AMQP 1.0 protocol.
Big numbers? We need elasticity!
When it comes to supporting a large number of connected devices and high throughput in terms of exchanged messages, the “single router, single broker” solution has its limits.
The messaging infrastructure needs to grow, and the scalability becomes the most important criterion for allowing Eclipse Hono to handle devices and consumers as well as the tremendous traffic associated with them.
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Subscribe
Find out first about new and important news
Subscribe
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
Share via email
Subscribe to blog alert
Developer
Subscribe
Find out first about new and important news
Subscribe
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
Share via email
Subscribe to blog alert
Subscribe
Find out first about new and important news
Subscribe
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
About
Authors
Career
Imprint
Legal Note
Cookies
Privacy Statement
Privacy Settings
Share via email
Subscribe to blog alert
#
# Default values for eclipse-hono.
# Declare variables to be passed into your templates.
# honoImagesTag contains the (common) tag name of the Hono component
# container images to deploy.
# If not set explicitly, the chart's appVersion is used as the tag name.
# Alternatively, the tag name can also be set per component image.
# honoImagesTag:
# honoContainerRegistry contains the name of the container registry that
# the container images for Hono's components should be pulled from.
# The registry can also be set separately for each component, overriding
# the value specified here.
honoContainerRegistry: index.docker.io
amqpMessagingNetworkExample:
# enabled indicates whether the example AMQP Messaging Network
# consisting of a single Dispatch Router and Broker should be
# deployed and used. By default an internal Broker is deployed.
# As alternative an external Broker can be configured as well.
enabled: true
# dispatchRouter contains properties for configuring the QPid Dispatch Router
dispatchRouter:
# imageName contains the name (including tag) of the container image
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Florian Kaltner
enabled: false
_
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
_
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
_
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
15 views
Eclilpse Hono: Support of JWT for authentication
Currently, Eclipse Hono supports authentication mechanisms like username/password and X.509 client certificates for IoT devices. This means that one has to find a way how to bring these credentials on ...
iot eclipse-hono
asked Apr 8 at 8:02
Wolfgang Klenk
1
1
vote
1answer
83 views
Eclipse Hono 1.1.1 Installed using Kubernetes - Probelm in Creating a Tenant
I have installed Eclipse Hono 1.1.1 Kubernetic cluster using Helm as per the below instructions.
https://hub.helm.sh/charts/eclipse-iot/hono
Initially I tried to create a tenant using the below ...
kubernetes kubernetes-helm eclipse-hono
asked Mar 23 at 0:31
VigKam
47455 silver badges1616 bronze badges
1
vote
1answer
35 views
@Override
public Future<TenantResult<JsonObject>> get(final X500Principal subjectDn) {
return get(subjectDn, NoopSpan.INSTANCE);
}
@Override
public Future<TenantResult<JsonObject>> get(final X500Principal subjectDn, final Span span) {
Objects.requireNonNull(subjectDn);
Objects.requireNonNull(span);
return findTenant(subjectDn)
.compose(tenantDtoResult -> Future.succeededFuture(TenantResult.from(
HttpURLConnection.HTTP_OK,
DeviceRegistryUtils.convertTenant(tenantDtoResult.getTenantId(),
tenantDtoResult.getData(), true),
DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge()))))
.recover(error -> {
TracingHelper.logError(span, "no tenant found for subject DN", error);
return Future.succeededFuture(TenantResult.from(HttpURLConnection.HTTP_NOT_FOUND));
});
}
Objects.requireNonNull(deviceId);
Objects.requireNonNull(credentials);
Objects.requireNonNull(resourceVersion);
Objects.requireNonNull(span);
TracingHelper.TAG_DEVICE_ID.set(span, deviceId);
return processAddCredentials(tenantId, deviceId, credentials, resourceVersion, span)
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
/**
* Removes all the credentials for the given device.
*
* @param tenantId the id of the tenant which the device belongs to.
* @param deviceId the id of the device that is deleted.
* @param span The active OpenTracing span for this operation.
* @return A future indicating the outcome of the operation. The <em>status</em> will be
* <ul>
* <li><em>204 No Content</em> if the credentials have been removed successfully.</li>
* <li><em>404 Not Found</em> if no credentials are available for the given device.</li>
* </ul>
*/
public Future<Result<Void>> removeCredentials(
ctron
Labels
None yet
Projects
None yet
Milestone
No milestone
Linked issues
Successfully merging this pull request may close these issues.
None yet
3 participants
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Add this suggestion to a batch that can be applied as a single commit.
Applying suggestions on deleted lines is not supported.
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
The base classes for implementing the Device Registration and Tenant APIs have been instrumented
with OpenTracing. New variants of the RegistrationService.assertRegistration, TenantService.get and CredentialsService.get
methods have been added which also accept an OpenTracing span as a parameter.
The default implementations of these methods still default to the previously existing methods.
In RegistrationService implementations based on BaseRegistrationService an OpenTracing span will be created,
passed on to the assertRegistration method and finished eventually. The same applies to TenantService implementations
based on BaseTenantService concerning the get method and to CredentialsService implementations based on
BaseCredentialsService concerning the get method.
API Changes
The org.eclipse.hono.service.credentials.CompleteBaseCredentialsService class now requires an
org.eclipse.hono.auth.HonoPasswordEncoder to be passed into its constructor.
The org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder has been added as a default implementation for
this purpose.
The Tenant API now optionally allows specifying an
X.509 certificate instead of a public key when defining a trusted CA.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Block
Are you sure you want to
Yes
No
Your message goes here
Post
Login to see the comments
Salvatore Sannino
2 years ago
Arthur Kennedy Otieno
,
Student at Dedan Kimathi University
at
Gearbox Kenya
3 years ago
Donato Marrazzo
3 years ago
No Downloads
Views
Total views
3,887
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
97
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
A major problem in this case is deployment. How can we deploy the messaging infrastructure simply, without having to address the related complexity? Besides scalability, you also need high availability and resiliency.
In short, your messaging infrastructure needs to be elastic so it can support spikes in the numbers of connected devices and traffic generated, so that computational resources are then used productively. It would be a waste to run too many AMQP 1.0 brokers for a low number of devices and for low traffic. At the same time, such an infrastructure needs to grow as numbers increase. As that can change frequently, you need elasticity.
The answer? The EnMasse project!
How to address all the challenges mentioned above? The EnMasse project comes to the rescue!
EnMasse is an open source “messaging as a service” platform which simplifies the deployment of a messaging infrastructure both “on premise” and in the cloud. It provides the scalability and elasticity needed to support the messaging requirements for IoT use cases.
Moreover, EnMasse supports all common messaging patterns (request/reply, publish/subscribe, and competing consumers) and two main protocols: AMQP 1.0 and MQTT. Adding HTTP support is on the roadmap.
EnMasse provides multi-tenancy, meaning that different tenants can share the same infrastructure – but are isolated from each other. Finally, it provides security with respect to securing connections using TLS, but also authenticating clients using Keycloak as the identity management system.
Another aspect that makes EnMasse appealing to use with Eclipse Hono: it is completely containerized and runs on key container orchestration platforms such as Kubernetes, Docker Swarm, and OpenShift. It is an excellent complement to Hono’s microservice architecture and deployment models portrayed in preceding paragraphs.
As you can see, EnMasse offers all the features needed to be the messaging infrastructure that supports Eclipse Hono. It is easy to deploy both together in OpenShift; you can find more information on that in the step-by-step guide.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
_
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
Bosch IoT Suite
Release of new MongoDB based device registry in Eclipse Hono
Kartheeswaran Kalidass
3 min
Eclipse Hono as described in its official site, is an IoT connectivity platform that provides a unified API for connecting large number of IoT devices to a backend irrespective of the various communication protocols used by the devices. Hono offers out of the box support for devices communicating via protocols such as AMQP, COAP, HTTP and MQTT. Eclipse Hono comprises of several microservices, which are packaged as Docker containers and deployed in a container-orchestration system like Kubernetes.
The device registry is one among those components, where Hono keeps track of all its tenants, devices and device credentials. It is crucial to Hono as the protocol adapters uses the device registry to verify if a tenant and device are registered and enabled. In addition to that, the protocol adapters use the device registry to authenticate devices before accepting any telemetry, event or command response messages. The device registry also implements HTTP based device management APIs to manage the storage of tenants, devices and credentials information.
Until version 1.3.0, Hono offered only one device registry implementation, which used the underlying local file system to persist the data. This file based device registry served well its purpose as a demo device registry. However, it is not intended to use in production environments, as the components cannot easily be scaled out horizontally. Hence, the users had to implement their own device registry to use Hono in production setups. With the release of Hono 1.3.0, this has been take care of and you do not need to implement your own device registry to use Hono in production environments.
New MongoDB based device registry
Now Hono offers one more device registry implementation, which uses a MongoDB database to persist the data. Unlike the file based counterpart, this MongoDB based device registry is intended to be used in production and as well as in demo setups. It stores tenants, devices and credentials information in separate collections in the underlying MongoDB database. MongoDB supports scaling out horizontally using techniques such as sharding and data distribution. There by this registry can leverage the MongoDB’s scalability to scale out itself without any difficulties.
In addition, you can easily secure the HTTP endpoints in the MongoDB device registry using basic authentication mechanism. It means that the clients need to authenticate with the MongoDB based device registry by supplying a user name and password in order to manage tenants, devices and credentials. You can turn on or off the authentication mechanism by setting the configuration property hono.registry.http.authenticationRequired to true or false. For more information on how to configure the MongoDB based device registry, please take a look at MongoDB based Device Registry configuration.
Install Eclipse Hono with MongoDB device registry using helm chart
The Eclipse IoT packages repository hosts helm charts, which you can use to install Hono in a Kubernetes cluster. By default, Hono’s helm chart deploys the file based device registry. I will show you how to install Hono with the MongoDB based device registry using Hono’s helm chart. I assume that you already have a running Kubernetes cluster.
The first step is to add the eclipse IoT packages chart repository using the below command. This command adds the repository using the name eclipse-iot.
$ helm repo add eclipse-iot https://eclipse.org/packages/charts
Now use the below command to deploy Hono with the MongoDB based device registry to the namespace hono.
$ helm install --set deviceRegistryExample.type=mongodb,mongodb.createInstance=true --dependency-update -n hono eclipse-hono eclipse-iot/hono
As you can see above, I have set the value for the property deviceRegistryExample.type to mongodb. This configures the chart to deploy the MongoDB based registry instead of the default file based registry.
In the above command, I have set the property mongodb.createInstance to true. The default value is false and if it is set to true, then the chart deploys a new MongoDB database instance as a separate micro service and uses that database instance to store the device registry data. If you prefer to use an already existing MongoDB database instance and not to create a new instance, then set mongodb.createInstance to false. In that case, make use of the below MongoDB connection configuration properties to point to the already existing MongoDB database.
Developer
Bosch IoT Suite
Using multi-tenancy in Eclipse Hono
Kai Hudalla
4 min
Most business applications in the Internet of Things work with data produced by devices that are connected to the application over public Internet infrastructure. The Eclipse Hono project can be leveraged by such applications to abstract away the particular communication protocols used by the devices, thus allowing the application to ingest data published by devices using a uniform AMQP 1.0 based API. You can find an overview of Hono’s features and capabilities in a previous blog post. With Hono 0.6-M2 having been published just recently, it is time to take a closer look at its new multi-tenancy capabilities.
Ensuring Data Privacy
Hono allows devices to be grouped into tenants. A tenant may represent any kind of organizational or technical domain that the devices are part of. Each device must be assigned to exactly one tenant. The diagram below shows the relationship between tenants and devices.
Source: http://yuml.me/54e46552.png
Tenants and Devices
Examples of tenants include:
a customer
an application
devices of a particular type (e.g. temperature sensors)
Once assigned, Hono makes sure that data produced by devices of a particular tenant can only be consumed by clients that have been explicitly authorized for that tenant. Because the data is kept private to each tenant, it makes a lot of sense to set up a single, highly scalable Hono installation in a cloud environment, making efficient use of computing and networking resources while sharing the operating costs between the tenants.
In the remainder of this blog post we will walk through an example of how to set up multiple tenants in Hono, register devices with these tenants, and consume data produced by the devices securely and privately.
Hono Sandbox
Instead of installing Hono on your local computer, we will use the Hono sandbox provided by the Eclipse Foundation.
The sandbox is specifically intended to be used for experimenting and testing purposes. It comes with a simple Device Registry component which exposes an HTTP based API for managing tenants, devices and credentials.
When a device connects to one of Hono’s protocol adapters in order to publish data, Hono authenticates the device and verifies its registration status by means of information retrieved from the Device Registry.
Adding Tenants
Developer
Internet of Things
IoT career
X.509 based device authentication in Eclipse Hono
Kai Hudalla
3 min
During the last few months, the media has been full of reports about insecure IoT devices that did not fulfill even the most basic security requirements. One of the concerns raised was the confidentiality of data being transferred from devices to cloud services provided by the manufacturers. In many cases, data is sent over public networks fully unencrypted, which is quite surprising, given that all of the popular TCP/IP-based transport protocols used in today’s IoT devices (e.g., HTTP and MQTT) support the negotiation and use of a secure (encrypted) transport channel by means of Transport Layer Security (TLS).
Eclipse Hono has supported the use of TLS in its HTTP and MQTT protocol adapters from the very beginning. The recently released 0.9-M2 milestone has added support for the authentication of devices using an X.509 client certificate as part of the TLS handshake for both the HTTP and the MQTT adapter. This allows devices to use a private/public key pair instead of a username and password for authenticating themselves to the protocol adapters.
Calling all developers
Europe's largest IoT hackathon returns to Berlin on May 14-15, 2019. Join more than 700 developers in various domain-specific hack challenges to hack, play, learn, have fun, and make new friends from all over the world!
Join the IoT hackathon
In this blog post I will walk you through a full example of how to create and register a tenant-specific trust anchor, create a certificate for a device, register its subject distinguished name and, finally, use the certificate to authenticate the device to Hono’s MQTT protocol adapter. In the remainder of this post, I will assume that you have a general understanding of RSA-based cryptography and, in particular, the roles played by private and public keys. For reference, RFC 5280 defines all the technical details of X.509.
Why client certificates?
When employing passwords for authenticating devices, the password of each device needs to be registered with Hono’s Credentials service so the protocol adapters can compare the password presented by the device during authentication with the password’s hash on record.
One of the advantages of using client certificates for authenticating devices is that it is no longer necessary to register individual secrets (passwords) for devices with Hono. Instead, it is enough to register a single trust anchor for a tenant which can then be used to verify the identity of all devices belonging to the tenant as part of the TLS handshake. In order for this to work, the client certificates used by the devices must contain a digital signature which can be validated using the public key that serves as the tenant’s trust anchor.
Create a tenant certificate authority
The first step, therefore, is to create the tenant’s public/private key pair that will be used to sign the client certificate(s) used by the tenant’s devices.
$ openssl genrsa -out tenant-key.pem 4096
$ openssl req -x509 -key tenant-key.pem -out tenant-cert.pem -days 365 -subj "/O=ACME Inc./CN=Sensors"
The subject distinguished name set using the `-subj` parameter may contain any valid X.500 distinguished name. However, in order to keep things simple you should refrain from using any attribute types apart from `CN`, `L`, `ST`, `O`, `OU`, `C`, `STREET`, `DC`, `UID`.
Register the tenant
# to use for the example AMQP Messaging Network's Dispatch Router.
imageName: quay.io/interconnectedcloud/qdrouterd:1.12.0
# certFile contains the absolute path to a PEM file containing
# the X.509 certificate that the router should use for authenticating
# to clients
certFile: "/etc/hono/qdrouter-cert.pem"
# keyFile contains the absolute path to a PEM file containing
# the private key that the router should use for authenticating
# to clients
keyFile: "/etc/hono/qdrouter-key.pem"
# trustStore contains the absolute path to a PEM file containing
# the X.509 certificates that the router should use as trust anchors
# when authenticating clients connecting to the router in a TLS
# handshake
trustStore: "/etc/hono/trusted-certs.pem"
# serverTrustStore contains the absolute path to a PEM file containing
# the X.509 certificates that the router should use as trust anchors
# when authenticating to servers as part of a TLS handshake
serverTrustStore: "/etc/hono/trusted-certs.pem"
# uidFormat contains the format string to use for extracting the user ID from
# the subject DN of certificates that clients use for authenticating to the router's
# "internal" listener.
# See http://qpid.apache.org/releases/qpid-dispatch-1.10.0/man/qdrouterd.conf.html
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
@fkaltner
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
_
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
_
Kai Hudalla
@sophokles73
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
Eclipse Hono - 404 Error while creating a Tenant
I am using the command as shown in the below documentation to create a Tenant in Hono.
https://www.eclipse.org/hono/docs/api/management/#/tenants/createTenantWithId
curl -X POST "http://srvgal89....
eclipse-hono eclipse-iot
asked Mar 21 at 3:09
VigKam
47455 silver badges1616 bronze badges
1
vote
1answer
36 views
Eclipse Hono - Installation (Version 1.1.1)
I am not sure on the exact instructions to install Hono 1.1.1 locally. Following the documentation , I was able to build the project with maven but I am not sure on how to proceed.
I was using ...
eclipse-hono eclipse-iot
asked Mar 20 at 4:04
VigKam
47455 silver badges1616 bronze badges
0
votes
1answer
34 views
@Override
public Future<OperationResult<Tenant>> readTenant(final String tenantId, final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(span);
return processReadTenant(tenantId)
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
private Future<OperationResult<Tenant>> processReadTenant(final String tenantId) {
return findTenant(tenantId)
.compose(tenantDtoResult -> Future.succeededFuture(OperationResult.ok(
HttpURLConnection.HTTP_OK,
tenantDtoResult.getData(),
Optional.ofNullable(DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge())),
Optional.ofNullable(tenantDtoResult.getVersion()))));
}
/**
* Gets a tenant dto by tenant id.
*
* @param tenantId the tenant id.
final String tenantId,
final String deviceId,
final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(deviceId);
Objects.requireNonNull(span);
TracingHelper.TAG_DEVICE_ID.set(span, deviceId);
return processRemoveCredentials(tenantId, deviceId, span)
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
private Future<Void> createIndices() {
final String authIdKey = String.format("%s.%s", MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS,
RegistryManagementConstants.FIELD_AUTH_ID);
final String credentialsTypeKey = String.format("%s.%s", MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS,
RegistryManagementConstants.FIELD_TYPE);
// index based on tenantId & deviceId
return mongoDbCallExecutor.createCollectionIndex(
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by Bootstrapious.
Ported to Hugo by DevCows
On SlideShare
0
From Embeds
0
Number of Embeds
2,443
Actions
Shares
0
Downloads
41
Comments
5
Likes
3
No notes for slide
Eclipse Hono: Connect. Command. Control.
1.
Eclipse Hono. Connect. Command. Control.
Connect and control your IoT devices
Paolo Patierno
Senior Software Engineer @ Red Hat
22/09/2017
2.
Device Registry Management API Specification :: Eclipse Hono™
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
16:17
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
_
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
_
Karthees Kalidass
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
Conclusion and outlook
This article covers the basics of the Eclipse Hono project as well as describes its APIs, architecture, and deployment options. There are many things still to come in this field. The Telemetry and Event APIs we described are only the first that have been implemented. Next on our to-do list: the Command and Control and Tenant APIs.
The Command and Control API will provide a way for business applications to reliably send commands to the devices. The Tenant API will provide platform operators with the resources necessary for managing tenants (accounts).
We will also improve the EnMasse integration, particularly as regards shared security models and scalability testing.
We hope that we have increased your interest in IoT connectivity in general and the Eclipse Hono project in particular. We have a lot planned, and hope to see you in the community!
Links and References
Do you want to take a deeper dive into Eclipse Hono. Visit their website!
More information on Eclipse Hono
Get all the specifications of version 1.0 of AMQP.
Specifications of AMQP 1.0
The Apache Qpid Dispatch Router is high-performance, lightweight AMQP 1.0 message router. Learn all about it.
Apache Qpid Dispatch Router
The Apache ActiveMQ Artemis has a proven non blocking architecture and delivers outstanding performance. Take a look.
Apache Active MQ Artemis
EnMasse is an open source messaging platform, with focus on scalability and performance. Their website provides everything that is worth knowing.
More information on EnMasse
A tool-kit for building reactive applications on the JVM. Check out Eclipse Vert.x.
Get to know Eclipse Vert.x
Get to know OpenShift Origin - the open source container application platform.
More on OpenShift
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
mongodb:
host: # The host name or IP address of the MongoDB instance.
port: # The port that the MongoDB instance is listening on.
dbName: # The name of the MongoDB database to be used by the device registry application.
username: # The user name to use for authenticating to the MongoDB instance.
password: # The password to use for authenticating to the MongoDB instance.
With the above steps, by now you should have already installed Hono with the MongoDB based device registry in the given Kubernetes cluster. You can also verify the installation. For more information on how to verify the installation, please refer to the README page of Hono’s helm chart.
More on Eclipse
Visit the official website of Eclipse Hono.
Eclipse Hono website
Check out Eclipse IoT on GitHub.
Eclipse IoT on GitHub
Take a look at this introduction, to learn what Eclipse Hono is all about.
Read the blog post
Recommended for you
Developer
Eclipse Ditto 1.0: A framework for digital twin builders
We are thrilled to introduce Eclipse Ditto 1.0.
Thomas Jäckle
4 min
Bosch IoT Suite
If Bosch can do it, you can do it too
Each tenant is required to have a unique identifier. The identifier is a string of arbitrary length.
We will use the following command to add a new tenant using acme-corporation as the identifier. Please make sure to pick another (non-existing) identifier when following the example. Otherwise the command will fail with a 409 Conflict, indicating that a tenant with that identifier already exists.
HTTP/1.1 201 Created
Location: /tenant/acme-corporation
Content-Length: 0
In the same way, another tenant can be created:
HTTP/1.1 201 Created
Location: /tenant/foo-bar-corporation
Content-Length: 0
Registering Devices
Having created the tenants, the next step is to register the devices. Similar to a tenant, a device must have an identifier which is unique within the tenant that it is registered with. The following examples register one device with each of the tenants created above.
You can either use the same device identifiers shown in the code snippets below or create your own identifiers. Just make sure that you are using the same device identifiers when you set the devices’ credentials as described in the next section.
Registering device acme-1 with tenant acme-corporation:
HTTP/1.1 201 Created
Location: /registration/acme-corporation/acme-1
Content-Length: 0
Registering device foo-bar-1 with tenant foo-bar-corporation:
HTTP/1.1 201 Created
Location: /registration/foo-bar-corporation/foo-bar-1
Content-Length: 0
Setting Credentials
The final step before the devices can actually start publishing data to Hono is to set credentials for the devices. Hono requires a device to authenticate using these credentials before it accepts any data published by the device. This way, applications consuming the data via Hono’s Telemetry or Event APIs can be sure that the data originates from the device indicated in the telemetry message or event.
Now that the keys have been created, we can register a tenant using the public key as the trust anchor.
For convenience we will be using the Hono Sandbox. However, any other (local) installation running version 0.9-M2 or later should work as well.
In the commands below, please replace the `ACME` tenant identifier with an identifier of your own choice. This is important because Hono enforces the uniqueness of tenant identifiers. Each identifier can therefore be registered once only per Hono instance.
The first three commands define some variables for later use: the tenant identifier, the certificate’s subject distinguished name and the Base64 encoded public key. The variables are then used in the command to register the trust anchor with the new tenant.
$ TENANT="ACME"
$ SUBJECT=$(openssl x509 -in tenant-cert.pem -noout -subject -nameopt RFC2253 | sed s/^subject=//)
$ PK=$(openssl x509 -in tenant-cert.pem -noout -pubkey | sed /^---/d | sed -z 's/\n//g')
$ cat <<EOS > tenant.json
EOS
$ curl -i -H 'Content-Type: application/json' -H 'Expect:' --data-binary @tenant.json https://hono.eclipse.org:28443/tenant
Create a device certificate
The next step is to create a key pair for the device and its corresponding client certificate, which is signed by the tenant’s private key.
$ openssl genrsa -out device-key.pem 4096
$ openssl req -new -key device-key.pem -subj "/O=ACME Inc./CN=Hot Fuzz Device" | openssl x509 -req -days 365 -out device-cert.pem -CA tenant-cert.pem -CAkey tenant-key.pem -CAcreateserial
Again, make sure to not use any attribute types apart from `CN`, `L`, `ST`, `O`, `OU`, `C`, `STREET`, `DC`, `UID` in the subject distinguished name.
Register the device
We can now use an arbitrary device identifier to register the device with the tenant.
Register the device’s subject DN
The final step is to register the device’s subject distinguished name. Again, make sure to use the same tenant and device identifiers as above.
$ SUBJECT=$(openssl x509 -in device-cert.pem -noout -subject -nameopt RFC2253 | sed s/^subject=//)
$ cat <<EOS > credentials.json
# for details regarding the syntax.
# The default value ("ou") extracts the Organization ("O") and the Org Unit ("OU")
# and concatenates them using a semicolon, e.g. "Eclipse IoT;Hono"
uidFormat: "ou"
# adapterUids contains a comma separated list of uids of protocol adapters that authenticate
# by means of a client certificate.
# The default value ("Eclipse IoT;Hono") includes all adapters that authenticate with their
# demo certificate.
adapterUids: "Eclipse IoT;Hono"
svc:
annotations: {}
loadBalancerIP:
# resources contains the container's requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "64Mi"
limits:
cpu: "1"
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
Eclipse Hono - 401 Unauthorized Error (Even when the credentials are correct)
I am using the following commands to create a tenant in Eclipse Hono
http://localhost:28080/tenant
HTTP/1.1 201 ...
eclipse-hono
asked Mar 10 at 12:59
VigKam
47455 silver badges1616 bronze badges
1
vote
1answer
46 views
Submit telemetry via gateway mode on HTTP & MQTT adaptors
I can create things, set up connections and apply the connection policy to the thing so I can submit telemetry from a thing via HTTP and MQTT and receive it on my MQTT server/connection. I've got all ...
eclipse-hono bosch-iot-suite bosch-iot
asked Feb 14 at 5:11
Justin Maynard
1111 bronze badge
-2
votes
1answer
68 views
Connecting Eclipse Hono and Eclipse Ditto on same local Machine
* @return A future indicating the outcome of the operation.
* <p>
* Otherwise the future will fail with
*/
private Future<TenantDto> findTenant(final String tenantId) {
Objects.requireNonNull(tenantId);
final JsonObject findTenantQuery = MongoDbDocumentBuilder.builder().withTenantId(tenantId).document();
return findTenant(findTenantQuery);
}
/**
* Fetches tenant by subject DN.
*
* @param subjectDn the subject DN.
* @return A future indicating the outcome of the operation.
* <p>
* Otherwise the future will fail with
*/
private Future<TenantDto> findTenant(final X500Principal subjectDn) {
Objects.requireNonNull(subjectDn);
final JsonObject findTenantQuery = MongoDbDocumentBuilder.builder()
.withCa(subjectDn.getName())
.document();
config.getCollectionName(),
new JsonObject()
.put(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, 1)
.put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, 1),
new IndexOptions().unique(true),
INDEX_CREATION_MAX_RETRIES)
// index based on tenantId, authId & type
.compose(ok -> mongoDbCallExecutor.createCollectionIndex(
config.getCollectionName(),
new JsonObject()
.put(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, 1)
.put(authIdKey, 1)
.put(credentialsTypeKey, 1),
new IndexOptions().unique(true)
.partialFilterExpression(new JsonObject()
.put(authIdKey, new JsonObject().put("$exists", true))
.put(credentialsTypeKey, new JsonObject().put("$exists", true))),
INDEX_CREATION_MAX_RETRIES));
}
private Future<CredentialsDto> getCredentialsDto(final DeviceKey deviceKey) {
return getCredentialsDto(deviceKey, Optional.empty());
}
private Future<CredentialsDto> getCredentialsDto(final DeviceKey deviceKey,
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
2
Who am I ?
@ppatierno
● Senior Software Engineer @ Red Hat
○ Messaging & IoT team
● Lead/Committer @ Eclipse Foundation
○ Hono, Paho and Vert.x projects
● Microsoft MVP Azure/IoT
● Technologies and protocols “globetrotter”
● Hacking low constrained devices in spare time
● Blogger and speaker about distributed systems, messaging, IoT
and embedded “world”
3.
3
Agenda
● From messaging to IoT
● IoT from close to open source
● Please welcome to … Eclipse Hono
○ What is this ?
○ Goals & features
○ Architecture & APIs
● How & where to deploy ?
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Karthees Kalidass
@kaniyan
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
@kaniyan Also congratulations from my side! :-)
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
Eclipse Hono on Microsoft Azure
#1120
Open
erryB opened this issue
Mar 28, 2019
· 7 comments
Open
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
_
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
_
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
Eclipse Hono - Command and Control
Eclipse Hono: Connect. Command. Control.
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
_
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
If you are looking to automate the deployment, scaling, and management of containerized applications, then the open-source system Kubernetes might be the perfect fit for you.
Learn about Kubernetes
Using Docker in swarm mode: Get an overview of the features.
More information on Docker Swarm
Recommended for you
Developer
Release of new MongoDB based device registry in Eclipse Hono
How to make use of this new device registry implementation.
Kartheeswaran Kalidass
3 min
Developer
Eclipse Ditto 1.0: A framework for digital twin builders
We are thrilled to introduce Eclipse Ditto 1.0.
Thomas Jäckle
4 min
Bosch IoT Suite
If Bosch can do it, you can do it too
Our journey toward becoming an active open source contributor.
5 min
©Bosch.IO
Developer
Simplifying IoT development with Eclipse IoT
Introducing our pre-integrated Eclipse IoT package.
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
Our journey toward becoming an active open source contributor.
5 min
©Bosch.IO
Developer
Simplifying IoT development with Eclipse IoT
Introducing our pre-integrated Eclipse IoT package.
4 min
Developer
Eclipse Hono 1.0.0 released: An open IoT connectivity platform
A closer look at some of the key features.
Kai Hudalla
3 min
Developer
Harmonizing specific device payloads using Eclipse Vorto
An approach to keeping up with different payload formats.
4 min
Developer
BCX19: IoT hackathon for the factory of the future
At BCX19, 700 developers competed in a variety of challenges: from Mobility & Manufacturing to Buildings, Utility & Social Impact.
Andrej Dering
3 min
©Bosch.IO
Developer
Eclipse Hono is designed to support multiple types of credentials, supporting authentication schemes like HTTP Basic auth, MQTT username/password authentication, X.509 client certificates and other TLS ciphers that support client authentication using Pre-Shared Keys or RawPublicKeys.
However, for the sake of simplicity, we will use simple hashed-password credentials which the devices can use to authenticate with the HTTP protocol adapter using HTTP Basic Auth or with the MQTT adapter.
As the name suggests, the Device Registry does not store any passwords in clear text but instead stores a hash of the password only. In order to authenticate a device, a protocol adapter retrieves the hashed password from the registry and compares it to a locally computed hash of the password provided by the device. If the hashes match, the device is authenticated and its data is accepted.
Setting credentials for a device requires upfront computation of the password hash. The hash can then be used in an HTTP request to set the credentials for a device.
Here is the code to compute the hash and set the credentials for the acme-1 device (make sure to use your own device ID for the device-id and auth-id in the JSON payload and your tenant name in the URI):
$> PWD_HASH=$(echo -n "acme-secret" | openssl dgst -binary -sha512 | base64 -w 0)
$> curl -i -X POST -H 'Content-Type: application/json' --data-binary '{
"device-id": "acme-1",
"type": "hashed-password",
"auth-id": "acme-1",
"secrets": [{
"pwd-hash": "'$PWD_HASH'"
}]
}' http://hono.eclipse.org:28080/credentials/acme-corporation
HTTP/1.1 201 Created
Location: /credentials/acme-corporation/acme-1/hashed-password
Content-Length: 0
The password for the foo-bar-1 device can be set in the same way:
$> PWD_HASH=$(echo -n "foo-bar-secret" | openssl dgst -binary -sha512 | base64 -w 0)
$> curl -i -X POST -H 'Content-Type: application/json' --data-binary '{
"device-id": "foo-bar-1",
"type": "hashed-password",
EOS
$ curl -i -H 'Content-Type: application/json' --data-binary @credentials.json https://hono.eclipse.org:28443/credentials/$TENANT
Test the connection
Now that the device has been registered, it is time to connect to the MQTT adapter using the newly created client certificate and publish some data.
First, we start a consumer for the tenant that we registered the device for. You can download the client from the Hono web site:
$ java -jar hono-cli-*-exec.jar --hono.client.host=hono.eclipse.org --hono.client.port=15671 --hono.client.tlsEnabled=true --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver --tenant.id=$TENANT
In the final step, we use the Eclipse Mosquitto command line client to publish some telemetry data:
$ mosquitto_pub -h hono.eclipse.org -p 8883 --capath /etc/ssl/certs/ --cert device-cert.pem --key device-key.pem -q 1 -t telemetry -m "Hello there"
If all goes well you should be able to see the data being logged to the console in the terminal where you have started the consumer.
The device may also use HTTP to publish data:
$ curl -i --cert device-cert.pem --key device-key.pem -H 'Content-Type: plain/text' -H 'Expect:' --data-binary 'Hello there' https://hono.eclipse.org:8443/telemetry
Read more
How the open source project Eclipse Hono addresses the topic of IoT device connectivity.
Introduction to Eclipse Hono
The goal of the open source project Eclipse Ditto is to establish a framework for digital twins. Take a closer look.
Digital twins for IoT development
Bosch pursues an open source strategy. Find out why.
Bosch's open source strategy
memory: "256Mi"
# extraSecretMounts describes additional secrets that should be mounted into the
# router's container filesystem. The files from the secret(s) can
# then be used in the router configuration, e.g. for using custom key material and certificates.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the router has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# AMQP Messaging Network Broker configuration.
broker:
# saslUsername contains the username that the Dispatch Router should use
# for authenticating to the broker
saslUsername: "artemis"
# saslPassword contains the password that the Dispatch Router should use
# for authenticating to the broker
saslPassword: "artemis"
# port contains the port that the Dispatch Router should use
# for connecting to the broker
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@dejanb No specific topics from my side for today's call
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
curl -X POST -i -u ditto:foobar -H 'Content-Type: application/json' -d '{
"targetActorSelection": "/system/sharding/connection",
"headers": {
"aggregate": false
},
"piggybackCommand": {
...
eclipse-hono eclipse-ditto
asked Jan 20 at 5:40
Atul Kumar
711 bronze badge
0
votes
1answer
15 views
Authorization for topics
Devices would be authenticated by the adapters before processing the incoming messages. Is there any way to authorize the Devices as well? i.e, to allow only a specific set of Devices to publish to a ...
eclipse-hono
asked Jan 16 at 13:01
Rajkumar
34566 silver badges2222 bronze badges
0
votes
return findTenant(findTenantQuery);
}
/**
* Gets a tenant dto by a json-based query.
*
* @param findQuery the tenant query.
* @return A future indicating the outcome of the operation.
* <p>
* Otherwise the future will fail with
*/
private Future<TenantDto> findTenant(final JsonObject findQuery) {
Objects.requireNonNull(findQuery);
final Promise<JsonObject> findTenantPromise = Promise.promise();
mongoClient.findOne(config.getCollectionName(), findQuery, new JsonObject(), findTenantPromise);
return findTenantPromise.future()
.compose(tenantJsonResult -> Optional.ofNullable(tenantJsonResult)
.map(tenantJson -> Future.succeededFuture(TenantDto.forRead(tenantJsonResult.getString(Constants.JSON_FIELD_TENANT_ID),
tenantJsonResult.getJsonObject(RegistryManagementConstants.FIELD_TENANT).mapTo(Tenant.class),
tenantJsonResult.getInstant(MongoDbDeviceRegistryUtils.FIELD_CREATED),
tenantJsonResult.getInstant(MongoDbDeviceRegistryUtils.FIELD_UPDATED_ON),
tenantJsonResult.getString(MongoDbDeviceRegistryUtils.FIELD_VERSION))))
.orElseGet(
final Optional<String> resourceVersion) {
final JsonObject findCredentialsQuery = MongoDbDocumentBuilder.builder()
.withVersion(resourceVersion)
.withTenantId(deviceKey.getTenantId())
.withDeviceId(deviceKey.getDeviceId())
.document();
final Promise<JsonObject> findCredentialsPromise = Promise.promise();
mongoClient.findOne(config.getCollectionName(), findCredentialsQuery, null, findCredentialsPromise);
return findCredentialsPromise.future()
.compose(result -> Optional.ofNullable(result)
.map(credentialsDtoJson -> credentialsDtoJson.mapTo(CredentialsDto.class))
.map(Future::succeededFuture)
.orElseGet(() -> MongoDbDeviceRegistryUtils.checkForVersionMismatchAndFail(
deviceKey.getDeviceId(),
resourceVersion,
getCredentialsDto(deviceKey))));
}
private Future<CredentialsResult<JsonObject>> getCredentialsResult(
final String tenantId,
final String authId,
● Demo
4.
4
“give me a scalable messaging
platform, and I shall move the
Internet of Things world” (Archimedes)
IoT : messaging as a “lever”
5.
IoT Core Services
5
What makes an IoT platform ?
Messaging infrastructure
Device
Provisioning
Business Services
Monitoring
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Architecture > Component View
Top Level
Device Registry
AMQP 1.0 Messaging Network
Component View
This page describes the high level components constituting an Eclipse Hono™ instance and their relations to each other.
Top Level
The diagram below provides an overview of the top level logical components.
The MQTT and HTTP Adapters use the Device Registry to authenticate Devices connecting to the adapters and asserting their
registration status. The adapters then forward the telemetry data and events received from the devices to the AMQP 1.0 Messaging Network
for delivery to Business Applications. Business applications also use the messaging network to send commands to connected devices.
Eclipse Hono on Microsoft Azure
#1120
erryB opened this issue
Mar 28, 2019
· 7 comments
Labels
enhancement
Comments
Copy link
Quote reply
erryB
commented
Mar 28, 2019
•
edited
Hello Hono community,
I would like to have your feedback about Eclipse Hono on Microsoft Azure.
We are currently working on the deployment of Hono on Azure Kubernetes Service and we already opened a PR, but we would also like to improve the experience of Hono on Azure by using managed services.
Below you can find some topics we consider valuable to explore, what do you think?
Thanks,
Erica
Overview
The main goal is to provide the best experience of Eclipse Hono on Microsoft Azure, and to do so we should take care of different aspects:
Eclipse Hono deployment on Microsoft Azure
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
Scribd will begin operating the SlideShare business on December 1, 2020
As of this date, Scribd will manage your SlideShare account and any content you may have on SlideShare, and Scribd's General Terms of Use and Privacy Policy will apply. If you wish to opt out, please close your SlideShare account. Learn more.
SlideShare
Explore
Search
You
Upload
Login
Signup
Submit Search
Home
Explore
Successfully reported this slideshow.
We use your LinkedIn profile and activity data to personalize ads and to show you more relevant ads. You can change your ad preferences anytime.
Eclipse Hono - Command and Control
Upcoming SlideShare
Scribd will begin operating the SlideShare business on December 1, 2020
As of this date, Scribd will manage your SlideShare account and any content you may have on SlideShare, and Scribd's General Terms of Use and Privacy Policy will apply. If you wish to opt out, please close your SlideShare account. Learn more.
SlideShare
Explore
Search
You
Upload
Login
Signup
Submit Search
Home
Explore
Successfully reported this slideshow.
We use your LinkedIn profile and activity data to personalize ads and to show you more relevant ads. You can change your ad preferences anytime.
Eclipse Hono: Connect. Command. Control.
Upcoming SlideShare
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
4 min
Developer
Eclipse Hono 1.0.0 released: An open IoT connectivity platform
A closer look at some of the key features.
Kai Hudalla
3 min
Developer
Harmonizing specific device payloads using Eclipse Vorto
An approach to keeping up with different payload formats.
4 min
Developer
BCX19: IoT hackathon for the factory of the future
At BCX19, 700 developers competed in a variety of challenges: from Mobility & Manufacturing to Buildings, Utility & Social Impact.
Andrej Dering
3 min
©Bosch.IO
Developer
Eclipse Vorto: The next step in IoT device integration
What the open source project is all about.
6 min
Internet of Things
How to identify the right IoT platform? Ask the users!
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
Eclipse Vorto: The next step in IoT device integration
What the open source project is all about.
6 min
Internet of Things
How to identify the right IoT platform? Ask the users!
The IoT platform market is getting more mature and organizations looking for the right solution can draw on user experiences.
Arnold Vogt
5 min
©Unsplash/ Glenn Carstens-Peters
Developer
X.509 based device authentication in Eclipse Hono
How Eclipse Hono allows to use a private/public key pair.
Kai Hudalla
3 min
© Bosch.IO GmbH, all rights reserved
"auth-id": "foo-bar-1",
"secrets": [{
"pwd-hash": "'$PWD_HASH'"
}]
}' http://hono.eclipse.org:28080/credentials/foo-bar-corporation
HTTP/1.1 201 Created
Location: /credentials/foo-bar-corporation/foo-bar-1/hashed-password
Content-Length: 0
Publishing & Consuming Data
In order to consume telemetry data or events that have been published by devices, a client needs to connect to Hono’s Telemetry and/or Event API using AMQP 1.0.
Hono provides an example Java client that can be used to consume data from Hono. You can get the client from the download page (in the Latest Milestone section).
After the download has finished, start the client from the command line like this:
$> java -jar hono-example-0.6-M2-exec.jar --hono.client.host=hono.eclipse.org --hono.client.port=15672 --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver --tenant.id=acme-corporation
NB: Make sure to set the value of the –tenant.id parameter to the name of your tenant.
Once the client is running, the following command can be used to publish some telemetry data for the acme-1 device. Make sure to adapt the command to use the device identifier and password of the device that belongs to the tenant you started the client for.
HTTP/1.1 202 Accepted
Content-Length: 0
Now try to start another client (on another console) to consume data from the other tenant:
$> java -jar hono-client.jar --hono.client.host=hono.eclipse.org --hono.client.port=15672 --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver --tenant.id=foo-bar-corporation
NB: Do not be confused by the fact that this uses the same user name and password as for the first tenant. This is just a limitation of the sandbox environment. In a production system, the clients will use different credentials specific to the tenant from which they want to consume data.
Now publish some data for the second tenant:
We adopted Kubernetes for the Bosch IoT Suite. What led to this decision?
Adopting Kubernetes to build IoT solutions
The IoT needs Kubernetes. Let us explain why.
Kubernetes in the IoT
The Bosch IoT Suite voted "best in class" in IoT platforms based on open source.
Read the report
Recommended for you
Developer
Release of new MongoDB based device registry in Eclipse Hono
How to make use of this new device registry implementation.
Kartheeswaran Kalidass
3 min
Developer
Eclipse Ditto 1.0: A framework for digital twin builders
We are thrilled to introduce Eclipse Ditto 1.0.
Thomas Jäckle
4 min
Bosch IoT Suite
If Bosch can do it, you can do it too
Our journey toward becoming an active open source contributor.
5 min
©Bosch.IO
Developer
port: 5671
# artemis contains configuration properties for the example Apache ActiveMQ Artemis broker
artemis:
# imageName contains the name (including tag) of the container
# image to use for the example AMQP Messaging Network Broker
imageName: quay.io/enmasse/artemis-base:2.10.1-1
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "256Mi"
limits:
cpu: "1"
memory: "512Mi"
# extraSecretMounts describes additional secrets that should be mounted into the
# Artemis container's filesystem. The files from the secret(s) can
# then be used in the Artemis configuration, e.g. for using custom key material and certificates.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the router has been deployed to.
extraSecretMounts: {}
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
_
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
_
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Dejan Bosanac
@dejanb
@sophokles73 will do
Lari Hotari
@lhotari
@sophokles73 I finally got Hono deployed on Azure, using Azure SQL Database. I pushed the changes to the Helm chart to eclipse/packages#164 . It's working fine with the changes that I have pushed as PRs to Hono.
Sign in to start talking
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Kai Hudalla
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Kai Hudalla
@sophokles73
@ctron Hi Jens, would you mind taking a look ^^^^ ?
Sign in to start talking
1answer
24 views
Gateways in Hono
I am in the process of evaluating HONO for IOT stack. We have scenarios where an intermediary device would send telemetry data for other devices. Communication through an Intermediary device is ...
eclipse-hono
asked Jan 16 at 12:57
Rajkumar
34566 silver badges2222 bronze badges
4
votes
0answers
158 views
Connecting locally deployed Hono and Ditto - ERROR 504
Hono is deployed on a Minikube cluster (I followed https://www.eclipse.org/hono/getting-started/ to set up Hono locally) and Ditto is running on localhost. I tried to follow this tutorial and adapt it ...
eclipse-hono eclipse-ditto eclipse-iot
asked Jan 14 at 13:08
Amanda Schoefl
4133 bronze badges
0
votes
1answer
75 views
Unable to make an MQTT pub-sub connection
I have been trying to make a simple MQTT pub sub communication on my device using node-red.
() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND))));
}
@Override
public Future<OperationResult<Id>> createTenant(
final Optional<String> tenantId,
final Tenant tenantObj,
final Span span) {
Objects.requireNonNull(tenantId);
Objects.requireNonNull(tenantObj);
Objects.requireNonNull(span);
final String tenantIdOrGenerated = tenantId.orElseGet(() -> DeviceRegistryUtils.getUniqueIdentifier());
return MongoDbDeviceRegistryUtils.isModificationEnabled(config)
.compose(ok -> processCreateTenant(tenantIdOrGenerated, tenantObj, span))
.recover(error -> Future.succeededFuture(MongoDbDeviceRegistryUtils.mapErrorToResult(error, span)));
}
private Future<OperationResult<Id>> processCreateTenant(final String tenantId, final Tenant tenantObj,
final Span span) {
final TenantDto newTenantDto = TenantDto.forCreation(tenantId, tenantObj, new Versioned<>(tenantObj).getVersion());
// the tenantId is either the device ID provided by the client
// or a newly created random ID
TracingHelper.TAG_DEVICE_ID.set(span, tenantId);
final JsonObject newTenantDtoJson = JsonObject.mapFrom(newTenantDto);
final String type,
final JsonObject clientContext) {
final JsonObject findCredentialsQuery = MongoDbDocumentBuilder.builder()
.withTenantId(tenantId)
.withAuthId(authId)
.withType(type)
.document();
final Promise<JsonObject> findCredentialsPromise = Promise.promise();
mongoClient.findOne(
config.getCollectionName(),
findCredentialsQuery,
new JsonObject().put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, 1)
.put(CREDENTIALS_FILTERED_POSITIONAL_OPERATOR, 1)
.put("_id", 0),
findCredentialsPromise);
return findCredentialsPromise.future()
.map(result -> Optional.ofNullable(result)
.flatMap(ok -> Optional
.ofNullable(result.getJsonArray(MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS))
.map(credential -> credential.getJsonObject(0))
.filter(credential -> DeviceRegistryUtils.matchesWithClientContext(credential,
Real time
streaming
Machine
Learning
…
Authentication &
Authorization
Device
Registration
6.
6
IoT : communication patterns
Telemetry Inquiries Commands Notifications
Cloud
7.
7
IoT : communication patterns
Messaging patterns & protocols
● Telemetry & Notifications are about …
○ …. messaging publish/subscribe
● Commands & Inquiries are about …
○ … messaging request/response
● Different protocols (AMQP, MQTT, HTTP, …) implement them in different way
○ As built-in support …
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
Dejan Bosanac
The Device Registry uses the Auth Server to authenticate the protocol adapters during connection establishment.
All interactions between the components are based on AMQP 1.0 message exchanges as defined by the
Credentials API,
Tenant API,
Device Registration API,
Device Connection API,
Command & Control API,
Telemetry API and
Event API.
Device Registry
The diagram below provides an overview of the Device Registry component’s internal structure.
The Device Registry component implements the Credentials API, Tenant API,
Device Registration API and Device Connection API.
Clients opening a connection to SimpleDeviceRegistryServer are authenticated by means of an external service accessed via the Auth port.
The FileBasedCredentialsService, FileBasedTenantService and FileBasedRegistrationService store all data in the local file system.
The MapBasedDeviceConnectionService keeps all data in memory.
The Device Registry is therefore not recommended to be used in production environments because the component cannot easily scale out horizontally.
It is mainly intended to be used for demonstration purposes and PoCs. In real world scenarios, a more sophisticated implementation should
be used that is designed to scale out, e.g. using a persistent store for keeping device registration information that can be shared by multiple instances.
AMQP 1.0 Messaging Network
The AMQP 1.0 Messaging Network is not per se a component being developed as part of Hono. Instead, Hono comes with a default implementation of the messaging network relying on artifacts provided by other open source projects. The default implementation currently consists of a single Apache Qpid Dispatch Router instance connected to a single Apache Artemis broker instance. Note that this setup is useful for development purposes but will probably not meet requirements regarding e.g. scalability of real world use cases.
The diagram below provides an overview of the default implementation of the Messaging Network component used with Hono.
Scaling out messaging infrastructure is a not a trivial task. Hono does not provide an out-of-the-box solution to this problem but instead integrates with the EnMasse project which aims at providing Messaging as a Service infrastructure.
Integration of Eclipse Hono with Azure PaaS Services, to take advantage of some features like scalability and security
Guidelines and samples to support the community
For each of these main topics we propose some ideas and steps to be followed, but before going deeper into technical details, we would like to get you feedback and thoughts in order to understand what features can be consider more valuable and interesting for Hono community. Please keep in mind that at the moment we are sharing ideas and this should not be considered as a promise for contribution.
Eclipse Hono deployment on Microsoft Azure
Azure Kubernetes Service (AKS) deployment support
As mentioned, we already started working on this, following the standard Kubernetes approach. We created this PR including:
step by step instructions to describe how to set up an AKS cluster and deploy Eclipse Hono as is
bash scripts and yaml files necessary to follow these guidelines
Provide deployment guidelines using Helm, following similar approach.
Provide guidelines to set up and leverage Azure Pipelines for CI/CD
Integration of Eclipse Hono with Azure PaaS Services
Provide a reference for AMQP Messaging Network implementation
The idea is to leverage Azure Event Hubs for scaling and performance capabilities. To do so, it's important to:
Define the most appropriate Partition Key to be used in order to have the best performances in Event Hubs.
Create a component (microservice) called Event Processor in order to read data off Azure Event Hubs. Details on its structure need to be defined.
Handle Consumer Groups and forward the messages to the correct Endpoint
Provide a sample to leverage Azure CosmosDB in the Device Registry
The goal is to provide the best experience in terms of scalability, security and georedundancy. Requirements and aspects we need to take into account include:
Compatibility with Hono Device Registry APIs
Partitioning
Performance
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Loading in …5
×
1
1 of 35
Like this presentation? Why not share!
Share
Email
What to Upload to SlideShare
by SlideShare
4654269 views
Customer Code: Creating a Company C...
by HubSpot
3486696 views
Be A Great Product Leader (Amplify,...
by Adam Nash
776584 views
Trillion Dollar Coach Book (Bill Ca...
by Eric Schmidt
934833 views
APIdays Paris 2019 - Innovation @ s...
by apidays
984291 views
A few thoughts on work life-balance
by Wim Vanderbauwhede
Loading in …5
×
1
1 of 34
Like this presentation? Why not share!
Share
Email
Event Hubs : million events per sec...
by Paolo Patierno
2168 views
Telemetry with Windows 10 IoT Core ...
by Paolo Patierno
9604 views
Reactive Internet of Things : the V...
by Paolo Patierno
6738 views
Internet of Things : protocols war !
by Paolo Patierno
11513 views
MQTT on devices : geolocation in th...
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
The IoT platform market is getting more mature and organizations looking for the right solution can draw on user experiences.
Arnold Vogt
5 min
©Unsplash/ Glenn Carstens-Peters
© Bosch.IO GmbH, all rights reserved
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
@sophokles73
@lhotari sounds great :-)
Lari Hotari
@lhotari
@sophokles73 I pushed a PR eclipse/hono#2317 with the support for SQLServer. I didn't yet test it in a real deployment, but I'll soon do that with Azure SQL Database. That PR fixes issues with Postgres support too. It seems that the Postgres support has been untested and contained bugs. The PR build is currently failing because of some checkstyle issues, I'll fix those asap.
Sign in to start talking
You should see the data being output on the console of the foo-bar-corporation client but not on the console of the acme-corporation client.
More on Eclipse Hono
If you would like to know more about how to set up your own Hono installation, here's an interesting read from Jens Reimann on how to employ OpenShift and enMasse to build your own IoT cloud platform.
Read more about Hono
Get additional information about the registry's HTTP based API.
Hono's Device Registry User Guide
Are you looking for an overview of Eclipse Hono? We got you covered.
Eclipse Hono: An overview
Visit the website of Eclipse Hono to get even more information.
More on Eclipse Hono
Jens Reimann from Red Hat tested how far he could go with scaling Eclipse Hono. Read the results in his blog post.
We scaled IoT – Eclipse Hono in the lab
Recommended for you
Developer
Release of new MongoDB based device registry in Eclipse Hono
How to make use of this new device registry implementation.
Kartheeswaran Kalidass
3 min
Developer
Eclipse Ditto 1.0: A framework for digital twin builders
Simplifying IoT development with Eclipse IoT
Introducing our pre-integrated Eclipse IoT package.
4 min
Developer
Eclipse Hono 1.0.0 released: An open IoT connectivity platform
A closer look at some of the key features.
Kai Hudalla
3 min
Developer
Harmonizing specific device payloads using Eclipse Vorto
An approach to keeping up with different payload formats.
4 min
Developer
BCX19: IoT hackathon for the factory of the future
At BCX19, 700 developers competed in a variety of challenges: from Mobility & Manufacturing to Buildings, Utility & Social Impact.
Andrej Dering
3 min
©Bosch.IO
Developer
Eclipse Vorto: The next step in IoT device integration
What the open source project is all about.
6 min
Internet of Things
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# servicebus contains configuration properties for the Azure ServiceBus instance that
# should be used instead of the example Artemis broker.
servicebus:
# host contains the FQDN of the Azure ServiceBus endpoint to connect to.
# If this property is set then the example Artemis broker will not be deployed
# and the Dispatch Router will be configured to connect to the ServiceBus.
host:
dataGridExample:
# enabled indicates whether the example data grid
# should be deployed and used.
# The default value of this property is false which is consistent with
# the default value (false) of the "deviceConnectionService.enabled" property,
# resulting in the in-memory implementation of the Device Connection
# service provided by the example device registry being used by default.
enabled: false
# imageName contains the name (including tag)
# of the container image to use for the example data grid.
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
@sophokles73
@dejanb would you mind taking a look at #2318 ?
Sign in to start talking
I have published and subscribed to the topic: telemetry. the server and port used are : mqtt.bosch-iot-hub....
mqtt eclipse-hono bosch-iot-suite bosch-iot
asked Dec 19 '19 at 6:28
sakshi gupta
111 bronze badge
0
votes
1answer
33 views
Ports mapping after Hono deployment
I deployed hono-1.0.0 on K8S 1.13.10. It appears successfully deployed as below:
Result after using "Kubectl get svc"
But when I checked web console, I got
Result listed in Cloud Web console
...
eclipse-hono
asked Dec 4 '19 at 0:52
BobOntario
1133 bronze badges
1
vote
0answers
37 views
final Promise<String> createTenantPromise = Promise.promise();
mongoClient.insert(config.getCollectionName(), newTenantDtoJson, createTenantPromise);
return createTenantPromise.future()
.compose(tenantObjectIdResult -> {
span.log("successfully created tenant");
return Future.succeededFuture(OperationResult.ok(
HttpURLConnection.HTTP_CREATED,
Id.of(tenantId),
Optional.empty(),
Optional.of(newTenantDto.getVersion())));
})
.recover(error -> {
if (MongoDbDeviceRegistryUtils.isDuplicateKeyError(error)) {
LOG.debug(
"tenant [{}] already exists or an existing tenant uses a certificate authority with the same Subject DN",
tenantId, error);
TracingHelper.logError(span,
"tenant with the given identifier already exists or an existing tenant uses a certificate authority with the same Subject DN",
error);
return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));
} else {
LOG.error("error adding tenant [{}]", tenantId, error);
clientContext))
.map(credential -> credential.put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID,
result.getString(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID))))
.filter(this::isCredentialEnabled)
.map(credential -> CredentialsResult.from(
HttpURLConnection.HTTP_OK,
credential,
getCacheDirective(type)))
.orElseGet(() -> CredentialsResult.from(HttpURLConnection.HTTP_NOT_FOUND)));
}
private CacheDirective getCacheDirective(final String type) {
if (config.getCacheMaxAge() > 0) {
switch (type) {
case CredentialsConstants.SECRETS_TYPE_HASHED_PASSWORD:
case CredentialsConstants.SECRETS_TYPE_X509_CERT:
return CacheDirective.maxAgeDirective(config.getCacheMaxAge());
default:
return CacheDirective.noCacheDirective();
}
} else {
return CacheDirective.noCacheDirective();
}
○ … or on top of it at application level
○ Read more on “Strengths And Weaknesses Of IoT Communication Patterns” *
* DZone IoT Guide : https://dzone.com/guides/iot-applications-protocols-and-best-practices
8.
8
IoT : interoperability
Open standards
AMQP 1.0
MQTT
HTTP
CoAP
XMPP
STOMP
9.
9
● Microsoft Azure
○ IoT Hub
● Amazon Web Services
○ AWS IoT
● Google
○ IoT Core
● IBM
○ Watson IoT
IoT in the cloud
10.
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Device Registry Management API Specification
Device Registry Management API Specification
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
Security
Indexing and optimal storage strategy and API selection
Guidelines and samples to support the community
Scripts and guidelines to deploy Hono on Azure Kubernetes Services: PR opened
Sample and guidelines to use Azure Event Hubs
This will include an additional microservice (Event Processor component)
Sample and guidelines to use Azure CosmosDB in the Device Registry
This will include an additional microservice (Azure Device Registry component)
Guidelines to create a secure Network topology
The main goal is to explain how to control access and limit data exposure, creating different subnets with different levels of trust.
Guidelines for Monitoring
The goal is to provide an overview of some Azure tools that can be used for monitoring purpose
Copy link
Member
sophokles73
commented
Mar 28, 2019
Hi @erryB,
thanks a lot for your interest in bringing Hono to Microsoft Azure :-)
IMHO it would be wonderful if we could support users to leverage native Azure services to get the best possible experience when deploying Hono on Azure. I will be glad to engage the necessary discussions around this endeavor.
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
811082 views
Share SlideShare
Facebook
Twitter
LinkedIn
Embed
Size (px)
Start on
Show related SlideShares at end
WordPress Shortcode
Link
Eclipse Hono - Command and Control
186 views
Share
Like
Download
...
KarstenFrank1
by Paolo Patierno
3548 views
Metti il .Net Framework nel Micro !
by Paolo Patierno
1176 views
Share SlideShare
Facebook
Twitter
LinkedIn
Embed
Size (px)
Start on
Show related SlideShares at end
WordPress Shortcode
Link
Eclipse Hono: Connect. Command. Control.
5,067 views
Share
Like
...
Paolo Patierno, Principal Software Engineer (Messaging & IoT) Red Hat
Follow
Published on Oct 11, 2017
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
We are thrilled to introduce Eclipse Ditto 1.0.
Thomas Jäckle
4 min
Bosch IoT Suite
If Bosch can do it, you can do it too
Our journey toward becoming an active open source contributor.
5 min
©Bosch.IO
Developer
Simplifying IoT development with Eclipse IoT
Introducing our pre-integrated Eclipse IoT package.
4 min
Developer
Eclipse Hono 1.0.0 released: An open IoT connectivity platform
A closer look at some of the key features.
Kai Hudalla
3 min
Developer
Harmonizing specific device payloads using Eclipse Vorto
An approach to keeping up with different payload formats.
4 min
Developer
How to identify the right IoT platform? Ask the users!
The IoT platform market is getting more mature and organizations looking for the right solution can draw on user experiences.
Arnold Vogt
5 min
©Unsplash/ Glenn Carstens-Peters
© Bosch.IO GmbH, all rights reserved
imageName: infinispan/server:11.0.0.Final
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "200m"
memory: "300Mi"
limits:
cpu: "1"
memory: "512Mi"
# authUsername contains the name of the user that is authorized to connect to the example data grid.
authUsername: "hono"
# authPassword contains the secret of the user that is authorized to connect to the example data grid
authPassword: "hono-secret"
# dataGridSpec contains properties for configuring the Infinispan Hotrod connection
# to the existing data grid (i.e. not the example grid) that should be used for storing
# the device connection data.
# This property MUST be set if "deviceConnectionService.enabled" is set to true
# and "dataGridExample.enabled" is set to false (the default).
# Please refer to https://docs.jboss.org/infinispan/9.4/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html#package.description
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Kai Hudalla
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Lari Hotari
@lhotari
@sophokles73 Thank you for the quick and comprehensive answer.
Lari Hotari
@lhotari
Sign in to start talking
How can I start hono without k8s?
I tried to install hono for test purpose, i tried k8s ( minikube and non -minikube). It didn't work for me by now. I am looking for other alternatives. For example, can I start honor using docker ...
eclipse-hono
asked Nov 18 '19 at 15:29
BobOntario
1133 bronze badges
0
votes
1answer
37 views
Which k8s version is required for Ecplise hono 1.0.0?
Can Eclipse Hono 1.0.0 Archive or Eclipse Hono 1.0.1 Archive be deployed in K8s v1.13.0?
kubernetes eclipse-hono
asked Nov 18 '19 at 12:21
BobOntario
1133 bronze badges
0
votes
1answer
105 views
How to integrate electronic lock tracker (JT701) with Eclipse Hono using custom HttpAdaptor
I would like to now how I could integrate an electronic lock tracker (JT701) device to hono using the adapters mechanism. The device in question is using Jt600 protocol. Unfortunately for us, we can ...
java eclipse-hono
TracingHelper.logError(span, "error adding Tenant", error);
return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_INTERNAL_ERROR));
}
});
}
}
Copy lines
Copy permalink
View git blame
Reference in new issue
Go
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
}
private boolean isCredentialEnabled(final JsonObject credential) {
return Optional.ofNullable(credential.getBoolean(CredentialsConstants.FIELD_ENABLED))
.orElse(true);
}
private Future<CredentialsResult<JsonObject>> processGetCredential(
final String tenantId,
final String type,
final String authId,
final JsonObject clientContext) {
return getCredentialsResult(tenantId, authId, type, clientContext);
}
private Future<Result<Void>> processAddCredentials(
final String tenantId,
final String deviceId,
final List<CommonCredential> credentials,
final Optional<String> resourceVersion, final Span span) {
final Promise<String> addCredentialsPromise = Promise.promise();
final CredentialsDto credentialsDto = CredentialsDto.forCreation(tenantId,
deviceId,
credentials,
OpenShift / OKD :: Eclipse Hono™
10
● They are not open source !
● Freedom of choice
○ On-premise or in the cloud
○ Ability to choose which cloud
○ Open Standards protocols allows users to choose client freely
● Migrating from one to the other can be complex
Cloud provider limitations
11.
11
● An Eclipse Foundation IoT project ...
○ Bosch and Red Hat as main contributors
● https://www.eclipse.org/hono/
Eclipse Hono
Connect. Command. Control.
12.
12
● Open source IoT connectivity platform running on …
○ Kubernetes
○ OpenShift
○ Docker Swarm
● On-premise & in the cloud
● Provided by a set of Docker containers
Eclipse Hono
Limiting Resource Usage :: Eclipse Hono™
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
_
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
Setting up a Kubernetes Cluster :: Eclipse Hono™
FMPOV all the topics you have pointed out are valid and deserve further discussion. In the past, the Hono project has mostly focused on providing the technical means to run Hono on container orchestration platforms (kubernetes, OpenShift) and allow integration with other (existing) services via standardized interfaces. That said, I think we can (and should) split up the proposed topics in two groups, a first one dealing with the technical implications of integrating Hono with native Azure services, and a second one, dealing with guides and and samples that promote and support the actual setup of those native services and describe the deployment (and potentially operation) of Hono on Azure.
Based on this distinction we might be able to create follow up issues scoped to specific aspects of the overall effort which we can then use to have a more focused discussion of these aspects.
WDYT? Does this make sense to you?
I have seen that you also have posted the content of this issue to the mailing list. In my experience, people find it easier to follow up on GitHub issues so I propose that we continue the discussion here. I will post a corresponding reply on the mailing list as well.
sophokles73
added
the
enhancement
label
Mar 28, 2019
sophokles73
added a commit
that referenced
this issue
Mar 28, 2019
[#1120] Added docs and scripts to deploy Hono on Azure Kubernetes Ser…
…
Loading status checks…
d038a16
…vices
* Added docs and scripts to deploy Hono on Azure Kubernetes Services
Helm based Deployment :: Eclipse Hono™
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Kai Hudalla
@sophokles73
Is it possible to create multiple devices in a single REST API call?
No, this is not supported as of now.
Are there alternative ways to "mass register" devices?
You might be able to use the particular DB's data loading support or use an ETL tool for that purpose.
Is there a message based AMQP interface for Device Registration?
Sign in to start talking
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Lari Hotari
@lhotari
I'm planning to experiment with Hono with with a large amount of devices (10M registered devices). I'm assuming that registering a large amount of devices would be faster with an API that supports batches.My goal is to be able to register 10M devices with their credentials in less than 6 hours. That can be achieved if devices could be registered at a rate of 500 devices / second. I'm wondering if the Hono Device Registration API and Credentials API have a way to handle batches. Is it possible to create multiple devices in a single REST API call? Are there alternative ways to "mass register" devices? Is there a message based AMQP interface for Device Registration?
Sign in to start talking
Deployment :: Eclipse Hono™
Lari Hotari
@lhotari
Since CosmosDB isn't an option without making changes in Hono, I'll probably give the JDBC based registry available in Hono master branch a try next. I'd assume that it's possible to get that working with Azure SQL Database.
Sign in to start talking
Architecture :: Eclipse Hono™
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Lari Hotari
@lhotari
It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
Sign in to start talking
Follow
Published on Oct 26, 2018
Talk given at eclipsecon Europe 2018 in Ludwigsburg by Karsten Frank.
...
Published in:
Software
1 Comment
0 Likes
Statistics
Notes
Full Name
Comment goes here.
12 hours ago
Delete
Reply
Block
Are you sure you want to
Yes
No
Your message goes here
Post
Login to see the comments
Be the first to like this
Metrics :: Eclipse Hono™
Authentication API Specification :: Eclipse Hono™
This is the slide deck for the Eclipse Foundation Virtual IoT meetup hosted on October 11st (https://www.meetup.com/Virtual-IoT/events/242190258/). It's about the Eclipse Hono project (https://www.eclipse.org/hono/)
...
Published in:
Software
5 Comments
5 Likes
Statistics
Notes
Full Name
Comment goes here.
12 hours ago
Delete
Reply
Block
Are you sure you want to
Yes
No
Your message goes here
Post
Login to see the comments
jjfons
1 year ago
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Kai Hudalla
@sophokles73
@robmontalvojr no sweat! I am glad that it works for you now. Let us know if you need any additional help ...
Sign in to start talking
BCX19: IoT hackathon for the factory of the future
At BCX19, 700 developers competed in a variety of challenges: from Mobility & Manufacturing to Buildings, Utility & Social Impact.
Andrej Dering
3 min
©Bosch.IO
Developer
Eclipse Vorto: The next step in IoT device integration
What the open source project is all about.
6 min
Internet of Things
How to identify the right IoT platform? Ask the users!
The IoT platform market is getting more mature and organizations looking for the right solution can draw on user experiences.
Arnold Vogt
5 min
©Unsplash/ Glenn Carstens-Peters
© Bosch.IO GmbH, all rights reserved
# for a list of configuration properties.
dataGridSpec:
# serverList contains the hostname:port of the data grid node(s)
# This property only needs to be set when using an existing data grid other than the
# example grid.
# serverList: my-grid.example.com:11222
# authServerName contains the name that Hotrod clients need to use for establishing a
# connection to the data grid.
# authServerName:
# authUsername contains the name of the user that is authorized to connect to the data grid.
# authUsername:
# authPassword contains the secret of the user that is authorized to connect to the data grid
# authPassword:
jaegerBackendExample:
# enabled indicates whether the example Jaeger all-in-one
# back end should be deployed and used.
enabled: false
# allInOneImage contains the name (including tag)
# of the container image to use for the example Jaeger back end.
allInOneImage: jaegertracing/all-in-one:1.17
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
@sophokles73
@lhotari sounds great :-)
Sign in to start talking
asked Oct 31 '19 at 15:51
Victor Martinez
1,04211 gold badge88 silver badges2121 bronze badges
0
votes
1answer
78 views
Sending Data from Hono to Ditto ( amqp:resource-limit-exceeded)
Hono and Ditto are successfully connected. But when I try to send the data from Hono, I will be getting 503 - Service not available message.
But then when I checked the Ditto logs. I got the below ...
eclipse-hono eclipse-ditto
asked Oct 14 '19 at 15:05
VigKam
47455 silver badges1616 bronze badges
0
votes
1answer
71 views
Sending data from Hono to Ditto
Eclipse Hono and Eclipse Ditto have been connected successfully. And when I try to send the data from the Hono I will get 202 Accepted response as shown below.
(base) vignesh@nb907:~$ curl -X POST -i ...
eclipse-hono eclipse-ditto eclipse-iot
asked Oct 14 '19 at 13:27
VigKam
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
resourceVersion.orElseGet(DeviceRegistryUtils::getUniqueIdentifier));
mongoClient.insert(
config.getCollectionName(),
JsonObject.mapFrom(credentialsDto),
addCredentialsPromise);
return addCredentialsPromise.future()
.map(added -> {
span.log("successfully added credentials");
return Result.from(HttpURLConnection.HTTP_NO_CONTENT);
});
}
private Future<Result<Void>> processRemoveCredentials(
final String tenantId,
final String deviceId,
final Span span) {
final JsonObject removeCredentialsQuery = MongoDbDocumentBuilder.builder()
.withTenantId(tenantId)
.withDeviceId(deviceId)
.document();
final Promise<JsonObject> removeCredentialsPromise = Promise.promise();
mongoClient.findOneAndDelete(config.getCollectionName(), removeCredentialsQuery, removeCredentialsPromise);
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Connect. Command. Control.
13.
13
● Tailored general messaging for IoT solutions
● Provide standard APIs for interacting with devices
● Support for arbitrary protocols (MQTT, AMQP 1.0, HTTP, …)
● Support different underlying messaging infrastructures
○ AMQP 1.0 based
○ JMS
○ Apache Kafka
○ RabbitMQ
Eclipse Hono
Goals
14.
14
● Scalability
● Multi-tenancy
● Device-based security
● Multi-protocol support
Eclipse Hono
Features
15.
AMQP 1.0
15
Eclipse Hono
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Signed-off-by: Sergii Poplavskyi <spopla@microsoft.com>
sophokles73
added a commit
that referenced
this issue
Mar 28, 2019
[#1120] Add Hugo document header o Azure deployment guide.
…
Loading status checks…
9dde212
Signed-off-by: Kai Hudalla <kai.hudalla@bosch-si.com>
Copy link
Author
erryB
commented
Mar 28, 2019
Hello @sophokles73
Sounds great to me! Here I described the general overview of our ideas, but the intention is indeed to go deeper into technical details for the integration with Azure services, and I completely agree with you that it will require separate and focused conversations.
We are currently working on the architectural structure of our proposal and we'll be happy to share more details soon.
In the meantime, any additional feedback is much appreciated :)
Copy link
Contributor
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
No Downloads
Views
Total views
186
On SlideShare
0
From Embeds
0
Number of Embeds
0
Actions
Shares
0
Downloads
8
Comments
1
Likes
0
No notes for slide
Eclipse Hono - Command and Control
1.
Eclipse HonoEclipse Hono
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Dao Long
1 year ago
George Vromovrisiotis
3 years ago
Iburaim Adejunji
,
--
at
Etudient U-AUBEN
3 years ago
Blaize D'Souza
,
Enterprise Architect at Capital One
at
Capital One
3 years ago
No Downloads
Views
Total views
5,067
On SlideShare
0
From Embeds
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "256Mi"
limits:
cpu: "1"
memory: "512Mi"
svc:
annotations: {}
loadBalancerIP:
# jaegerAgentImage contains the name (including tag)
# of the container image to use for the Jaeger Agent sidecar deployed
# with Hono's components.
jaegerAgentImage: jaegertracing/jaeger-agent:1.17
# jaegerAgentConf contains environment variables for configuring the Jaeger Agent sidecar container
# that is deployed with each of Hono's components.
# The Jaeger Agent sidecar container is deployed with standard properties if
# "jaegerBackendExample.enabled" is set to true.
# Otherwise the sidecar container is deployed using the environment variables contained
# in this property (if not nil).
# Please refer to https://www.jaegertracing.io/docs/1.17/cli/ for syntax and semantics
# of environment variables.
jaegerAgentConf:
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
robmontalvojr
@robmontalvojr
@sophokles73 Thank you for looking into this and for challenging me to double check. I surely made a mistake here. When specifying the device ID, I picked up extra information coming back from the second command (Adding a Device to the Tenant).rob@rob-HP-ProDesk-600-G1-SFF:~$ curl -i -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANTHTTP/1.1 201 Createdetag: d16b568f-605b-4e6e-bdf2-c09f22fed779location: /v1/devices/f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030content-type: application/json; charset=utf-8content-length: 45I failed to realize that the device ID was the last set of characters after the last "/" (f45581b4-204a-456d-859a-32368a342030), and used the whole string after /v1/devices/ (f5adebff-e5b7-4de7-bf0c-3f4c17ca7559/f45581b4-204a-456d-859a-32368a342030), which I now realize includes the tenant ID.Thank you for following up!
Sign in to start talking
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Kai Hudalla
@sophokles73
I have just now added a device to DEFAULT_TENANT and set its password using exactly the command you have posted. No problem at all: I get the expected 204 No Content. Are you sure that have set the environment variables correctly?
Sign in to start talking
47455 silver badges1616 bronze badges
0
votes
0answers
133 views
Eclipse Hono deployment on AWS k8s
I am trying to deploy the Eclipse Hono version 1.0 on AWS k8s cluster. Below are the services after deployment (strange external IPs).
root@ip-172-31-35-125:~# kubectl get service -n hono
service/...
amazon-web-services kubernetes amazon-vpc eclipse-hono
asked Oct 9 '19 at 14:07
AB2
122 bronze badges
1
vote
1answer
42 views
Protocoll adapter start fails with `OpenSSL is not available`
The MQTT protocol adapter does not start and in its log I see the message io.vertx.core.VertxException: OpenSSL is not available. What does this mean and what could be the cause?
11:10:18.131 [main] ...
eclipse-hono
asked Oct 1 '19 at 11:46
Save preferences
return removeCredentialsPromise.future()
.compose(result -> Optional.ofNullable(result)
.map(removed -> {
span.log("successfully removed credentials");
return Future.succeededFuture(Result.<Void> from(HttpURLConnection.HTTP_NO_CONTENT));
})
.orElseGet(() -> Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND))));
}
private Future<OperationResult<Void>> updateCredentials(
final DeviceKey deviceKey,
final Optional<String> resourceVersion,
final JsonObject credentialsDtoJson,
final Span span) {
final JsonObject replaceCredentialsQuery = MongoDbDocumentBuilder.builder()
.withVersion(resourceVersion)
.withTenantId(deviceKey.getTenantId())
.withDeviceId(deviceKey.getDeviceId())
.document();
final Promise<JsonObject> replaceCredentialsPromise = Promise.promise();
if (LOG.isTraceEnabled()) {
deviceKey.getTenantId(), deviceKey.getDeviceId(), System.lineSeparator(),
credentialsDtoJson.encodePrettily());
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Credentials API Specification :: Eclipse Hono™
Device Registration API Specification :: Eclipse Hono™
Connect. Command. Control
API Endpoints
Auth Service
Device Registry
Protocol Adapters
Business
Applications
Devices
AMQP 1.0
AMQP 1.0
HTTP, MQTT, AMQP 1.0
Qpid Dispatch
Router
ActiveMQ Artemis
Broker
AMQP 1.0
Hono components
Messaging Infrastructure
16.
16
Routing vs “Broking”
Broker
Producer Broker Consumer
Send message
Accepted
Device Connection API Specification :: Eclipse Hono™
Tenant API Specification :: Eclipse Hono™
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
Command & Control API Specification :: Eclipse Hono™
Event API Specification :: Eclipse Hono™
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Telemetry API Specification :: Eclipse Hono™
API :: Eclipse Hono™
dejanb
commented
Apr 5, 2019
•
edited
Hi @erryB,
just to follow up on Kai's comment and welcome you to the community. To me, the proposed two aspects of future collaboration sounds good and I'm looking forward to discussing all the new ideas in separate threads.
Copy link
Member
sophokles73
commented
Apr 5, 2019
@erryB
sorry for leaving you in the dark. FMPOV the most important topic would be the usage of one of Azure's native messaging services as a substitute for Apache Qpid and ActiveMQ Artemis.
Hono conceptually distinguishes between Telemetry data flowing downstream (from devices to applications) and Command & Control messages flowing upstream. Both have different characteristics regarding scalability and QoS and thus may be implemented using different services as well, each of them supporting the specific characteristics of one of those directions.
What about starting with the Telemetry direction? I could imagine that Azure EventHubs might be a good choice for it? WDYT?
Copy link
Member
sophokles73
commented
Apr 5, 2019
BTW just a small remark on the picture you have included: devices only ever communicate with the protocol adapters. There shouldn't be any reason for them to invoke any of the Tenant, Device Registration or Credentials services nor would they normally be authorized to do so.
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Command and ControlCommand and Control
Hono
2.
Karsten FrankKarsten Frank
Senior So ware Developer
@ Bosch So ware Innovations
Committer Eclipse Hono
github/IRC: sysexcontrol
Email:
sysexcontrol@gmail.com
Hono
3.
The majority of current IoTThe majority of current IoT
applications evolveapplications evolve
fromfrom Proof of ConceptsProof of Concepts with awith a
smallsmall number of devices.number of devices.
Hono
4.
Hono's vision:Hono's vision:
SupportSupport largelarge number of IoT devices andnumber of IoT devices and
applications.applications.
uniform access to devices
define remote service interfaces
AMQP 1.0 message exchanges
handle security aspects of device connectivity
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
0
Number of Embeds
1,758
Actions
Shares
0
Downloads
0
Comments
5
Likes
5
No notes for slide
Eclipse Hono: Connect. Command. Control.
1.
Eclipse Hono. Connect. Command. Control.
Connect and control your IoT devices
Kai Hudalla, Chief Software Architect @ Bosch Software Innovations
Paolo Patierno, Senior Software Engineer @ Red Hat
11/10/2017
2.
2
Who are we ?
@ppatierno
● Senior Software Engineer @ Red Hat
# REPORTER_GRPC_HOST_PORT: my-jaeger-collector:14250
# REPORTER_GRPC_DISCOVERY_MIN_PEERS: 1
# defaultJavaOptions contains options to pass to the JVM when starting
# up Hono's containers
defaultJavaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# the port that the Hono components' Prometheus scraping endpoint is exposed on
monitoring:
prometheus:
port: 8088
# healthCheckPort is the port that the Hono components bind their health check
# server to.
healthCheckPort: 8088
# platform indicates the type of container orchestration platform we are deploying to.
# Supported values are:
# - openshift
# - kubernetes
#
# When setting to "openshift", Route resources will also be deployed.
platform: kubernetes
b-abel
8322 silver badges66 bronze badges
0
votes
1answer
255 views
Why do I get HTTP/1.1 503 Service Unavailable when sending messages to the HTTP protocol adapter?
I keep getting the error code 503 all the time when I publish telemetry data to the HTTP protocol adapter of Eclipse Hono:
$ curl -i -u sensor1@DEFAULT_TENANT:hono-secret -H 'Content-Type: ...
eclipse-hono
asked Sep 30 '19 at 13:16
b-abel
8322 silver badges66 bronze badges
0
votes
1answer
83 views
How do I use client certificates for authentication against Hono?
Where do I best start if I want to use authentication with client certificates in Hono? In the User Guide is a short description but a this does not show all required steps in one place.
eclipse-hono
asked Sep 27 '19 at 10:35
b-abel
}
mongoClient.findOneAndReplaceWithOptions(config.getCollectionName(),
replaceCredentialsQuery,
credentialsDtoJson,
new FindOptions(),
new UpdateOptions().setReturningNewDocument(true),
replaceCredentialsPromise);
return replaceCredentialsPromise.future()
.compose(result -> {
if (result == null) {
return MongoDbDeviceRegistryUtils.checkForVersionMismatchAndFail(
deviceKey.getDeviceId(),
resourceVersion,
getCredentialsDto(deviceKey));
} else {
deviceKey.getTenantId(), deviceKey.getDeviceId());
if (LOG.isTraceEnabled()) {
}
span.log("successfully updated credentials");
return Future.succeededFuture(
OperationResult.ok(
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Send message
Accepted
17.
17
Routing vs “Broking”
Router
Producer Router Consumer
Send message
Accepted
Send message
Accepted
18.
AMQP 1.0
18
Eclipse Hono
Connect. Command. Control
API Endpoints
Auth Service
Device Registry
Protocol Adapters
Business
Applications
Devices
AMQP 1.0
AMQP 1.0
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
@lhotari
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Karthees Kalidass
@kaniyan
@lhotari It seems to me that the CosmosDB has to catch up a lot with the MongoDB releases. As per the CosmosDB docs, the latest supported MongoDB version is 3.6. Successive MongoDB stable releases are 4.0, 4.2 and 4.4. Unit tests & Integration tests in Hono use MongoDB version 4.0.20.
robmontalvojr
@robmontalvojr
Hi, I bumped into an issue while attempting to follow the instructions on the getting started guide for Hono (@ https://www.eclipse.org/hono/getting-started/). Using the instructions that are applicable to the Hono sandbox path, I was successful at creating a tenant, and adding a device to the tenant. The curl call to set a password for the device (3rd step) failed with a 404:<html><body> <h1>Resource not found</h1></body></html>
Has anyone experienced this?
Lari Hotari
@lhotari
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
Kai Hudalla
@sophokles73
@robmontalvojr I am not aware of any problems in this regard. Can you please post the exact curl command that you are issuing in order to set the password? Otherwise it will be hard to get to the core of the problem ...
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Copy link
mhemmeter
commented
Apr 8, 2019
Hi @erryB,
in your picture the business application is connecting to a component called Default AMQP 1.0 Messaging Network for interacting with Hono. The default implementation of the messaging network in Hono consists of a single Apache Qpid Dispatch Router instance connected to a single Apache Artemis broker instance. This setup is not meant for productive use (at least if we are talking about a scalable cloud service) and I'm wondering if you already have an idea if this component will be in place in the target architecture and if yes how it can be implemented?
Copy link
Author
erryB
commented
Apr 8, 2019
Thanks a lot for your additional feedback! I'm going to fix the picture and to create a new issue describing the architecture we propose for the messaging network, including both Device to Cloud and Cloud to Device messages.
erryB
mentioned this issue
Apr 8, 2019
Eclipse Hono on Microsoft Azure - AMQP Messaging Network proposal
#1154
Open
Sign up for free
to join this conversation on GitHub.
Already have an account?
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
independently scale fundamental building blocks
Hono
5.
Communication PatternsCommunication Patterns
Devices Solutions
Application 1
Application 2
Application 3
Telemetry
Events
Command and Control
Hono
6.
Birdview PerspectiveBirdview Perspective
Devices Solutions
Application 1
Application 2
Application 3
Hono
HTTP Adapter
MQTT Adapter
Device Registry
AMQP 1.0
AMQP 1.0
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
○ Messaging & IoT team
● Lead/Committer @ Eclipse Foundation
○ Hono, Paho and Vert.x projects
● Microsoft MVP Azure/IoT
● Blogger and speaker about distributed
systems, messaging, IoT and embedded
“world”
● Chief Software Architect @ Bosch SI
○ IoT Hub Team
● Lead/Committer @ Eclipse Foundation
○ Hono, Californium, Leshan projects
3.
3
Agenda
● The Internet of Things
○ The ecosystem
○ moving from closed to open source
● Please welcome to … Eclipse Hono
○ What is this ?
○ Goals & features
○ Architecture
○ Demo time !
○ Digging into the APIs
● How & where to deploy ?
4.
# Image type indicates which image will be used for services.
# Supported values are:
# - spring
# - quarkus
# - quarkus-native
#
# The default value is 'spring'
honoImagesType: spring
# useLoadBalancer indicates whether services should be deployed using the
# "LoadBalancer" type (true) or the "NodePort" type (false).
# This property will be ignored when deploying to platform "openshift".
useLoadBalancer: true
# Configuration properties for protocol adapters.
adapters:
# externalAdaptersEnabled indicates whether protocol adapters that
# run outside of the kubernetes cluster should be allowed to connect to
# the Dispatch Router and the example device registry's service endpoints.
# The default setting is 'false' which prevents access from outside of the
# cluster.
# Setting this property to 'true' allows external adapters to connect to
# the Dispatch Router's 'internal' endpoint and the Device Registry's
# service endpoints via AMQPS, i.e. AMQP over TLS.
# The Dispatch Router's 'internal' endpoint listens on port 15673 and requires
8322 silver badges66 bronze badges
1
vote
1answer
65 views
To get all the registered Devices in Eclipse Hono Tenant
Is there a way to get list of all the Tenants names/id in a Hono server.
Is there a way to get list of all Devices registered in a particular tenant.
eclipse-hono eclipse-iot
asked Sep 26 '19 at 13:21
VigKam
47455 silver badges1616 bronze badges
1
vote
1answer
29 views
MQTT Protocol Adapter fails to start
The MQTT Protocol Adapter fails to start with the warning message MemoryBasedConnectionLimitStrategy - Not enough memory in the log files. What does it explain?
eclipse-hono
asked Sep 24 '19 at 12:07
kaniyan
73944 silver badges77 bronze badges
1
HttpURLConnection.HTTP_NO_CONTENT,
(Void) null,
Optional.empty(),
Optional.of(result.getString(MongoDbDeviceRegistryUtils.FIELD_VERSION))));
}
})
.recover(error -> {
if (MongoDbDeviceRegistryUtils.isDuplicateKeyError(error)) {
deviceKey.getTenantId(), deviceKey.getTenantId(), error);
TracingHelper.logError(span, "credentials (type, auth-id) must be unique for device");
return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));
}
return Future.failedFuture(error);
});
}
}
Copy lines
Copy permalink
View git blame
Reference in new issue
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Deployment > OpenShift / OKD
OpenShift / OKD
In Hono version 1.0 we dropped the OpenShift specific deployment using the
source-to-image (S2I) model, in favor of the Helm charts and the
Eclipse IoT Packages project.
You can still deploy to OpenShift and OKD, using the Helm charts. And you can
also use routes to expose services.
Deploying using S2I is also still possible, however the Hono project simply no
longer provides out-of-the box scripts for doing so.
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
● EnMasse …
○ a messaging-as-a-service platform
○ elastic scaling
○ multiple communication patterns
○ … and more and more …
○ more info : enmasse.io
HTTP, MQTT, AMQP 1.0
19.
19
Eclipse Hono
IoT messaging APIs
● Telemetry & Event
● Device Registration
● Command & Control (not available in 0.5 release)
● Authentication
● Credentials
20.
20
Eclipse Hono
IoT messaging APIs endpoints
Hono
Messaging
Auth
Service
Device
Implement a Custom Hono HTTP Protocol Adapter :: Eclipse Hono™
Consuming Messages from Java :: Eclipse Hono™
AMQP Adapter Client for Java :: Eclipse Hono™
Building from Source :: Eclipse Hono™
Developer Guide :: Eclipse Hono™
Monitoring & Tracing :: Eclipse Hono™
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Secure Communication :: Eclipse Hono™
AMQP 1.0 Messaging Network Configuration :: Eclipse Hono™
eclipse/hono - Gitter
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Deployment > Limiting Resource Usage
Java’s View of the World
Limiting a Component’s Memory Consumption
Kubernetes
Limiting the Number of Device Connections
Limiting the Overall Connection Time
Limiting the Data Volume
Limiting Resource Usage
Deploying Eclipse Hono™ to a container orchestration platform is easy thanks to the provided Docker images. This page provides some guidance for configuring the resource consumption of these containers in order to make sure that they get enough memory and CPU to run properly, but to also make sure that individual containers do not use up all the resources causing other containers to starve.
Docker itself provides means to limit a container’s consumption of memory and CPU resources by means of command line options that can be set when starting up a container. Both Kubernetes and OpenShift leverage this mechanism when defining resource limits of a pod. Please refer to the corresponding documentation of Docker, Kubernetes and OpenShift for details regarding the particular syntax to be used.
Java’s View of the World
Hono’s service components are implemented in Java. When the corresponding Docker container for such a service is started, the only process being run inside the container is therefore a Java virtual machine (JVM). On startup, the JVM tries to determine the amount of memory and the number of CPU cores that it can use to execute workloads. By default the JVM queries the operating system for the corresponding parameters and adjusts its runtime parameters accordingly, e.g. it will by default limit the size of its heap memory to a quarter of the total memory available in order to leave enough memory for other processes running on the same system.
This is a reasonable approach when running on bare metal or a VM where other processes are expected to be running on the same machine, thus competing for the same computing resources. However, containers are usually configured to run a single process only so that it makes more sense to dedicate almost all of the available resources to running that process, leaving the (small) rest for the operating system itself.
As described above, a Docker container can easily be configured with a limit for memory and CPU resources that it may use during runtime. These limits are set and enforced using Linux CGroups.
Limiting a Component’s Memory Consumption
Starting with Java 9, the JVM will correctly determine the total memory and number of CPUs available when running inside of a container. All of the Docker images provided by Hono run with OpenJDK 11 by default, thus ensuring that the JVM considers any memory limits configured for the container when configuring its heap during startup. However, the default algorithm will still only allocate a quarter of the (limited) amount of memory, thus leaving a lot of memory available to the container unused.
@BobClaerhout have you been able to use the Mongo DB based registry together with the Device Connection service?
Bob Claerhout
@BobClaerhout
@sophokles73 , yes it's working now. Thanks for assistance
thanks for the helpful replies @BobClaerhout and @kaniyan . I'll take those into consideration in the evaluation I'm planning to do on Azure with Hono.
your welcome! You should know that MongoDB Atlas also has the option to host it on Azure. So it's not really hosted by Azure but is almost :)
Kai Hudalla
@sophokles73
@BobClaerhout would you mind creating a PR to improve the wording in the Hono chart's values.yaml to better reflect what you have been experiencing?
robmontalvojr
@robmontalvojr
Sign in to start talking
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Deployment > Setting up a Kubernetes Cluster
Setting up a local Development Environment
Setting up a Production Environment
Setting up an Environment on Microsoft Azure
Prerequisites
Setup
Monitoring
Cleaning up
Setting up a Kubernetes Cluster
This guide describes how to set up a Kubernetes cluster which can be used to run Eclipse Hono™.
Hono can be deployed to any Kubernetes cluster running version 1.11 or newer. This includes OpenShift (Origin) which is built on top of Kubernetes.
The Kubernetes web site provides instructions for setting up a (local) cluster on bare metal and/or virtual infrastructure from scratch or for provisioning a managed Kubernetes cluster from one of the popular cloud providers.
Setting up a local Development Environment
The easiest option is to set up a single-node cluster running on a local VM using the Minikube project.
This kind of setup is sufficient for evaluation and development purposes.
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Sign in to comment
Assignees
No one assigned
Labels
enhancement
Projects
None yet
Milestone
No milestone
Linked pull requests
Successfully merging a pull request may close this issue.
None yet
4 participants
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Deployment > Helm based Deployment
Installing Hono
Deploying custom Container Images
Deploying via a private Registry
Deploying to Minikube
Using Jaeger Tracing
Deploying to Azure Kubernetes Service (AKS)
Helm based Deployment
Eclipse Hono™’s components are provided as container images which can be run on arbitrary container orchestration platforms.
This page describes the steps necessary to deploy Hono to a Kubernetes cluster using the
Helm package manager.
Installing Hono
Hono’s Helm chart is available from the Eclipse IoT Packages chart repository.
Please refer to the chart’s README for
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Deployment
Deployment
Learn how to deploy Eclipse Hono™ to various container orchestration platforms.
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Architecture
Architecture
Get an overview of the architecture of Eclipse Hono™.
Network
Network
Hono
7.
Command and ControlCommand and Control
HTTPHTTP
How to reach the devices?
When is the right time to send a command to the
device?
Hono
8.
HTTP TelemetryHTTP Telemetry Hono
9.
HTTP Adapter:HTTP Adapter:
How long to wait for a command?How long to wait for a command?
Depends on the device!Depends on the device!
Hono
10.
Any downstream message
Hono
11.
HTTP Send Command (piggybacked)
Hono
12.
HTTP Respond Command
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Metrics
Reported Metrics
Common Metrics
Protocol Adapter Metrics
Minimum Message Size
Service Metrics
Metrics
Eclipse Hono™’s components report several metrics which may be used to gain some insight
into the running system. For instance, the HTTP adapter reports the number of successfully
processed telemetry messages. Some of these metrics are considered part of Hono’s external
interface. This section describes the semantics and format of the metrics, how they can be retrieved
and how to interpret actual values.
Reported Metrics
Hono uses Micrometer in combination with Spring Boot
to internally collect metrics. Those metrics can be exported to different
back ends. Please refer to Configuring Metrics
for details.
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Authentication API Specification
Get Token
Token Format
Resource Authorities
Operation Authorities
Authentication API Specification
The Authentication API is used to retrieve a token asserting a subject’s identity and granted authorities. Other service implementations use such a token to make authorization decisions on a client’s request to read or write from/to a resource or to invoke a certain operation.
The Authentication API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to an Authentication service using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.
Get Token
Clients use this operation to
verify a set of credentials and
retrieve a token asserting the authenticated subject’s identity and granted authorities.
Message Flow
The following sequence diagram illustrates the flow of messages involved in a Client retrieving a token.
Get Token message flow
The Client and Authentication service have agreed to use the SASL PLAIN mechanism for authenticating the client. The Client therefore sends the credentials of the identity it wants to retrieve a token for. The Authentication service successfully verifies the credentials and establishes the authorization ID.
IoT Core Services
4
What makes an IoT platform ?
Messaging Infrastructure
DeviceProvisioning
Business Services
Monitoring
Real time
streaming
Machine
Learning
…Authentication&
Authorization
Device Registration
Device Connectivity
SW Provisioning
5.
5
IoT Communication Patterns
Telemetry Inquiries Commands Notifications
Cloud
6.
6
Things Cloud
Command & Control
# adapters to authenticate using SASL EXTERNAL, i.e. an adapter needs to provide
# a client certificate that has been signed by one of the CA certs contained in
# the router's trust store.
# When opening the AMQP connection to the router, the adapter needs to indicate
# the 'hono-internal' virtual host name in its AMQP 1.0 'open' frame.
# The example Device Registry's AMQPS endpoint requires adapters to authenticate
# using SASL PLAIN, i.e. an adapter needs to provide a username and password which
# can be verified by the Auth Server component.
externalAdaptersEnabled: false
# amqpMessagingNetworkSpec contains Hono client properties used by all protocol
# adapters for connecting to the AMQP Messaging Network to forward downstream messages to.
# This property MUST be set if "amqpMessagingNetworkDeployExample" is set to false.
# Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
# for a description of supported properties.
amqpMessagingNetworkSpec:
# host: my-amqp-host
# port: 5671
# trustStorePath: /etc/conf/amqp-trust-store.pem
# credentialsPath: /etc/conf/amqp-credentials.properties
# commandAndControlSpec contains Hono client properties used by all protocol
vote
1answer
34 views
No more devices are able to connect to the MQTT Adapter
No more devices are able to connect to the MQTT Adapter. The Adapter log contains the message DefaultConnectionLimitManager - Connection limit (1) exceeded. What does it mean?
[vert.x-eventloop-...
eclipse-hono
asked Sep 24 '19 at 9:13
kaniyan
73944 silver badges77 bronze badges
3
votes
1answer
214 views
Connecting Eclipse Ditto to Apache Kafka
I am following the instructions explained in this documentation to connect Apache Kafka to Eclipse Ditto.
https://www.eclipse.org/ditto/connectivity-protocol-bindings-kafka2.html
I am not sure about ...
apache-kafka eclipse-hono eclipse-ditto eclipse-iot
asked Jul 23 '19 at 11:09
VigKam
47455 silver badges1616 bronze badges
1
vote
Go
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Registry
Auth
Auth
Protocol Adapter
Registration
Telemetry
Event
Qpid Dispatch
Router
Telemetry
Event
Credentials
Service
Auth
Credentials
Devices
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
[#2029] Fix issues caused by different vertx contexts being used by calohmn · Pull Request #2323 · eclipse/hono · GitHub
[#2288] Add integration tests verifying forwarding of QoS level in downstream messages by fkaltner · Pull Request #2320 · eclipse/hono · GitHub
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
17:20
calohmn synchronize #2312
17:18
sophokles73 on master
Support using Device Connection… (compare)
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
The following JVM options can be used in Java 9 and later in order to change this behavior:
-XX:MinRAMPercentage, -XX:MaxRAMPercentage and -XX:InitialRAMPercentage can be used to set the (minimum, maximum and initial) percentage of total memory that may be allocated for the heap. A value of 70-80% should work if no other processes are running in the same container.
Kubernetes
In Kubernetes (and OpenShift) the resource limits for a pod, and thus the container(s) that are part of the pod, can be configured in the corresponding PodSpec. The following example from the HTTP adapter’s Kubernetes Deployment resource descriptor illustrates the mechanism:
apiVersion: apps/v1beta1
kind: Deployment
metadata:
name: hono-adapter-http-vertx
spec:
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Please refer to Minikube’s getting started guide for instructions on how to set up a cluster locally.
The recommended settings for a Minikube VM used for running Hono’s example setup are as follows:
cpus: 2
memory: 8192 (MB)
The command to start the VM will look something like this:
minikube start --cpus 2 --memory 8192
After the Minikube VM has started successfully, the minikube tunnel command should be run in order to support Hono’s services being deployed using the LoadBalancer type. Please refer to the Minikube Loadbalancer docs for details.
Setting Kubernetes Version
Minikube will use the most recent Kubernetes version that was available when it has been compiled by default.
Hono should run on any version of Kubernetes starting with 1.13.6. However, it has been tested with several
specific versions only. The most recent version known to work is 1.15.4 so if you experience any issues with
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
instructions regarding installation and configuration.
Deploying custom Container Images
The chart by default installs Hono’s pre-built container images. In some cases it might be desirable to build Hono
from source, e.g. in order to use a different metrics back end or to use Jaeger tracing.
The container images created as part of the build process need to be made available to the Kubernetes cluster that
Hono should be installed to. This usually requires the images to be pushed to a (private) container registry that
the cluster can pull them from. Please refer to the documentation of the employed Kubernetes service provider for
details regarding the setup and configuration of a private container registry.
Deploying via a private Registry
The first step is getting the source code of Hono. Please refer to Building from Source for details.
Once the source code has been retrieved, the build process can be started using the following command:
# in base directory of Hono working tree:
mvn clean install -Pbuild-docker-image,metrics-prometheus
After the build process has finished, the custom container images need to be pushed to the registry so that the
Kubernetes cluster can pull them from there during deployment.
Assuming that the images should be tagged with 1.0.3-CUSTOM and the container registry name is my.registry.io,
the following command can be used to tag the locally built images and push them to the registry:
# in base directory of Hono working tree:
./push_hono_images.sh 1.0.3-CUSTOM my.registry.io
Note
Hono
13.
Concerns?Concerns?
Multiple HTTP adapters running - to which one did the
device connect?
Devices may be ready for a command without a
downstream message - how?
Hono
14.
Empty notification eventEmpty notification event
Hono
15.
HTTP Send Command (no data)HTTP Send Command (no data) Hono
16.
Command and ControlCommand and Control
MQTTMQTT
How to reach the devices?
Hono
17.
MQTT Telemetry Hono
The example deployment by default uses Prometheus as the metrics back end.
When deploying to Kubernetes/OpenShift, the metrics reported by Hono may contain
environment specific tags (like the pod name) which are added by the Prometheus
scraper. However, those tags are not part of the Hono metrics definition.
Hono applications may report other metrics in addition to the ones defined here.
In particular, all components report metrics regarding the JVM’s internal state, e.g.
memory consumption and garbage collection status. Those metrics are not considered
part of Hono’s official metrics definition. However, all those metrics
will still contain tags as described below.
Common Metrics
Tags for common metrics are:
Tag
Value
Description
host
string
The name of the host that the component reporting the metric is running on
component-type
adapter, service
The type of component reporting the metric
component-name
The Authentication service completes the SASL exchange with a successful outcome (SASL OK).
The Client continues by opening an AMQP connection with the Authentication service. The Authentication service creates a token asserting the authorization ID and authorities established during the SASL exchange and associates it with the connection.
The Client opens a receiving link using source address cbs.
The Authentication service opens the link and
sends the token associated with the connection to the Client.
The Client closes the connection.
Token Message Format
On successful establishment of the receiving link with the client as described above, the server sends a message to the client containing a token asserting the identity and authorities of the client that has been authenticated as part of establishing the underlying AMQP connection.
The following table provides an overview of the properties of the message sent to the client.
Name
Location
Type
Value
type
application-properties
string
amqp:jwt
The message’s body consists of a single AMQP 1.0 AmqpValue section which contains the UTF-8 representation of a JSON Web Token as defined in Token Format.
Token Format
The token returned by the get Token operation is a cryptographically signed JSON Web Token as defined by RFC 7519.
The token contains the following mandatory claims:
Telemetry
optimized for throughput
scale-out with #messages
optimized for reliability
scale-out with #devices
7.
7
IoT : Communication Patterns
Messaging patterns & protocols
● Telemetry & Notifications are about …
○ …. messaging publish/subscribe
● Commands & Inquiries are about …
○ … messaging request/response
● Different protocols (AMQP, MQTT, HTTP, …) implement them in
different way
○ As built-in support …
○ … or on top of it at application level
○ Read more on “Strengths And Weaknesses Of IoT Communication Patterns” *
* DZone IoT Guide : https://dzone.com/guides/iot-applications-protocols-and-best-practices
8.
8
# adapters for connecting to the AMQP Messaging Network which is used by applications
# to send commands to devices.
# This property MUST be set if "amqpMessagingNetworkDeployExample" is set to false.
# Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
# for a description of supported properties.
commandAndControlSpec:
# tenantSpec contains Hono client properties used by all protocol adapters for
# connecting to the Tenant service.
# This property MUST be set if "deviceRegistryExample.enabled" is set to false.
# Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
# for a description of supported properties.
tenantSpec:
# deviceRegistrationSpec contains Hono client properties used by all protocol adapters for
# connecting to the Device Registration service.
# This property MUST be set if "deviceRegistryExample.enabled" is set to false.
# Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
# for a description of supported properties.
deviceRegistrationSpec:
# credentialsSpec contains Hono client properties used by all protocol adapters for
1answer
142 views
How to get historical sensor data of a registered Hono Device
I am trying to send the below sensor values from the registered device in Hono to Ditto in order to form the digital twin of the registered device.
I am using the below command.
curl -X POST -i -u ...
eclipse-hono eclipse-ditto eclipse-iot
asked Jul 11 '19 at 16:44
VigKam
47455 silver badges1616 bronze badges
1
vote
2answers
206 views
Connecting Eclipse Hono to Ditto - “description”:“Check if all required JSON fields were set.”},“status”:400}" Error
I was successfully able to connect Hono to Ditto using AMQP adapters and I got the following messages in the log. The value sent from the demo device registered in Hono is successfully received and ...
eclipse-hono eclipse-ditto eclipse-iot
asked Jul 8 '19 at 19:46
VigKam
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Credentials API Specification
Preconditions for invoking the Credentials API
Get Credentials
Delivery States
Credentials Format
Secrets Format
Examples
Credential Verification
Standard Credential Types
Common Properties
Hashed Password
Pre-Shared Key
X.509 Certificate
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Device Registration API Specification
Preconditions for invoking the Device Registration API
Assert Device Registration
Delivery States
Device Registration API Specification
The Device Registration API is used by Hono’s protocol adapters to get information about devices connecting to the adapters.
The Device Registration API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.
Preconditions for invoking the Device Registration API
Client has established an AMQP connection with the Device Registration service.
Business
Applications
21.
21
Eclipse Hono
Telemetry & Event
● used by devices to send data/event downstream
● leverages on “direct messaging” …
○ Telemetry
○ Devices can send data only if consumers are online
○ No broker involved
● … “store and forward”
○ Event
○ Broker for storing event with a “ttl” eventually
● consumers receive data published by devices belonging to a particular tenant
22.
22
Eclipse Hono
Device Registration
● used to make Hono aware of devices that will connect to the service
● solutions/consumers may use the API to get information about devices
● operations
○ register, deregister, get information, assertion
Hono Client Configuration :: Eclipse Hono™
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Kura Adapter Configuration :: Eclipse Hono™
CoAP Adapter Configuration :: Eclipse Hono™
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
AMQP Adapter Configuration :: Eclipse Hono™
MQTT Adapter Configuration :: Eclipse Hono™
HTTP Adapter Configuration :: Eclipse Hono™
Configuring the Device Connection Service :: Eclipse Hono™
File Based Device Registry Configuration :: Eclipse Hono™
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
tenantAdapterStore should use tenantsProperties().getAdapter() by lhotari · Pull Request #2321 · eclipse/hono · GitHub
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Device Connection API Specification
Preconditions for invoking the Device Connection API
Set last known Gateway for Device
Get last known Gateway for Device
Set command-handling protocol adapter instance for device
Remove command-handling protocol adapter instance for device
Get command-handling protocol adapter instances for device
Standard Message Properties
Standard Request Properties
Standard Response Properties
Delivery States
Device Connection API Specification
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
17:18
sophokles73 closed #2318
17:13
kaniyan commented #2322
17:01
calohmn review_requested #2323
17:01
calohmn labeled #2323
17:01
calohmn labeled #2323
17:01
calohmn milestoned #2323
17:01
calohmn opened #2323
16:53
kaniyan on master
TenantAdapterStore should use t… (compare)
16:53
kaniyan closed #2321
16:38
sophokles73 synchronize #2318
16:17
sophokles73 milestoned #2320
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Tenant API Specification
Preconditions for invoking the Tenant API
Get Tenant Information
Tenant Information Format
Tracing Format
Trusted CA Format
Adapter Configuration Format
Resource Limits Configuration Format
Connection Duration Configuration Format
Data Volume Configuration Format
Resource Limits Period Configuration Format
Delivery States used by the Tenant API
Tenant API Specification
template:
metadata:
labels:
app: hono-adapter-http-vertx
spec:
containers:
name: eclipse-hono-adapter-http-vertx
resources:
limits:
memory: "256Mi"
ports:
- containerPort: 8080
protocol: TCP
env:
- name: SPRING_CONFIG_LOCATION
value: file:///etc/hono/
- name: SPRING_PROFILES_ACTIVE
value: dev
- name: LOGGING_CONFIG
value: classpath:logback-spring.xml
- name: _JAVA_OPTIONS
value: "-XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80"
volumeMounts:
- mountPath: /etc/hono
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Command & Control API Specification
Send a One-Way Command
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Event API Specification
running Hono on another version, please try to deploy to 1.15.4 before raising an issue.
You can use Minikube’s --kubernetes-version command line switch to set a particular version.
Setting up a Production Environment
Setting up a multi-node Kubernetes cluster is a more advanced topic. Please follow the corresponding links provided in the Kubernetes documentation.
Setting up an Environment on Microsoft Azure
This chapter describes how Hono can be deployed on Microsoft Azure. It includes:
Azure Resource Manager (ARM)
templates for an automated infrastructure deployment.
Helm based deployment of Hono to Azure Kubernetes Service (AKS).
Push Hono docker images to an Azure Container Registry (ACR).
Optional Azure Service Bus as
broker for the Hono AMQP 1.0 Messaging Network
instead of a self hosted ActiveMQ Artemis.
Virtual Network (VNet) service endpoints
ensure protected communication between AKS and Azure Service Bus.
Use for demos only
This deployment model is not meant for productive use but rather for evaluation as well as demonstration purposes or as a baseline to evolve a production grade Application architecture out of it which includes Hono.
Prerequisites
An Azure subscription.
Azure CLI installed to setup the infrastructure.
kubectl and helm
installed to deploy Hono into Azure Kubernetes Service (AKS)
Setup
As described here we will create an explicit service principal. Later we add roles to this principal to access the Azure Container Registry (ACR).
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API > Telemetry API Specification
Southbound Operations
Forward Telemetry Data
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > API
API
Documentation of the APIs defined by Eclipse Hono™.
For an overview of the available APIs, see the architecture documentation.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
You may need to log in to the (private) container registry before pushing the images.
The image names that Hono should use for starting up containers can be configured in a YAML file:
deviceRegistryExample:
imageName: "my.registry.io/eclipse/hono-service-device-registry-file:1.0.3-CUSTOM"
authServer:
imageName: "my.registry.io/eclipse/hono-service-auth:1.0.3-CUSTOM"
deviceConnectionService:
imageName: "my.registry.io/eclipse/hono-service-device-connection:1.0.3-CUSTOM"
adapters:
amqp:
imageName: "my.registry.io/eclipse/hono-adapter-amqp-vertx:1.0.3-CUSTOM"
mqtt:
imageName: "my.registry.io/eclipse/hono-adapter-mqtt-vertx:1.0.3-CUSTOM"
http:
imageName: "my.registry.io/eclipse/hono-adapter-http-vertx:1.0.3-CUSTOM"
Assuming that the YAML file is called imageNames.yaml, installation can then be done using:
helm install --dependency-update -n hono -f imageNames.yaml eclipse-hono eclipse-iot/hono
Deploying to Minikube
When using Minikube as the deployment target, things are a little easier. Minikube comes with an
embedded Docker daemon which can be used to build the container images instead of using a local
Docker daemon, thus eliminating the need to push the images to a registry altogether.
In order to use Minikube’s Docker daemon, the following command needs to be run:
eval $(minikube docker-env)
This will set the Docker environment variables to point to Minikube’s Docker daemon which can then be
18.
MQTT device:MQTT device:
when is the right time to send a command to thewhen is the right time to send a command to the
device?device?
Hono
19.
MQTT Command and Control Hono
20.
Time til disconnect extended
Hono
21.
MQTT Send Command Hono
22.
MQTT Send Command Response
Hono
23.
Live Demo - SetupLive Demo - Setup
Hono
24.
Demo setup
Hono
25.
Live DemoLive Demo
Hono
string
The name of the component reporting the metric.
The names of Hono’s standard components are as follows:
Component
component-name
Auth Server
hono-auth
Device Registry
hono-registry
AMQP adapter
hono-amqp
CoAP adapter
hono-coap
HTTP adapter
hono-http
Kura adapter
hono-kura-mqtt
MQTT adapter
hono-mqtt
Lora adapter
hono-lora
Sigfox adapter
hono-sigfox
Protocol Adapter Metrics
Name
Type
Value
sub
RFC 7519, Section 4.1.2
The authorization ID of the authenticated client. This represents the asserted identity.
exp
RFC 7519, Section 4.1.4
The point in time after which the claims contained in this token must be considered no longer valid. Clients MUST NOT use any information from a token that has expired.
The subject’s authorities on resources and operations are represented by additional JWT claims with a name identifying the resource or operation and a value containing the activities the subject is allowed to perform. The following activities are supported:
READ - The client is allowed to establish a receiving link using the resource’s node address as the link’s source address.
WRITE - The client is allowed to establish a sending link using the resource’s node address as the link’s target address.
EXECUTE - The client is allowed to invoke an operation on an endpoint, i.e. send a message over a link with a subject representing the operation name and the link’s target address representing the API endpoint’s node address.
The allowed activities are encoded in a claim’s value by means of simply concatenating the activities’ initial characters (R, W, E).
The token may contain any number of additional claims which may be ignored by clients that do not understand their meaning.
Resource Authorities
A client’s authority on a resource is represented by a JWT claim with a name containing the resource node address prefixed with r: and a value containing the activities the client is allowed to perform on the resource. The node address MAY contain one or more wildcard (*) characters to represent any string.
Example:
Assuming a client which is allowed to
send and consume events for tenant my-tenant and
IoT : Interoperability
Open standards
AMQP 1.0
MQTT
HTTP
CoAP
XMPP
STOMP
Here are some of the 14 ...
9.
9
● Microsoft Azure
○ IoT Hub
● Amazon Web Services
○ AWS IoT
● Google
○ IoT Core
● IBM
○ Watson IoT
IoT in the Cloud
Existing Offerings
10.
10
● They are not open source !
# connecting to the Credentials service.
# This property MUST be set if "deviceRegistryExample.enabled" is set to false.
# Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
# for a description of supported properties.
credentialsSpec:
# deviceConnectionSpec contains Hono client properties used by all protocol adapters for
# connecting to the Device Connection service.
# This property MUST be set if "deviceRegistryExample.enabled" and
# "deviceConnectionService.enabled" and "dataGridExample.enabled" are all set to false.
# Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
# for a description of supported properties.
deviceConnectionSpec:
# tenantIdleTimeout contains the amount of time of inactivity after
# which protocol adapters close tenant specific links to services they
# interact with.
# Please refer to the Spring Boot documentation for the supported syntax:
# https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-conversion-duration
defaultTenantIdleTimeout: "1h"
# mapperEndpoints contains configuration properties for the adapter's
# used mapper endpoints.
# If not set, the adapter by default has no mappers configured
47455 silver badges1616 bronze badges
1
vote
2answers
340 views
Connecting Eclipse Hono and Ditto
I have eclipse-hono installed in one machine and Eclipse ditto installed in the other which is connected to same WIFI. I am trying to consume data from Eclipse hono to Eclipse ditto.
I have created a ...
eclipse-hono eclipse-ditto eclipse-iot digital-twin
asked Jun 26 '19 at 16:24
VigKam
47455 silver badges1616 bronze badges
0
votes
1answer
252 views
How to set Keycloak as Authentication service provider (OIDC) for Eclipse Hono?
I am stuck configuring keycloak as the authentication and authorisation service provider for eclipse hono on our Kubernetes cluster (Using Rancher).
The Documentation gives little to no help about ...
java keycloak eclipse-hono eclipse-ditto eclipse-iot
asked Jun 15 '19 at 14:14
Futureman2007
5155 bronze badges
Credentials API Specification
The Credentials API is used by Protocol Adapters to retrieve credentials used to authenticate Devices connecting to the adapter. In particular, the API supports to look up shared secrets which are often used by IoT devices by means of username/password based authentication schemes.
Credentials are of a certain type which indicates which authentication mechanism the credentials can be used with. Each set of credentials also contains an authentication identity which is the identity claimed by the device during authentication. This authentication identity is usually different from the device-id the device has been registered under. A device may have multiple sets of credentials, using arbitrary authentication identities.
The Credentials API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.
Preconditions for invoking the Credentials API
Client has established an AMQP connection with the Credentials service.
Client connecting to Credentials service
Get Credentials
Protocol adapters use this command to look up credentials of a particular type for a device identity.
Message Flow
Client looking up credentials for a device
Request Message Format
The following table provides an overview of the properties a client needs to set on an get credentials message.
Name
Mandatory
Location
AMQP Type
Description
correlation-id
no
properties
message-id
MAY contain an ID used to correlate a response message to the original request. If set, it is used as the correlation-id property in the response, otherwise the value of the message-id property is used. Either this or the message-id property MUST be set.
Client connecting to Device Registration service
Assert Device Registration
Clients use this command to verify that a device is registered for a particular tenant and is enabled.
Message Flow
The following sequence diagram illustrates the flow of messages involved in a Client asserting a device’s registration status.
Client asserting a device's registration status
Request Message Format
The following table provides an overview of the properties a client needs to set on a message to assert a device’s registration status:
Name
Mandatory
Location
AMQP Type
Description
correlation-id
no
properties
message-id
MAY contain an ID used to correlate a response message to the original request. If set, it is used as the correlation-id property in the response, otherwise the value of the message-id property is used. Either this or the message-id property MUST be set.
device_id
yes
application-properties
string
MUST contain the ID of the device that is subject to the operation.
● for every message sent by a device …
○ a registration assertion (JWT) is attached by the protocol adapter
○ it’s verified by messaging before sending the message downstream
○ a disabled device will have such check fails
23.
23
Eclipse Hono
Command & Control
● used by applications to send commands to devices
● command execution can be “just in time” or “deferred”
○ just in time : command already executed, the response from device contains the
result
○ deferred : command not executed yet, the response from device specifies it’s
accepted; for long running operations the result will be provided later
24.
24
Eclipse Hono
Authentication
● handle authentication between components (protocol adapters, messaging, …)
● used by clients/components for getting a token asserting …
○ subject’s identity
○ granted authorities
● other services will use such a token to make authorization decisions on a client’s
request to read or write from/to a resource or to invoke a certain operation
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
The Device Connection API is used by Protocol Adapters to set and retrieve information about the connections from devices or gateways to the protocol adapters.
The Device Connection API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.
Preconditions for invoking the Device Connection API
Client has established an AMQP connection with the Device Connection service.
Client connecting to Device Connection service
Set last known Gateway for Device
Clients use this command to set the gateway that last acted on behalf of a given device.
As this operation is invoked frequently by Hono’s components, implementors may choose to keep this information in memory. This API doesn’t mandate checks on the validity of the given device or gateway IDs in order not to introduce a dependency on the Device Registration API. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.
Message Flow
Client sets the last known gateway for a device
Request Message Format
The following table provides an overview of the properties a client needs to set on a message to set the last known gateway for a device in addition to the Standard Request Properties.
Name
Mandatory
Location
AMQP Type
Description
subject
yes
properties
string
MUST be set to set-last-gw.
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
16:17
sophokles73 labeled #2320
16:17
sophokles73 edited #2320
16:16
lhotari commented #2321
16:15
lhotari synchronize #2321
16:15
lhotari synchronize #2321
16:15
lhotari review_requested #2321
16:09
sophokles73 on master
#2301 Add ITs for auto provisio… (compare)
Kai Hudalla
@sophokles73
@calohmn yes, tha tis true. I believe, nobody has any objections regarding disabling Travis CI for Hono? @dejanb @ctron @kaniyan ?
Jens Reimann
@ctron
big +1!
Florian Kaltner
The Tenant API is used by Hono’s protocol adapters to retrieve information that affects all devices belonging to a particular tenant.
A tenant is a logical entity, which groups together a set of devices. The information registered for a tenant is used for example to
determine if devices belonging to the tenant are allowed to connect to a certain protocol adapter or if devices are required to authenticate.
This document describes the Tenant API’s operations and the payload data format used by them.
Please refer to Multi Tenancy for details regarding the way Hono supports multiple tenants.
The Tenant API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using an AMQP 1.0 client in order to invoke operations of the API as described in the following sections.
Preconditions for invoking the Tenant API
Client has established an AMQP connection with the Tenant service.
Client has established an AMQP link in role sender on the connection using target address tenant. This link is used by the client to send request messages to the Tenant service.
Client connecting to Tenant service
Get Tenant Information
Clients use this operation to retrieve information about a tenant.
Message Flow
The following sequence diagram illustrates the flow of messages involved in a Client retrieving tenant information.
Client retrieving tenant information
Request Message Format
The following table provides an overview of the properties a client needs to set on a message to get tenant information:
Name
Mandatory
Location
AMQP Type
Description
correlation-id
name: conf
readOnly: true
volumes:
- name: conf
secret:
secretName: hono-adapter-http-vertx-conf
The resources property defines the overall limit of 256 MB of memory that the pod may use. The _JAVA_OPTIONS environment variable is again used to configure the JVM to use 80% of the total memory for its heap.
Limiting the Number of Device Connections
Hono supports limiting the overall number of simultaneously connected devices per tenant. Please refer to the connections limit concept for more information. The limit needs to be configured at the tenant level using the resource-limits configuration property. Please refer to the Tenant API for configuration details.
Limiting the Overall Connection Time
Hono supports configuring limits based on the overall amount of time that the devices have already been connected to protocol adapters for a tenant. Please refer to the connection duration limit for more information. Before accepting any connection requests from the devices, the protocol adapters verify that the configured connection duration limit is not exceeded. If the limit has been already reached, then the connection request is rejected. The limit needs to be configured at the tenant level using the resource-limits configuration property. Please refer to the Tenant API for configuration details.
Limiting the Data Volume
Hono supports limiting the amount of data that devices of a tenant can publish to Hono during a given time interval. Please refer to the messages limit concept for more information. The limit needs to be configured at the tenant level using the resource-limits configuration property. Please refer to the Tenant API for configuration details.
Send a (Request/Response) Command
Command & Control API Specification
The Command & Control API of Eclipse Hono™ is used by Business Applications to send commands to connected devices.
Commands can be used to trigger actions on devices. Examples include updating a configuration property, installing a software component or switching the state of an actuator.
Hono distinguishes two types of commands. The first type is one-way only. In this case the sender of the command does not expect the device to send back a message in response to the command. This type of command is referred to as a one-way command in the remainder of this page. One-way commands may be used to e.g. notify a device about a change of state.
The second type of commands expects a response to be sent back from the device as a result of processing the command. In this case the response contains a status code which indicates whether the command could be processed successfully. If so, the response may also include data representing the result of processing the command. This type of command is plainly referred to as a command because it represents the default case.
The Command & Control API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using AMQP 1.0 in order to invoke operations of the API as described in the following sections. Throughout the remainder of this page we will simply use AMQP when referring to AMQP 1.0.
Send a One-Way Command
Business Applications use this operation to send a command to a device for which they do not expect to receive a response from the device.
Preconditions
The Business Application has established an AMQP connection with the AMQP 1.0 Network.
The following sequence diagram illustrates the establishment of the required link:
Application connecting to the AMQP 1.0 Messaging Network
Message Format
The following table provides an overview of the properties the Business Application needs to set on a one-way command message.
Name
Mandatory
Location
Type
Description
to
yes
properties
Southbound Operations
Forward Event
Northbound Operations
Receive Events
Well-known Event Message Types
Empty Notification
Connection Event
Event API Specification
The Event API is used by Protocol Adapters to send event messages downstream.
Business Applications and other consumers use the API to receive messages published by devices belonging to a particular tenant.
The Event API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using AMQP 1.0 in order to invoke operations of the API as described in the following sections. Throughout the remainder of this page we will simply use AMQP when referring to AMQP 1.0.
Southbound Operations
The following operations can be used by Protocol Adapters to forward event messages received from devices to downstream consumers like Business Applications.
Forward Event
Preconditions
Adapter has established an AMQP connection with the AMQP Messaging Network.
The device for which the adapter wants to send an event has been registered (see Device Registration API).
Hono supports AT LEAST ONCE delivery of Event messages only. A client therefore MUST use unsettled for the snd-settle-mode and first for the rcv-settle-mode fields of its attach frame during link establishment. All other combinations are not supported by Hono and may result in the termination of the link or connection (depending on the configuration of the AMQP Messaging Network).
The AMQP messages used to forward events to the AMQP Messaging Network MUST have their durable property set to true. The AMQP Messaging Network is expected to write such messages to a persistent store before settling the transfer with the accepted outcome.
Message Flow
The following sequence diagram illustrates the flow of messages involved in the MQTT Adapter forwarding an event to the downstream AMQP Messaging Network.
Forward event flow
Device 4711 publishes an event using MQTT QoS 1.
# Create service principal
service_principal=`az ad sp create-for-rbac --name http://honoServicePrincipal --skip-assignment --output tsv`
app_id_principal=`echo $service_principal | cut -f1 -d ' '`
password_principal=`echo $service_principal | cut -f4 -d ' '`
object_id_principal=`az ad sp show --id $app_id_principal --query objectId --output tsv`
Note: it might take a few seconds until the principal is available for the next steps.
Now we create the Azure Container Registry instance and provide read access to the service principal.
# Resource group where the ACR is deployed.
# Name of your ACR.
# Full name of the ACR.
acr_login_server=$acr_registry_name.azurecr.io
az acr create --resource-group $acr_resourcegroupname --name $acr_registry-name --sku Basic
acr_id_access_registry=`az acr show --resource-group $acr_resourcegroupname --name $acr_registry_name --query "id" --output tsv`
az role assignment create --assignee $app_id_principal --scope $acr_id_access_registry --role Reader
With the next command we will use the provided Azure Resource Manager (ARM) templates to setup the AKS cluster. This might take a while.
resourcegroup_name=hono
az group create --name $resourcegroup_name --location "westeurope"
unique_solution_prefix=myprefix
cd deploy/src/main/deploy/azure/
az group deployment create --name HonoBasicInfrastructure --resource-group $resourcegroup_name --template-file arm/honoInfrastructureDeployment.json --parameters uniqueSolutionPrefix=$unique_solution_prefix servicePrincipalObjectId=$object_id_principal servicePrincipalClientId=$app_id_principal servicePrincipalClientSecret=$password_principal
Notes:
add the following parameter in case you want to opt for the Azure Service Bus as broker in the
Hono AMQP 1.0 Messaging Network instead of
Northbound Operations
Receive Telemetry Data
Telemetry API Specification
The Telemetry API is used by Protocol Adapters to send telemetry data downstream.
Business Applications and other consumers use the API to receive data published by devices belonging to a particular tenant.
The Telemetry API is defined by means of AMQP 1.0 message exchanges, i.e. a client needs to connect to Hono using AMQP 1.0 in order to invoke operations of the API as described in the following sections. Throughout the remainder of this page we will simply use AMQP when referring to AMQP 1.0.
Southbound Operations
The following operations can be used by Protocol Adapters to forward telemetry data received from devices to downstream consumers like Business Applications.
Forward Telemetry Data
Preconditions
Adapter has established an AMQP connection with the AMQP Messaging Network.
The device for which the adapter wants to send telemetry data has been registered (see Device Registration API).
The adapter indicates its preferred message delivery mode by means of the snd-settle-mode and rcv-settle-mode fields of its attach frame during link establishment.
snd-settle-mode
rcv-settle-mode
Delivery semantics
unsettled, mixed
first
Using unsettled for the snd-settle-mode allows for adapters to implement both AT LEAST ONCE or AT MOST ONCE delivery semantics, depending on whether the adapter waits for and considers the disposition frames it receives from the AMQP Messaging Network or not. This is the recommended mode for forwarding telemetry data.
settled
used for building the container images and storing them locally in the Minikube VM.
In any case the build process can be started using the following command:
# in base directory of Hono working tree:
mvn clean install -Pbuild-docker-image,metrics-prometheus
The newly built images can then be deployed using Helm:
helm install --dependency-update -n hono eclipse-hono eclipse-iot/hono
Using Jaeger Tracing
Hono’s components are instrumented using OpenTracing to allow tracking of the distributed processing of messages flowing through the system.
The Hono chart can be configured to report tracing information to the Jaeger tracing system. The Spans reported
by the components can then be viewed in a web browser.
In order for Hono’s components to use the Jaeger client for reporting tracing information, the container images need to be built
with the jaeger Maven profile. Please refer to Monitoring & Tracing for details.
The newly built images also need to be made available to the target Kubernetes cluster as described in the two previous sections.
The chart can be configured to deploy and use an example Jaeger back end by means of setting the jaegerBackendExample.enabled property
to true when running Helm:
helm install --dependency-update -n hono --set jaegerBackendExample.enabled=true eclipse-hono eclipse-iot/hono
This will create a Jaeger back end instance suitable for testing purposes and will configure all deployed Hono components to use the
Jaeger back end.
The following command can then be used to return the IP address with which the Jaeger UI can be accessed in a
browser (ensure minikube tunnel is running when using minikube):
If no example Jaeger back end should be deployed but instead an existing Jaeger installation should be used,
the chart’s jaegerAgentConf property can be set to environment variables which are passed in to
the Jaeger Agent that is deployed with each of Hono’s components.
26.
SummarySummary
Put Hono at the center of your setup...Put Hono at the center of your setup...
and it can handle theand it can handle the device connectivitydevice connectivity of yourof your
applications.applications.
connect to large number of devices
no device protocols in the application
since 0.8 with full support for Command and
Control.
Hono
27.
Thank you!Thank you!
Time for questions
Hono
28.
Command and Control - HTTP DemoCommand and Control - HTTP Demo
$ curl -X POST -i -u sensor1@DEFAULT_TENANT:hono-secret
-H 'Content-Type: application/json'
http://localhost:8080/telemetry?hono-ttd=30
HTTP/1.1 200 OK
hono-command: setBrightness
hono-cmd-req-id: 101196a89a1c-68a7-4097-9311-53651b8596b5
Additional tags for protocol adapters are:
Name
Value
Description
direction
one-way, request, response
The direction in which a Command & Control message is being sent:one-way indicates a command sent to a device for which the sending application doesn’t expect to receive a response.request indicates a command request message sent to a device.response indicates a command response received from a device.
qos
0, 1, unknown
The quality of service used for a telemetry or event message.0 indicates at most once,1 indicates at least once and none indicates unknown delivery semantics.
status
forwarded, unprocessable, undeliverable
The processing status of a message.forwarded indicates that the message has been forwarded to a downstream consumerunprocessable indicates that the message has not been processed not forwarded, e.g. because the message was malformedundeliverable indicates that the message could not be forwarded, e.g. because there is no downstream consumer or due to an infrastructure problem
tenant
string
The identifier of the tenant that the metric is being reported for
ttd
command, expired, none
A status indicating the outcome of processing a TTD value contained in a message received from a device.command indicates that a command for the device has been included in the response to the device’s request for uploading the message.expired indicates that a response without a command has been sent to the device.none indicates that either no TTD value has been specified by the device or that the protocol adapter does not support it.
type
telemetry, event
The type of (downstream) message that the metric is being reported for.
consume telemetry data for all tenants
the corresponding claims (in the token’s JSON representation) would look like this:
{
...
"r:event/my-tenant": "RW",
"r:telemetry/*": "R",
...
}
Operation Authorities
A client’s authority to invoke an endpoint’s operation(s) is represented by a JWT claim with a name containing the endpoint’s node address and operation identifier prefixed with o: and a value of E (for EXECUTE). The endpoint node address MAY contain one or more wildcard (*) characters to represent any string. The operation identifier is the subject value defined by the corresponding API for the operation. The operation identifier MAY be set to * to represent any operation of the endpoint.
Example:
Assuming a client which is allowed to
invoke the Device Registration API’s assert Registration operation for any tenant and
invoke all methods of the Credentials API for tenant my-tenant
the corresponding claims (in the token’s JSON representation) would look like this:
{
...
"o:registration/*:assert": "E",
"o:credentials/my-tenant:*": "E",
...
}
● Freedom of choice
○ On-premise or in the cloud
○ Ability to choose which cloud
○ Open Standards protocols allows users to choose client freely
● Migrating from one to the other can be complex
Cloud provider limitations
11.
11
● An Eclipse Foundation IoT project ...
○ Bosch and Red Hat as main contributors
● https://www.eclipse.org/hono/
Eclipse Hono
Connect. Command. Control.
12.
12
● Open source IoT connectivity platform running on …
○ Kubernetes
○ OpenShift
○ Docker Swarm
● On-premise & in the cloud
● Provided as a set of Docker images
Eclipse Hono
Connect. Command. Control.
13.
mapperEndpoints:
# mapperName:
# host: eclipse.org
# uri: /hono/map
# ssl: true
# port: 443
amqp:
# enabled indicates if Hono's AMQP 1.0 adapter should be deployed.
enabled: true
# imageName contains the name (excluding registry)
# of the container image to use for the AMQP adapter
imageName: eclipse/hono-adapter-amqp-vertx
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
0
votes
0answers
98 views
Issue while consuming data from Hono
I have a problem for consuming data using the my IP address when I running Hono receiver using CLI as described in this url
I tried to use this command from hono root by running the jar file using ...
eclipse-hono
asked Apr 1 '19 at 13:31
Rad Rad
1111 bronze badge
1
2
Next
The Overflow Blog
Podcast 288: Tim Berners-Lee wants to put you in a pod. A web pod.
The macro problem with microservices
Featured on Meta
A big thank you, Tim Post
“Question closed” notifications experiment results and graduation
Related Tags
eclipse-ditto × 11
message-id
no
properties
string
MAY contain an identifier that uniquely identifies the message at the sender side. Either this or the correlation-id property MUST be set.
reply-to
yes
properties
string
MUST contain the source address that the client wants to receive response messages from. This address MUST be the same as the source address used for establishing the client’s receive link (see Preconditions).
subject
yes
properties
string
MUST contain the value get.
The body of the request MUST consist of a single Data section containing a UTF-8 encoded string representation of a single JSON object having the following members:
Name
Mandatory
JSON Type
Description
gateway_id
no
application-properties
string
The identifier of the gateway that wants to get an assertion on behalf of another device (given in the device_id property).An implementation SHOULD verify that the gateway exists, is enabled and is authorized to get an assertion for, and thus send data on behalf of, the device.
message-id
no
properties
string
MAY contain an identifier that uniquely identifies the message at the sender side. Either this or the correlation-id property MUST be set.
reply-to
yes
properties
string
MUST contain the source address that the client wants to received response messages from. This address MUST be the same as the source address used for establishing the client’s receive link (see Preconditions).
subject
yes
properties
string
MUST be set to assert.
The body of the message SHOULD be empty and will be ignored if it is not.
Response Message Format
The following table provides an overview of the properties contained in a response message to an assert request:
Name
○ i.e. messaging checks if an adapter can write telemetry data
● Where an identity management system is already in place (i.e. Keycloak) …
○ needs for having a “facade” from this API to such a system
25.
25
Eclipse Hono
Credentials
● handle authentication for devices on protocol adapters
● used by protocol adapters to retrieve credentials used to authenticate devices
connecting to the adapter (MQTT, HTTP, …)
● different types of credentials
○ psk, hashed password, public key, …
● operations
○ add, get, update, remove
● Where an identity management system is already in place (i.e. Keycloak) …
○ needs for having a “facade” from this API to such a system
26.
26
IoT : how to deploy ?
● “On premise” …
○ … maybe for a not so big solution
○ … ingesting few data and handling few devices
● “Cloud” …
MongoDB Based Device Registry Configuration :: Eclipse Hono™
Auth Server Configuration :: Eclipse Hono™
Common Configuration :: Eclipse Hono™
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Admin Guide :: Eclipse Hono™
Load Tests with JMeter :: Eclipse Hono™
Sigfox Adapter :: Eclipse Hono™
Kura Adapter :: Eclipse Hono™
CoAP Adapter :: Eclipse Hono™
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Developer Guide > Consuming Messages from Java
Configure the example
Run the example
Telemetry and Event messages
Command and Control
Encryption of communication
Consuming Messages from Java
To illustrate how Eclipse Hono™ can be integrated with Java code, a simple application is provided that consumes telemetry and event data
for devices belonging to the default tenant.
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
1.3
1.2
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Developer Guide > AMQP Adapter Client for Java
Usage in a Gateway
Tracing
AMQP Adapter Client for Java
Eclipse Hono™ comes with a Java client for the AMQP adapter. It is intended for the implementation of
(prototype) devices, (protocol) gateways or (end-to-end) tests. The client is based on Eclipse Vert.x.
The starting point is the class AmqpAdapterClientFactory.
The factory provides methods to get a receiver for receiving commands and a sender for each of the following actions:
send a telemetry message
send an event message
send a response to a previously received command
Do not re-use sender instances
The senders manage the underlying AMQP sender links, which are restored after temporary interruption of the connection
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Developer Guide > Building from Source
Prerequisites for building Hono
Docker
Java
Maven
Git
Getting the Hono Source Code
Starting the Hono Build Process
Perform the integration tests
Building from Source
This page provides step by step instructions for getting the source code and building the Hono’s Docker images from it.
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Developer Guide
Developer Guide
Learn how to build Eclipse Hono™ and how to integrate your custom components with it.
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Monitoring & Tracing
Monitoring
Configuring a Metrics Back End
Using Prometheus
Health Check Server Configuration
Tracing
Configuring a Tracer
Configuring usage of Jaeger tracing (included in Docker images)
Enforcing the recording of traces for a tenant
Monitoring & Tracing
When a device uploads telemetry data to the HTTP adapter, the adapter invokes operations on the Device Registration, Credentials and the Tenant services in order to authenticate and authorize the device before sending the telemetry data downstream to the AMQP 1.0 Messaging Network. The overall success of this process and the latency involved before the message reaches the consumer is determined by the individual interactions between the service components.
Monitoring
In a production environment, an operations team will usually want to keep track of some key performance indicators (KPI) which allow the team to determine the overall health of the system, e.g. memory and CPU consumption etc. Hono supports the tracking of such KPIs by means of metrics it can be configured to report. The metrics are usually collected in a time series database like InfluxDB or Prometheus and then visualized on a monitoring dash-board built using frameworks like Grafana. Such a dash-board can usually also be configured to send alarms when certain thresholds are exceeded.
gateway_id
yes
application-properties
string
The identifier of the gateway that last acted on behalf of the device identified by the device_id property. If a device connects directly instead of through a gateway, the device’s identifier MUST be specified here.
The body of the message SHOULD be empty and will be ignored if it is not.
Response Message Format
A response to a set last known gateway for device request contains the Standard Response Properties.
The response message’s status property may contain the following codes:
Code
Description
204
OK, the last known gateway for the device has been updated.
400
Bad Request, the last known gateway has not been updated due to invalid or missing data in the request.
Implementors of this API may return a 404 status code in order to indicate that no device and/or gateway with the given identifier exists for the given tenant. However, performing such a check is optional.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred.
Get last known Gateway for Device
Clients use this command to retrieve the gateway that last acted on behalf of a given device.
Message Flow
Client retrieving the last known gateway for a device
Request Message Format
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Secure Communication
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > AMQP 1.0 Messaging Network Configuration
Dispatch Router Configuration
Artemis Broker Configuration
AMQP 1.0 Messaging Network Configuration
The Qpid Dispatch Router, together with the Apache Artemis message broker, serves as the default AMQP 1.0 Messaging Network that is used in Hono’s example deployment as described in the Deployment Guides.
The Dispatch Router component exposes service endpoints implementing the north bound part of Hono’s Telemetry, Event and Command & Control APIs which are used by applications to interact with devices.
Dispatch Router Configuration
The Dispatch Router is part of the Apache Qpid project. Hono uses Dispatch Router by means of the EnMasse project’s Dispatch Router Docker image created from the Qpid project source code.
The Dispatch Router can be configured by means of configuration files. Hono includes an example configuration in the deploy/src/main/config/qpid folder which is used by the example deployment scripts. Please refer to the Dispatch Router documentation for details regarding the configuration file format and options.
@fkaltner
@ctron Can you take a look at eclipse/hono#2189 again?
Karthees Kalidass
@kaniyan
@sophokles73 +1 from my side
Kai Hudalla
@sophokles73
ok, I have disabled the Travis build on master and the 1.4.x branch ...
Kai Hudalla
@sophokles73
@/all Everybody, please join me in welcoming Kartheeswaran Kalidass as a new committer on the Eclipse Hono project! Well deserved, @kaniyan :-)
Abel Büchner-Mihaljević
@b-abel
@kaniyan Congratulations, Karthees! You deserve this
Karthees Kalidass
@kaniyan
@sophokles73 Thank you for the warm welcome and support :-) I am very happy and enthusiastic regarding this committer role.
@b-abel Thank you :-)
Thank you @calohmn for nominating me. Also thanks to @ctron @dejanb @sophokles73 @sysexcontrol for your positive votes and including me in the committers community.
Florian Kaltner
@fkaltner
no
properties
message-id
MAY contain an ID used to correlate a response message to the original request. If set, it is used as the correlation-id property in the response, otherwise the value of the message-id property is used. Either this or the message-id property MUST be set.
message-id
no
properties
string
MAY contain an identifier that uniquely identifies the message at the sender side. Either this or the correlation-id property MUST be set.
reply-to
yes
properties
string
MUST contain the source address that the client wants to receive response messages from. This address MUST be the same as the source address used for establishing the client’s receive link (see Preconditions).
subject
yes
properties
string
MUST be set to get.
The body of the request message MUST consist of a single Data section containing a UTF-8 encoded string representation of a single JSON object.
The JSON object MUST contain exactly one of the following search criteria properties:
string
subject
yes
properties
string
The name of the command to be executed by the device.
content-type
no
properties
string
If present, MUST contain a Media Type as defined by RFC 2046 which describes the semantics and format of the command’s input data contained in the message payload. However, not all protocol adapters will support this property as not all transport protocols provide means to convey this information, e.g. MQTT 3.1.1 has no notion of message headers.
message-id
no
properties
string
An identifier that uniquely identifies the message at the sender side.
The command message MAY contain arbitrary payload to be sent to the device in a single AMQP Data section. The value of the message’s subject property may provide a hint to the device regarding the format, encoding and semantics of the payload data.
Hono indicates the outcome of the operation by means of the following AMQP delivery states:
Delivery State
Description
accepted
The command has been delivered to the device for processing.
released
MQTT Adapter transfers data to AMQP 1.0 Messaging Network.
AMQP 1.0 Messaging Network acknowledges reception of the message.
MQTT Adapter acknowledges the reception of the message to the Device.
When the AMQP Messaging Network fails to settle the transfer of an event message or settles the transfer with any other outcome than accepted, the protocol adapter MUST NOT try to re-send such rejected messages but MUST indicate the failed transfer to the device if the transport protocol provides means to do so.
Message Format
See Telemetry API for definition of message format.
Northbound Operations
Receive Events
Hono delivers messages containing events reported by a particular device in the same order that they have been received in (using the Forward Event operation).
Hono supports multiple non-competing Business Application consumers of event messages for a given tenant. Hono allows each Business Application to have multiple competing consumers for event messages for a given tenant to share the load of processing the messages.
Preconditions
Client has established an AMQP connection with Hono.
Hono supports AT LEAST ONCE delivery of Event messages only. A client therefore MUST use unsettled for the snd-settle-mode and first for the rcv-settle-mode fields of its attach frame during link establishment. All other combinations are not supported by Hono and result in the termination of the link.
Message Flow
The following sequence diagram illustrates the flow of messages involved in a Business Application receiving an event message from Hono.
Receive event data flow (success)
AMQP 1.0 Messaging Network delivers event message to Business Application.
Business Application acknowledges reception of message.
Message Format
See Telemetry API for definition of message format.
Well-known Event Message Types
Hono defines several well-known event types which have specific semantics. Events of these types are identified by means of the AMQP message’s content-type.
Empty Notification
deploying a (self-hosted) ActiveMQ Artemis into AKS: serviceBus=true
add the following parameter to define the k8s version of the AKS cluster. The default as defined in the
template might not be supported in your
target Azure region, e.g. kubernetesVersion=1.14.6
After the deployment is complete you can set your cluster in kubectl.
az aks get-credentials --resource-group $resourcegroup_name --name $aks_cluster_name
Next create retain storage for the device registry.
kubectl apply -f managed-premium-retain.yaml
Now Hono can be installed to the AKS cluster as describe in the Helm based installation
guide.
Monitoring
You can monitor your cluster using
Azure Monitor for containers.
Navigate to https://portal.azure.com -> your resource group -> your kubernetes cluster
On an overview tab you fill find an information about your cluster (status, location, version, etc.). Also, here
you will find a Monitor Containers link. Navigate to Monitor Containers and explore metrics and statuses of
your Cluster, Nodes, Controllers and Containers.
Cleaning up
Use the following command to delete all created resources once they are no longer needed:
az group delete --name $resourcegroup_name --yes --no-wait
first
Using settled for the snd-settle-mode allows for adapters to implement AT MOST ONCE delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice.
All other combinations are not supported by Hono and may result in the termination of the link or connection (depending on the configuration of the AMQP Messaging Network).
Message Flow
As indicated above, it is up to the discretion of the protocol adapter whether it wants to use AT LEAST ONCE or AT MOST ONCE delivery semantics.
Hono’s HTTP adapter allows devices to indicate, which delivery semantics they want to use when uploading telemetry data.
The HTTP adapter always forwards messages unsettled and either ignores the outcome of the message transfer (AT MOST ONCE) or waits for the downstream peer to accept the message (AT LEAST ONCE) before acknowledging the reception of the message to the device.
The following sequence diagram illustrates the flow of messages involved in the HTTP Adapter forwarding an unsettled telemetry data message to the downstream AMQP Messaging Network implementing AT MOST ONCE delivery semantics.
Forward telemetry data flow (AT MOST ONCE)
Device 4711 PUTs telemetry data to the HTTP Adapter
HTTP Adapter transfers telemetry data to AMQP 1.0 Messaging Network.
HTTP Adapter acknowledges the reception of the data to the Device.
AMQP 1.0 Messaging Network acknowledges reception of the message which is ignored by the HTTP Adapter.
Note
In the example above the HTTP adapter does not wait for the outcome of the transfer of the message to the AMQP Messaging Network before sending back the HTTP response to the device.
If the messaging network had sent a disposition frame with the rejected instead of the accepted outcome, the HTTP adapter would still have signaled a 202 status code back to the device. In this case the data would have been lost without the device noticing.
The following sequence diagram illustrates the flow of messages involved in the HTTP Adapter forwarding an unsettled telemetry data message to the downstream AMQP Messaging Network implementing AT LEAST ONCE delivery semantics.
Forward telemetry data flow (AT LEAST ONCE)
Device 4711 PUTs telemetry data to the HTTP Adapter, indicating QoS Level 1.
HTTP Adapter transfers telemetry data to AMQP 1.0 Messaging Network.
AMQP 1.0 Messaging Network acknowledges reception of the message.
HTTP Adapter acknowledges the reception of the data to the Device.
When the AMQP Messaging Network fails to settle the transfer of a telemetry message or settles the transfer with any other outcome than accepted, the protocol adapter MUST NOT try to re-send such rejected messages but SHOULD indicate the failed transfer to the device if the transport protocol provides means to do so.
helm install --dependency-update -n hono --set jaegerAgentConf.REPORTER_TYPE=tchannel --set jaegerAgentConf.REPORTER_TCHANNEL_HOST_PORT=my-jaeger-collector:14267 eclipse-hono eclipse-iot/hono
Deploying to Azure Kubernetes Service (AKS)
The following chapter describes how to use Azure Kubernetes Service (AKS) as a deployment target that has
been set up as described in the Setting up a Kubernetes Cluster guide.
First we build the docker images and push them into the ACR. Note that if you define a custom image tag
you have to provide the helm with the image tags as described in the chapters above.
# Resource group where the ACR is deployed.
# Name of your ACR.
# Full name of the ACR.
acr_login_server=$acr_registry_name.azurecr.io
# Authenticate your docker daemon with the ACR.
az acr login --name $ACR_NAME
# Build images.
cd hono
mvn install -Pbuild-docker-image -Ddocker.registry=$acr_login_server
# Push images to ACR.
./push_hono_images.sh 1.0.0-SNAPSHOT $acr_login_server
Now we can retrieve settings from the deployment for the following steps:
# Resource group of the AKS deployment
Content-Type: application/json
Content-Length: 23
{
"brightness" : 20
}
Hono
29.
Command and Control - HTTP DemoCommand and Control - HTTP Demo
Device is ready to receive a command :
[TimeUntilDisconnectNotification{
tenantId='DEFAULT_TENANT', deviceId='4711', ttd='30',
readyUntil=2018-09-14T15:26:21.008Z}
].
received telemetry [tenant: DEFAULT_TENANT, device: 4711,
Sending command [setBrightness] to [DEFAULT_TENANT/4711].
Hono
30.
Command and Control - HTTP DemoCommand and Control - HTTP Demo
$ curl -X POST -i -u sensor1@DEFAULT_TENANT:hono-secret
-H 'Content-Type: application/json'
http://localhost:8080/control/res/
101021bbb4cb-305d-4040-b5bb-c1044ea74d2c?
hono-cmd-status=200
Additional tags for hono.connections.attempts:
Name
Value
Description
outcome
adapter-disabled, connection-duration-exceeded,data-volume-exceeded, registration-assertion-failure,succeeded, tenant-connections-exceeded,unauthorized, unavailable, unknown
The outcome of a device’s connection attempt.adapter-connections-exceeded indicates that the maximum number of connections that the adapter instance can handle are exceededadapter-disabled indicates that the protocol adapter is not enabled for the device’s tenantconnection-duration-exceeded indicates that the overall amount of time that a tenant’s devices may be connected to an adapter has exceededdata-volume-exceeded indicates that the overall amount of data that a tenant’s device may transfer per time period has exceededregistration-assertion-failure indicates that the device is either unknown or disabledsucceeded indicates a successfully established connectiontenant-connections-exceeded indicates that the maximum number of devices that may be connected simultaneously for a tenant has been exceededunauthorized indicates that the device failed to authenticateunavailable indicates that some of Hono’s (required) services are not availableunknown indicates an unknown reason.
Additional tags for hono.downstream.sent:
Name
Value
Description
outcome
received, accepted, rejected, released, modified, declared, transactionalState, and aborted
Any of the AMQP 1.0 disposition states, as well as aborted, in the case the connection/link was closed before the disposition could be read.
Metrics provided by the protocol adapters are:
Metric
Type
Tags
Description
hono.commands.received
Timer
host, component-type, component-name, tenant, type, status, direction
The time it took to process a message conveying a command or a response to a command.
13
● Interact with devices regardless of communication protocol
● Support large number of devices (106
)
● Don't trade in throughput for reliability
● Support arbitrary device protocols (MQTT, HTTP, CoAP, AMQP 1.0, etc)
● Integrate with existing infrastructure
Eclipse Hono
Goals
14.
14
● Uniform APIs for interacting with devices (regardless of protocol)
● Out-of-the-Box Connectivity for Devices supporting MQTT or HTTP
○ Additional protocols by implementing custom Protocol Adapters
● Device-level Authentication
● Tenant based Security Model
● Support for arbitrary messaging infrastructure (AMQP 1.0 based)
● Horizontal Scalability
● End-to-End Flow Control
Eclipse Hono
Features
15.
15
Eclipse Hono
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "300Mi"
limits:
cpu: "1"
memory: "512Mi"
svc:
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
# adapter's container filesystem. The files from the secret(s) can
# then be used in e.g. the service client specs.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the adapter has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
eclipse-iot × 10
java × 5
kubernetes × 3
mqtt × 3
docker × 2
iot × 2
bosch-iot-suite × 2
bosch-iot × 2
python × 1
amazon-web-services × 1
maven × 1
apache-kafka × 1
raspberry-pi × 1
openshift × 1
keycloak × 1
amqp × 1
kubernetes-helm × 1
amazon-vpc × 1
minikube × 1
paho × 1
okd × 1
hawkbit × 1
type
yes
string
The type of credentials to look up. Potential values include (but are not limited to) psk, x509-cert, hashed-password etc.
auth-id
yes
string
The authentication identifier to look up credentials for.
client-certificate
no
string
The client certificate the device authenticated with. If present, it MUST be the DER encoding of the (validated) X.509 client certificate as a Base64 encoded byte array and it’s subject DN MUST match the auth-id.
The client-certificate property MAY be used by the service implementation for auto-provisioning of devices.
To do so, the device registry needs to create credentials (and registration data) for the device if they do not already exist.
Additionally, the body MAY contain arbitrary properties that service implementations can use to determine a device’s identity.
The following request payload may be used to look up the hashed password for a device with the authentication identifier sensor1:
{
"type": "hashed-password",
"auth-id": "sensor1"
}
The following request payload may be used to look up or create x509-cert credentials for a device with the authentication identifier CN=device-1,O=ACME Corporation:
{
"type": "x509-cert",
"auth-id": "CN=device-1,O=ACME Corporation",
Mandatory
Location
AMQP Type
Description
correlation-id
yes
properties
message-id
Contains the message-id (or the correlation-id, if specified) of the request message that this message is the response to.
content-type
no
properties
string
MUST be set to application/json if the invocation of the operation was successful and the body of the response message contains payload as described below.
status
yes
application-properties
int
Contains the status code indicating the outcome of the operation. Concrete values and their semantics are defined below.
cache_control
no
application-properties
string
○ … needs for more scalability
○ … don’t want to manage the infrastructure
● “Hybrid” …
○ … needs for processing at the edge
○ … needs for not making sensible data public
27.
27
Azure Container Service
● A containers hosting solution
● Scale and orchestrate using …
○ Kubernetes
○ Docker Swarm
○ DC/OS
● Deploying a cluster using Azure CLI / portal
○ Resource group with VMs, load balancer, ...
● Managing directly your preferred “orchestrator”
○ ACS provides you “only” the infrastructure
28.
28
Azure & OpenShift
● OpenShift Origin
○ the upstream open source project
● OpenShift Container Platform
○ the Red Hat productized version
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Learn theme.
Edit this page
Documentation > Developer Guide > Implement a Custom Hono HTTP Protocol Adapter
Prerequisites
The standard HTTP Adapter
Anatomy of the standard HTTP Adapter
Derive a custom HTTP Protocol Adapter
Adding Routes
Build and run the custom HTTP Protocol Adapter
Using the custom HTTP Protocol Adapter
Further extend the custom HTTP Protocol Adapter
Implement a Custom Hono HTTP Protocol Adapter
Eclipse Hono™ comes with a default HTTP Adapter which can be used to interact with devices via HTTP.
The default HTTP Adapter also serves as a blueprint for implementing a custom HTTP protocol adapter.
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
dev
It also includes support for Command and Control:
if indicated by a received downstream message that contains a ttd value (refer to Device notifications for details) it tries to send a command to the device.
If the value of ttd indicates that the device stays connected for an unlimited time (ttd == -1), the application will periodically repeat to send a command until
notified the device is disconnected again (ttd == 0).
This application shall serve as a blueprint to integrate your existing java source code with Hono.
Its code is found in the example module in the package org.eclipse.hono.vertx.example.
The provided classes are kept as simple as possible (in the tradition of a classical “Hello World” implementation) while still
covering the most relevant messaging patterns (downstream and upstream messages).
For this purpose they make use of simple constant definitions and deal with exceptions as rarely as possible.
You may want to change the level of detail that should be logged to the console by editing the contained resources/logback.xml file.
Please refer to the javadoc of the classes for details.
Note
Note that production ready code likely has to think more about error handling and logging than this simple blueprint.
Configure the example
For simplicity, all configurations are defined as Java constants inside the class HonoExampleConstants.
If you have Hono running in Docker under localhost, the example should work out of the box.
Some configuration values can be overridden by providing them as property to the application.
This includes the host and the port of the AMQP network.
In the standard setup of Hono they should be configured to the qdrouter from the Apache Qpid project.
In production scenarios this might be a large setup of AMQP routers, brokers, etc.
Please refer to the class HonoExampleConstants to find out which part of the application can be configured by properties.
Run the example
The application waits for messages until you press any key or kill it.
It is started by
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Log in | Eclipse - The Eclipse Foundation open source community website.
Google Tag Manager Skip to main content
Eclipse - The Eclipse Foundation open source community website.
Log in
Welcome to Eclipse
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
Support using Device Connection cache client with Quarkus adapters by sophokles73 · Pull Request #2318 · eclipse/hono · GitHub
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
(HonoConnection manages the automatic reconnection). To achieve this, a caching mechanism is used, so that
defective links are replaced by new ones. The sender must be always retrieved from the factory when sending
because otherwise the link might no longer exist.
So, do not hold references to sender objects and re-use them for subsequent send operations!
For examples of how to use the client, see the example implementation in the AmqpExampleDevice class.
Usage in a Gateway
There are two ways to subscribe to commands for use in a gateway:
Gateway subscribing for commands for a specific device:
The gateway subscribes individually for each connected device by creating a command consumer for the specific device.
Gateway subscribing for commands for all its devices:
The gateway subscribes for commands sent to all the different devices that the gateway acts on behalf of by
creating a command consumer that is not scoped on a specific device.
Subscribing for all devices does not work if multiple instances of the gateway are running at the same time,
because a command is only sent to one receiver, and this may be an instance that has no connection to the device.
On the other hand, subscribing for a specific device once it connects to the gateway instance
(and closing the subscription once it disconnects) may not work for device-oriented protocols that are not connection-based.
Tracing
The AMQP Adapter Client supports tracing of the messages with OpenTracing. To use tracing, each of the
senders returned by the factory can be cast to an interface with the same name and the prefix “Traceable”
(e.g. cast TelemetrySender to TraceableTelemetrySender).
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
307
Fork
103
Code
Issues
97
Prerequisites for building Hono
Docker
Creating Hono’s container images using the Hono build process requires a Docker daemon running either locally or on another host you have access to. Please follow the instructions on the Docker web site to install Docker on your platform.
Java
Hono is written in Java and therefore requires a Java Development Kit (JDK) version 11 or higher installed on your computer. Please follow the JDK vendor’s instructions for installing Java on your operating system.
Maven
Hono’s build process is based on Apache Maven. You need at least Maven 3.5 in order to build Hono.
Please follow the installation instructions on the Maven home page.
Git
A Git client is required if you want to contribute changes/improvements to the Hono project. It is not necessary for simply building Hono locally.
Please refer to the Git Downloads page for installation instructions.
Getting the Hono Source Code
Either
download the latest release archive and extract the archive to a local folder or
clone the Hono source code repository from GitHub:
git clone https://github.com/eclipse/hono.git
This will create a hono folder in the current working directory and clone the whole repository into that folder.
Starting the Hono Build Process
Run the following from the source folder:
# in the "hono" folder containing the source code
If you plan to build the Docker images more frequently, e.g. because you want to extend or improve the Hono code, then you should define the docker.host property in your Maven settings.xml file containing the very same value as you would use on the command line as indicated above. The file is usually located in the .m2 folder in your user’s home directory. This way you can simply do a mvn clean install later on and the Docker images will be built automatically as well because the build-docker-image profile is activated automatically if the Maven property docker.host is set.
Be patient
The first build might take several minutes because Docker will need to download all the base images that Hono is relying on. However, most of these will be cached by Docker so that subsequent builds will be running much faster.
You can create native Docker images for some of the Hono services. In order to do so, you need to use native Maven profile:
Metrics usually provide insights into the past and current status of an individual component. The values can be aggregated to provide a picture of the overall system’s status. As such, metrics provide a great way to monitor system health and, in particular, to anticipate resource shortages and use such knowledge to pro-actively prevent system failure.
Configuring a Metrics Back End
Hono uses Micrometer for providing metrics. It is
possible to drop in any Micrometer compatible back end. Hono also uses the
Micrometer integration with Spring Boot and Vert.x.
Please refer to the Micrometer documentation
for details regarding the configuration of a specific Micrometer back end.
In most cases, you only need to add the back end specific jar files to the class path and
add back end specific configuration to the application.yml file.
The Hono build supports configuration of a specific metrics back end by means
of Maven profiles. The following build profiles are currently supported:
metrics-prometheus – Enables the Prometheus backend.
metrics-graphite – Enables the Graphite backend.
metrics-influxdb – Enables the InfluxDB backend.
Additionally, to selecting a metrics back end, you may need to configure the
back end using Spring configuration options. See the documentation mentioned
above for more information.
Note that none of the above profiles are active by default, i.e. you need to
explicitly activate one of them when starting the build using Maven’s -p
command line parameter.
Using Prometheus
Most of the metrics back ends have data being pushed to from the components
reporting the metrics. However, Prometheus is different in that it polls
(or scrapes) all components periodically for new metrics data.
For this to work, the Prometheus server needs to be configured with the IP
The following table provides an overview of the properties a client needs to set on a message to retrieve the last known gateway for a device in addition to the Standard Request Properties.
Name
Mandatory
Location
AMQP Type
Description
subject
yes
properties
string
MUST be set to get-last-gw.
The body of the message SHOULD be empty and will be ignored if it is not.
Response Message Format
A response to a get last known gateway for device request contains the Standard Response Properties as well as the properties shown in the following table:
Name
Mandatory
Location
AMQP Type
Description
content-type
no
properties
string
MUST be set to application/json if the invocation of the operation was successful and the body of the response message contains payload as described below.
The result of a successful invocation is carried in a single Data section of the response message as a UTF-8 encoded string representation of a single JSON object. It is an error to include payload that is not of this type.
Enabling TLS
Auth Server
Dispatch Router
File Based Device Registry
MongoDB Based Device Registry
HTTP Adapter
MQTT Adapter
Kura Adapter
Client Application
Using OpenSSL
Configuring Containers
Server Name Indication (SNI)
Secure Communication
The individual components of an Eclipse Hono™ installation, e.g. the protocol adapters, AMQP Messaging Network, Hono Auth etc., and the clients attaching to Hono in order to send and receive data all communicate with each other using AMQP 1.0 over TCP. The Hono components and the clients will usually not be located on the same local network but will probably communicate over public networking infrastructure. For most use cases it is therefore desirable, if not necessary, to provide for confidentiality of the data being transferred between these components. This section describes how Hono supports confidentiality by means of Transport Layer Security (TLS) and how to configure it.
Enabling TLS
All of Hono’s components can be configured to use TLS for establishing an encrypted communication channel with peers. When a client initiates a connection with a server, the TLS handshake protocol is used to negotiate parameters of a secure channel to be used for exchanging data. The most important of those parameters is a secret (symmetric) encryption key that is only known to the client and the server and which is used to transparently encrypt all data being sent over the connection as long as the connection exists. With each new connection, a new secret key is negotiated.
Using TLS in this way requires configuring the server component with a cryptographic private/public key pair and a certificate which binds an identity claim to the public key. It is out of scope of this document to describe the full process of creating such a key pair and acquiring a corresponding certificate. The demo-certs module already contains a set of keys and certificates to be used for evaluation and demonstration purposes. Throughout the rest of this section we will use these keys and certificates . Please refer to the demo-certs/README.md file for details regarding how to create your own keys and certificates.
Within a Hono installation the following communication channels can be secured with TLS:
Applications connecting to Dispatch Router - Client applications consuming e.g. Telemetry data from Hono connect to the AMQP Messaging Network. This connection can be secured by configuring the client and the messaging network for TLS.
Watch
40
Star
307
Fork
103
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
307
Fork
103
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Dismiss
Artemis Broker Configuration
The Artemis Broker is part of the Apache ActiveMQ project. Hono uses Artemis by means of the EnMasse project’s Artemis Docker image created from the Artemis project source code.
The Artemis Broker can be configured by means of configuration files. Hono includes an example configuration in the deploy/src/main/config/artemis folder which is used by the example deployment scripts. Please refer to the Artemis documentation for details regarding the configuration file format and options.
@kaniyan Also congratulations from my side! :-)
Karthees Kalidass
@kaniyan
@fkaltner Thank you :-)
Bob Claerhout
@BobClaerhout
nice @kaniyan! Congrats from Belgium as well ;)
Dejan Bosanac
@dejanb
@kaniyan Congrats Karthees 🎉 It's great to have you on the team in a new role
Karthees Kalidass
@kaniyan
@BobClaerhout Thank you :smile:
Thank you @dejanb :smile:
Alfusainey Jallow
@Alfusainey
truly well deserved! congratulations @kaniyan
Karthees Kalidass
@kaniyan
@Alfusainey thank you :-)
Abel Büchner-Mihaljević
Name
Mandatory
JSON Type
Description
subject-dn
no
string
The subject DN of the trusted certificate authority’s public key in the format defined by RFC 2253.
tenant-id
no
string
The identifier of the tenant to get.
The following request payload may be used to look up the tenant with identifier ACME Corporation:
{
"tenant-id": "ACME Corporation"
}
The following request payload may be used to look up the tenant for which a trusted certificate authority with subject DN O=ACME Corporation, CN=devices has been configured:
{
"subject-dn": "CN=devices,O=ACME Corporation"
}
Response Message Format
The following table provides an overview of the properties contained in a response message to a get tenant information request:
Name
Mandatory
The command has not been delivered to the device because the device is (currently) not connected.
rejected
The command has not been delivered to the device because it does not contain all required information.
Note that Hono relies on the particular protocol adapter to deliver commands to devices. Depending on the used transport protocol and the adapter’s implementation, the accepted outcome may thus indicate any of the following:
An attempt has been made to deliver the command to the device. However, it is unclear if the device has received (or processed) the command.
The device has acknowledged the reception of the command but has not processed the command yet.
The device has received and processed the command.
Examples
The following sequence diagram shows the successful delivery of a one-way command called switchOn to device 4711 of the DEFAULT_TENANT:
Successfully send a One-Way Command
The following sequence diagram shows how the delivery of the same one-way command fails because the device is not connected:
Device not connected
The following sequence diagram illustrates how a malformed command sent by a Business Application gets rejected:
Malformed Command message
Send a (Request/Response) Command
Business Applications use this operation to send a command to a device for which they expect the device to send back a response.
Preconditions
The Business Application has established an AMQP connection with the AMQP 1.0 Network.
The following sequence diagram illustrates the establishment of the required links:
Application connecting to the AMQP 1.0 Messaging Network
Command Message Format
The following table provides an overview of the properties the Business Application needs to set on a command message.
Name
An AMQP message containing this type of event does not have any payload so the body of the message MUST be empty.
The AMQP 1.0 properties an event sender needs to set for an empty notification event are defined in the Telemetry API.
The relevant properties are listed again in the following table:
Name
Mandatory
Location
Type
Description
content-type
yes
properties
symbol
MUST be set to application/vnd.eclipse-hono-empty-notification
ttd
no
application-properties
int
The time ‘til disconnect as described in the Telemetry API.
NB An empty notification can be used to indicate to a Business Application that a device is currently ready to receive an upstream message by setting the ttd property. Backend Applications may use this information to determine the time window during which the device will be able to receive a command.
Connection Event
Protocol Adapters may send this type of event to indicate that a connection with a device has
been established or has ended. Note that such events can only be sent for authenticated devices,
though, because an event is always scoped to a tenant and the tenant of a device is
established as part of the authentication process.
The AMQP message for a connection event MUST contain the following properties in addition to the standard event properties:
Name
Message Format
The following table provides an overview of the properties a client needs to set on a Forward Telemetry Data message.
Name
Mandatory
Location
Type
Description
content-type
yes
properties
symbol
A content type indicating the type and characteristics of the data contained in the payload, e.g. text/plain; charset="utf-8" for a text message or application/json etc. The value may be set to application/octet-stream if the message payload is to be considered opaque binary data.
creation-time
no
properties
timestamp
The instant in time when the message has been created (see the AMQP 1.0 specification for details). This property is mandatory if ttd is set, otherwise it is optional.
device_id
yes
application-properties
string
The identifier of the device that the data in the payload is originating from.
ttd
no
resourcegroup_name=hono
aks_cluster_name=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.aksClusterName.value -o tsv`
http_ip_address=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.httpPublicIPAddress.value -o tsv`
amqp_ip_address=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.amqpPublicIPAddress.value -o tsv`
mqtt_ip_address=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.mqttPublicIPAddress.value -o tsv`
registry_ip_address=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.registryPublicIPAddress.value -o tsv`
network_ip_address=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.networkPublicIPAddress.value -o tsv`
Note: add the following lines in case you opted for the Azure Service Bus variant:
service_bus_namespace=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.serviceBusNamespaceName.value -o tsv`
service_bus_key_name=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.serviceBusKeyName.value -o tsv`
service_bus_key=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.serviceBusKey.value -o tsv`
Next we prepare the k8s environment:
k8s_namespace=honons
kubectl create namespace $k8s_namespace
Finally install Hono. Leveraging the managed-premium-retain storage in combination with deviceRegistry.resetFiles=false parameter is optional but ensures that Device registry storage will retain future update deployments.
# in Hono working tree directory: hono/deploy
helm install target/deploy/helm/eclipse-hono/ \
--dep-up \
--name hono \
--namespace $k8s_namespace \
HTTP/1.1 202 Accepted
Content-Length: 0
Hono
31.
Command and Control - HTTP DemoCommand and Control - HTTP Demo
Successfully sent command payload: [{
"brightness" : 47
}].
Hono
32.
Command and Control - MQTT DemoCommand and Control - MQTT Demo
$ ./mosquitto_sub -d -h localhost -p 1883 -i 4711
-u "sensor1@DEFAULT_TENANT" -P "hono-secret"
-t 'control/+/+/req/#'
Client 4711 sending CONNECT
Client 4711 received CONNACK
Client 4711 sending SUBSCRIBE (Mid: 1, Topic: control/+/+/req/#, QoS: 0)
Client 4711 received SUBACK
Subscribed (mid: 1): 0
Client 4711 received PUBLISH (d0, q0, r0, m0, 'control///req/101089ccdcca-ed33
{
"brightness" : 73
}
Hono
33.
hono.commands.payload
DistributionSummary
host, component-type, component-name, tenant, type, status, direction
The number of bytes conveyed in the payload of a command message.
hono.connections.authenticated
Gauge
host, component-type, component-name, tenant
Current number of connected, authenticated devices. NB This metric is only supported by protocol adapters that maintain connection state with authenticated devices. In particular, the HTTP adapter does not support this metric.
hono.connections.unauthenticated
Gauge
host, component-type, component-name
Current number of connected, unauthenticated devices. NB This metric is only supported by protocol adapters that maintain connection state with authenticated devices. In particular, the HTTP adapter does not support this metric.
hono.connections.authenticated.duration
Timer
host, component-type, component-name, tenant
The overall amount of time that authenticated devices have been connected to protocol adapters. NB This metric is only supported by protocol adapters that maintain connection state with authenticated devices. In particular, the HTTP adapter does not support this metric.
hono.connections.attempts
Counter
host, component-type, component-name, tenant, outcome
The number of attempts made by devices to connect to a protocol adapter. The outcome tag’s value determines if the attempt was successful or not. In the latter case the outcome also indicates the reason for the failure to connect.NB This metric is only supported by protocol adapters that maintain connection state with authenticated devices. In particular, the HTTP adapter does not support this metric.
hono.downstream.full
Counter
host, component-type, component-name, tenant, type
The number of times a message should be sent, but could not because the sender was out of credit.
hono.downstream.sent
Building Blocks & Scope
API Endpoints &
Security
Protocol Adapters
Business
Applications
Devices
AMQP 1.0
Hono
AMQP messaging
network
end to end flow control
AMQP 1.0
AMQP 1.0
HTTP
MQTT
etc.
16.
16
Eclipse Hono
Components and APIs
Auth
Server
Authentication
Protocol Adapter
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the adapter's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/amqp-adapter-config/
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
# amqp contains configuration properties for the adapter's
# exposed AMQP endpoints.
# If not set, the adapter by default exposes the secure and insecure ports
# using an example key and certificate.
amqp:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the adapter's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the adapter's
# example key and cert.'
digital-twin × 1
eclipse-hawkbit × 1
more related tags
Hot Network Questions
Is it ok to place 220V AC traces on my Arduino PCB?
MFi product look up
Can I fork libstdc++ without disclaiming copyright for the modifications I make?
How to make old bikes seatpost slide smoothly when needs adjustment again?
How to select resistance for Arduino capacitance meter
Do you add your ability mod to damage for the Soulknife's second attack?
Main differences of Karate & Taekwondo
Would fire/heat powers be actually dangerous?
Are the Storm Giant's strength scores in the Monster Manual wrong?
How do I prevent myself from freezing up during a game I'm DMing?
Why do new engines have case with triangular tiling pattern?
Is it my responsibility to tell a team member off whom I think is crossing the line
Determine bijectivity of a linear map from matrix product
Unknown tool from auger bits set
How to make the story less predictable?
Why user-assembled kits?
"Render mathematics" is inactive in Inkscape
why do electrical wires coil over time?
What could Trump hope to gain from a *second* Georgia "recount"?
"client-certificate": "DeviceCert=="
}
Response Message Format
A response to a get credentials request contains the following properties:
Name
Mandatory
Location
AMQP Type
Description
correlation-id
yes
properties
message-id
Contains the message-id (or the correlation-id, if specified) of the request message that this message is the response to.
content-type
no
properties
string
MUST be set to application/json if the invocation of the operation was successful and the body of the response message contains payload as described below.
status
yes
application-properties
int
Contains the status code indicating the outcome of the operation. Concrete values and their semantics are defined below.
cache_control
Contains an RFC 2616 compliant cache directive. The directive contained in the property MUST be obeyed by clients that are caching responses.
In case of a successful invocation of the operation, the body of the response message consists of a single Data section containing a UTF-8 encoded string representation of a single JSON object having the following properties:
Name
Mandatory
JSON Type
Description
device-id
yes
string
The ID of the device that is subject of the assertion.
via
no
array
The IDs (JSON strings) of gateways which may act on behalf of the device. This property MUST be set if any gateways are registered for the device. If the assertion request contained a gateway_id property and the response’s status property has value 200 (indicating a successful assertion) then the array MUST at least contain the gateway ID from the request.
defaults
no
object
Default values to be used by protocol adapters for augmenting messages from devices with missing information like a content type. It is up to the discretion of a protocol adapter if and how to use the given default values when processing messages published by the device.
mapper
no
string
The name of a service that can be used to transform messages uploaded by the device before they are forwarded to downstream consumers. The client needs to map this name to the particular service to invoke.
Below is an example for a payload of a response to an assert request for device 4711 which also includes a default content-type and a mapper service:
{
○ enterprise grade container platform
+
29.
29
Amazon EC2
● Spinning up virtual machines …
○ for making a cluster
● Providing …
○ Docker and …
○ … Kubernetes or OpenShift …
○ … or just Docker using Swarm mode
+
30.
24 → /telemetry/tenand_id
30
DEMO
Qpid Dispatch Router
ActiveMQ Artemis
MQTT, HTTP clients
24 → /telemetry
Hono Components
Consumer
application
31.
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
[#2029] Use Command Router in adapters and integration tests by calohmn · Pull Request #2312 · eclipse/hono · GitHub
AMQP Adapter :: Eclipse Hono™
MQTT Adapter :: Eclipse Hono™
HTTP Adapter :: Eclipse Hono™
File Based Device Registry :: Eclipse Hono™
MongoDB Based Device Registry :: Eclipse Hono™
User Guide :: Eclipse Hono™
Connection Events :: Eclipse Hono™
Resource limits :: Eclipse Hono™
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Hono Client Configuration
Connection Properties
Response Caching
Using TLS
Address rewriting
Hono Client Configuration
The org.eclipse.hono.client.HonoConnection factory can be used to create AMQP 1.0 connections to Hono’s service components.
The factory uses environment variables and/or command line options to configure the connection to the service and the caching of
This section will guide you through the steps to build your own custom HTTP protocol adapter.
Prerequisites
You should be familiar with the setup and start of Hono. Refer to the
Getting Started guide.
The standard HTTP Adapter
Hono’s HTTP Adapter supports telemetry and event data processing. Please refer to the HTTP Adapter User Guide and HTTP Adapter Admin Guide for details regarding the usage and configuration of the HTTP Adapter.
You can find the source of the HTTP Adapter at https://github.com/eclipse/hono/tree/master/adapters/http-vertx.
Anatomy of the standard HTTP Adapter
Like many other Hono components, the HTTP Adapter is built on top of the Vert.x framework.
Derive a custom HTTP Protocol Adapter
Use the standard HTTP Adapter as a blueprint.
Adding Routes
In Vert.x, a route is a mapping of an HTTP request to a handler. Inside a route, Vert.x provides a RoutingContext
instance which gives access to the HTTP request (and response) object containing the HTTP headers.
The standard HTTP Adapter overrides the abstract method addRoutes(), provided by the base class, and adds routes for processing telemetry data and events.
// route for uploading telemetry data
router.route(HttpMethod.PUT, String.format("/telemetry/:%s/:%s", PARAM_TENANT, PARAM_DEVICE_ID))
.handler(ctx -> uploadTelemetryMessage(ctx, getTenantParam(ctx), getDeviceIdParam(ctx)));
The route for telemetry data parses the HTTP request, extracts the tenant and deviceId parameters from the
request URL path, and forwards the message payload to the method uploadTelemetryMessage(), provided by the base class.
NB Note the Vert.x place holder indicators : inside the URL path pattern /telemetry/:%s/:%s. Vert.x makes matching
place holders available as request parameters. See Capturing path parameters in the Vert.x documentation.
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Kura Adapter Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
Kura Adapter Configuration
The Kura protocol adapter exposes an MQTT topic hierarchy allowing Eclipse Kura™ based gateways to access Eclipse Hono™’s
south bound Telemetry, Event and Command & Control APIs.
The adapter is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the
corresponding Docker image created from it.
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > CoAP Adapter Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
Authentication
CoAP Adapter Configuration
The CoAP protocol adapter exposes CoAP based endpoints for Eclipse Hono™’s south bound Telemetry, Event and Command & Control APIs.
The adapter is implemented as a Spring Boot application using Eclipse Californium™ for implementing
the CoAP protocol handling. It can be run either directly from the command line or by means of starting the corresponding
Docker image created from it.
The adapter supports the following standard configuration options:
# in directory: hono/examples/
mvn exec:java -Dexec.mainClass=org.eclipse.hono.vertx.example.HonoExampleApplication
or — if e.g. the host of the AMQP network should be changed —
mvn exec:java -Dexec.mainClass=org.eclipse.hono.vertx.example.HonoExampleApplication -Dconsumer.host=192.168.99.100
Telemetry and Event messages
Depending on the logger configuration, all received downstream messages are printed to the console.
Please note that consumers do not connect with Hono directly, but rather with an AMQP router network.
Command and Control
By using a helper class provided by Hono, a callback in the application code is invoked when a downstream message was received
that signals the device will stay connected to the protocol adapter for some time (see Device notifications for details).
Inside this callback an arbitrary simple command is sent down to the device (once or periodically) and the response is logged to the console.
Encryption of communication
For the encrypted communication with Hono, the necessary truststore is already installed and used by the Hono client.
If you want to integrate the code with your own software, please copy the provided truststore (hono/demo-certs/certs/trusted-certs.pem)
from the Hono project to the resources directory of your project
and adopt the code pointing to the file location.
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > AMQP Adapter Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
AMQP Adapter Configuration
The AMQP protocol adapter exposes AMQP based endpoints for Eclipse Hono™’s south bound Telemetry, Event and Command & Control APIs.
The adapter is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the
corresponding Docker image created from it.
The adapter supports the following standard configuration options:
Common Java VM Options
Common vert.x Options
Common Protocol Adapter Options
Monitoring Options
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > MQTT Adapter Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
Custom Message Mapping
MQTT Adapter Configuration
The MQTT protocol adapter exposes an MQTT topic hierarchy for Eclipse Hono™’s south bound Telemetry, Event and Command & Control APIs.
The adapter is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the
corresponding Docker image created from it.
The adapter supports the following standard configuration options:
Common Java VM Options
Sign in with your Eclipse account Email Address *
Enter your Eclipse email address. Password *
Enter the password that accompanies your email address.
Ask for a new password
Sign in
- Or -
Create new account
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Privacy Policy
Terms of Use
Copyright Agent
Back to the top
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > HTTP Adapter Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
HTTP Adapter Configuration
The HTTP protocol adapter exposes HTTP based endpoints for Eclipse Hono™’s south bound Telemetry, Event and Command & Control APIs.
The adapter is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the
corresponding Docker image created from it.
The adapter supports the following standard configuration options:
Common Java VM Options
Common vert.x Options
Common Protocol Adapter Options
Monitoring Options
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Configuring the Device Connection Service
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
Data Grid Connection Configuration
Remote cache
Embedded cache
Authentication Service Connection Configuration
Metrics Configuration
Configuring the Device Connection Service
The Device Connection service provides an implementation of Eclipse Hono™’s Device Connection API.
Protocol adapters use this API to store and retrieve information about the gateway that a device is using to connect to Hono’s protocol adapters. This information is necessary for routing commands to the particular protocol adapter instance that the gateway used by the device is connected to.
1.4
1.3
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > File Based Device Registry Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
Authentication Service Connection Configuration
Metrics Configuration
Device Identities File Format
Credentials File Format
Tenants File Format
Configuring Gateway Devices
File Based Device Registry Configuration
The File based Device Registry component provides an exemplary implementation of Eclipse Hono™’s Device Registration, Credentials, Tenant and Device Connection APIs.
Protocol adapters use these APIs to determine a device’s registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it.
The traceable interfaces provide send methods with an additional SpanContext parameter.
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
# in the "hono" folder containing the source code
Perform the integration tests
The source code for Hono comes with a test suite for integration testing. To trigger these tests, change to the tests folder and execute:
# in the "hono/tests" folder containing the test suite
mvn verify -Prun-tests
The tests are executed against the Docker images of the Hono components. Because of that, it is necessary to build the respective images as described above before the execution of the tests. The respective Readme.md file in the folder hono/tests contains more information regarding the test suite.
addresses of the components to monitor. In the example deployment that comes
with Hono, the Prometheus server is configured with the names of the Kubernetes
services corresponding to the Hono components that it should scrape.
The components themselves need to expose a corresponding HTTP endpoint that
the Prometheus server can connect to for scraping the meter data. All
Hono components that report metrics can be configured to expose such an
endpoint via their Health Check server
which already exposes endpoints for determining the component’s readiness and liveness status.
Health Check Server Configuration
All of Hono’s service components and protocol adapters contain a Health Check server which can be configured to
expose several HTTP endpoints for determining the component’s status.
In particular, the server exposes a /readiness, a /liveness and an optional /prometheus URI endpoint.
The former two endpoints are supposed to be used by container orchestration platforms like Kubernetes to monitor the runtime status of the containers
that it manages. These endpoints are always exposed when the health check server is started.
The /prometheus endpoint can be used by a Prometheus server to retrieve collected meter data from the component. It is only exposed if Prometheus has
been configured as the metrics back end as described above.
The health check server can be configured by means of the following environment variables:
Environment VariableCommand Line Option
The response message JSON object has the following properties:
Name
Mandatory
JSON Type
Description
gateway-id
yes
string
The ID of the last known gateway for the device.
last-updated
no
string
The date that the information about the last known gateway for the device was last updated. The value MUST be an ISO 8601 compliant combined date and time representation in extended format.
The response message’s status property may contain the following codes:
Code
Description
200
OK, the payload contains the gateway ID.
400
Bad Request, the request message does not contain all required information/properties.
404
Not Found, there is no last known gateway assigned to the device.
Implementors of this API may return a 404 status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred.
Device Registry connecting to Auth Server - The Device Registry connects to the Auth Server in order to verify client credentials and determine the client’s authorities. This (internal) connection can (should) be secured by configuring the Auth Server and Device Registry for TLS.
Protocol Adapter to Device Registry - A protocol adapter connects to the Device Registry in order to retrieve assertions regarding the registration status of devices. This (internal) connection can be secured by configuring the protocol adapter and the Device Registry for TLS.
Protocol Adapter connecting to AMQP Messaging Network - A protocol adapter connects to the messaging network in order to forward telemetry data and commands hence and forth between downstream components (client applications) and devices. This (internal) connection can be secured by configuring the Dispatch Router and the protocol adapters for TLS.
Devices connecting to a Protocol Adapter - Devices use TLS to both authenticate the protocol adapter and to establish an encrypted channel that provides integrity and privacy when transmitting data. Note that the specifics of if and how TLS can be used with a particular protocol adapter is specific to the transport protocol the adapter uses for communicating with the devices.
Liveness/readiness probes connecting to Service Health Checks - Systems like Kubernetes are periodically checking the health status of the individual services . This communication can be secured by configuring the health check of the individual services to expose a secure endpoint.
Auth Server
The Auth Server supports the use of TLS for connections to clients. Please refer to the Auth Server admin guide for details regarding the required configuration steps.
The demo-certs/certs folder includes the following demo keys and certificates to be used with the Auth Server for that purpose.
File
Description
auth-server-key.pem
The example private key for creating signatures.
auth-server-cert.pem
The example certificate asserting the server’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
Dispatch Router
The Dispatch Router reads its configuration from a file on startup (the default location is /etc/qpid-dispatch/qdrouterd.conf). Please refer to the Dispatch Router documentation for details regarding the configuration of TLS/SSL.
The demo-certs/certs folder includes the following demo keys and certificates to be used with the Dispatch Router for that purpose:
File
Description
qdrouter-key.pem
The example private key for creating signatures.
qdrouter-cert.pem
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
[#2029] Fix issues caused by different vertx contexts being used
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
[#2288] Add integration tests verifying forwarding of QoS level in downstream messages
#2320
Open
fkaltner
wants to merge
@b-abel
@/all Will there be the community call today or do we skip it in favor of the EclipseCon?
Dejan Bosanac
@dejanb
@b-abel Either is good for me
@/all any specific topics for today's call?
Karthees Kalidass
@kaniyan
EclipseCon closes at 4:45 pm. IMHO we could either postpone our today's call to 5:00 pm or skip the today's one if there are no important topics to discuss. I am open for both.
Dejan Bosanac
@dejanb
I can't make it later today ... which doesn't mean others should not go for it :)
Karthees Kalidass
@kaniyan
@dejanb No specific topics from my side for today's call
_
Dejan Bosanac
@dejanb
@/all let's skip it then ... we can always schedule something next week if there's a topic to discuss
Karthees Kalidass
@kaniyan
@dejanb :+1:
Abel Büchner-Mihaljević
Location
AMQP Type
Description
correlation-id
yes
properties
message-id
Contains the message-id (or the correlation-id, if specified) of the request message that this message is the response to.
content-type
no
properties
string
MUST be set to application/json if the invocation of the operation was successful and the body of the response message contains payload as described below.
status
yes
application-properties
int
Contains the status code indicating the outcome of the operation. Concrete values and their semantics are defined for each particular operation.
cache_control
no
application-properties
string
Contains an RFC 2616 compliant cache directive. The directive contained in the property MUST be obeyed by clients that are caching responses.
The response message’s status property may contain the following codes:
Code
Description
Mandatory
Location
Type
Description
to
yes
properties
string
subject
yes
properties
string
MUST contain the command name to be executed by a device.
content-type
no
properties
string
If present, MUST contain a Media Type as defined by RFC 2046 which describes the semantics and format of the command’s input data contained in the message payload. However, not all protocol adapters will support this property as not all transport protocols provide means to convey this information, e.g. MQTT 3.1.1 has no notion of message headers.
correlation-id
no
properties
string
MAY contain an ID used to correlate a response message to the original request. If set, it is used as the correlation-id property in the response, otherwise the value of the message-id property is used. Either this or the message-id property MUST be set.
Mandatory
Location
Type
Description
content-type
yes
properties
application-properties
int
The time ‘til disconnect indicates the number of seconds that the device will remain connected to the protocol adapter. The value of this property must be interpreted relative to the message’s creation-time. A value of -1 is used to indicate that the device will remain connected until further notice, i.e. until another message indicates a ttd value of 0. In absence of this property, the connection status of the device is to be considered indeterminate. Backend Applications might use this information to determine a time window during which the device will be able to receive a command.
The body of the message MUST consist of a single AMQP Data section containing the telemetry data. The format and encoding of the data MUST be indicated by the content-type and (optional) content-encoding properties of the message.
Any additional properties set by the client in either the properties or application-properties sections are preserved by Hono, i.e. these properties will also be contained in the message delivered to consumers.
Northbound Operations
Receive Telemetry Data
Hono delivers messages containing telemetry data reported by a particular device in the same order that they have been received in (using the Forward Telemetry Data operation). Hono MAY drop telemetry messages that it cannot deliver to any consumers. Reasons for this include that there are no consumers connected to Hono or the existing consumers are not able to process the messages from Hono fast enough.
Hono supports multiple non-competing Business Application consumers of telemetry data for a given tenant. Hono allows each Business Application to have multiple competing consumers for telemetry data for a given tenant to share the load of processing the messages.
Preconditions
--set adapters.mqtt.svc.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=$resourcegroup_name \
--set adapters.http.svc.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=$resourcegroup_name \
--set adapters.amqp.svc.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=$resourcegroup_name \
--set deviceRegistryExample.svc.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=$resourcegroup_name \
--set amqpMessagingNetworkExample.dispatchRouter.svc.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=$resourcegroup_name \
--set deviceRegistryExample.storageClass=managed-premium-retain \
--set deviceRegistryExample.resetFiles=false \
--set adapters.mqtt.svc.loadBalancerIP=$mqtt_ip_address \
--set adapters.http.svc.loadBalancerIP=$http_ip_address \
--set adapters.amqp.svc.loadBalancerIP=$amqp_ip_address \
--set deviceRegistryExample.svc.loadBalancerIP=$registry_ip_address \
--set amqpMessagingNetworkExample.dispatchRouter.svc.loadBalancerIP=$network_ip_address
Note: add the following lines in case you opted for the Azure Service Bus variant:
# Router update required to work together with Azure Service Bus
--set amqpMessagingNetworkExample.dispatchRouter.imageName=quay.io/enmasse/qdrouterd-base:1.8.0 \
--set amqpMessagingNetworkExample.broker.type=servicebus \
--set amqpMessagingNetworkExample.broker.servicebus.saslUsername=$service_bus_key_name \
--set amqpMessagingNetworkExample.broker.servicebus.saslPassword=$service_bus_key \
--set amqpMessagingNetworkExample.broker.servicebus.host=$service_bus_namespace.servicebus.windows.net \
Have fun with Hono on Microsoft Azure!
Next steps:
Command and Control - MQTT DemoCommand and Control - MQTT Demo
Device is ready to receive a command :
[TimeUntilDisconnectNotification{tenantId='DEFAULT_TENANT',
deviceId='4711', ttd='-1',
readyUntil=+1000000000-12-31T23:59:59.999999999Z}].
received event [tenant: DEFAULT_TENANT, device: 4711,
content-type: application/vnd.eclipse-hono-empty-notification ]: [null].
Sending command [setBrightness] to [DEFAULT_TENANT/4711].
Hono
34.
Command and Control - MQTT DemoCommand and Control - MQTT Demo
$ ./mosquitto_pub -p 1883 -i 4711
-u "sensor1@DEFAULT_TENANT"
-P "hono-secret"
-t 'control///res/101089ccdcca-ed33-43c5-ada7-8a3532bbc919/200'
-m "command received and executed."
Hono
35.
Command and Control - MQTT DemoCommand and Control - MQTT Demo
Successfully sent command payload: [{
"brightness" : 25
}].
And received response: [command received and executed.].
Cancelling periodic sender for DEFAULT_TENANT/4711
Sending command [setBrightness] to [DEFAULT_TENANT/4711].
Hono
Timer
host, component-type, component-name, tenant, type, outcome
The time it took to send a message and receive the remote peers disposition.
hono.downstream.timeout
Counter
host, component-type, component-name, tenant, type
The number of times a message timed out, meaning that no disposition was received in the appropriate amount of time.
hono.messages.received
Timer
host, component-type, component-name, tenant, type, status, qos, ttd
The time it took to process a message conveying telemetry data or an event.
hono.messages.payload
DistributionSummary
host, component-type, component-name, tenant, type, status
The number of bytes conveyed in the payload of a telemetry or event message.
Minimum Message Size
If a minimum message size is configured for a tenant,
then the payload size of the telemetry, event and command messages are calculated in accordance with the configured
value and then reported to the metrics by the AMQP, HTTP and MQTT protocol adapters. If minimum message size is not
configured for a tenant then the actual message payload size is reported.
Assume that the minimum message size for a tenant is configured as 4096 bytes (4KB). The payload size of
an incoming message with size 1KB is calculated as 4KB by the protocol adapters and reported to the metrics system.
For an incoming message of size 10KB, it is reported as 12KB.
Service Metrics
Hono’s service components do not report any metrics at the moment.
Device Registration
Telemetry
Event
Telemetry
Event
Credentials
Devices
Business
Applications
ActiveMQ Artemis
Broker
Telemetry Event
Authentication
Hono
Messaging
Qpid Dispatch
Router
Device
Registry
17.
24 → /telemetry/tenand_id
17
DEMO
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
coap:
# enabled indicates if Hono's (experimental) CoAP adapter should be deployed.
enabled: false
# imageName contains the name (excluding registry)
# of the container image to use for the CoAP adapter
imageName: eclipse/hono-adapter-coap-vertx
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
First science fiction movie or tv show that had a complete language created for it?
Are pictures taken from ISS geolocalized?
Why were the Allies so much better cryptanalysts?
Is it possible for someone to win the presidency due to faithless electors?
more hot questions
Newest eclipse-hono questions feed
Subscribe to RSS
Newest eclipse-hono questions feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
Stack Overflow
Questions
Jobs
Developer Jobs Directory
Salary Calculator
Help
Mobile
Products
Teams
Talent
Advertising
Enterprise
no
application-properties
string
Contains an RFC 2616 compliant cache directive. The directive contained in the property MUST be obeyed by clients that are caching responses.
The response message payload MUST contain credential information as defined in Credentials Format if the status is 200 or 201.
The response message’s status property may contain the following codes:
Code
Description
200
OK, the payload contains the credentials for the authentication identifier.
201
Created, the payload contains the newly created credentials for the authentication identifier.
400
Bad Request, the request message did not contain all mandatory properties or the subject DN of the certificate does not match the authentication identifier.
404
Not Found, there are no credentials registered matching the criteria.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred.
In this case, the response message’s content-type property SHOULD be set accordingly.
"device-id": "4711",
"via": ["4712"],
"defaults": {
"content-type": "application/vnd.acme+json"
},
"mapper": "my-payload-transformation"
}
The response message’s status property may contain the following codes:
Code
Description
200
OK, the device is registered for the given tenant and is enabled. The response message body contains the asserted device’s registration status.
400
Bad Request, the request message did not contain all mandatory properties.
403
Forbidden, the gateway with the given gateway id either does not exist, is not enabled or is not authorized to get an assertion for the device with the given device id.
404
Not Found, there is no device registered with the given device id within the given tenant id or the device is not enabled.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred. In this case, the response message’s content-type property SHOULD be set accordingly.
Delivery States
The Device Registration service uses the following AMQP message delivery states when receiving request messages from clients:
Delivery State
Description
Resources
31
● Eclipse Hono : https://www.eclipse.org/hono/
● Eclipse IoT : https://iot.eclipse.org/
● Qpid Dispatch Router : http://qpid.apache.org/components/dispatch-router/
● ActiveMQ Artemis : https://activemq.apache.org/artemis/
● EnMasse : http://enmasse.io/
● Azure Container Service : https://azure.microsoft.com/en-us/services/container-service/
● OpenShift on Azure : http://aka.ms/openshift
● My blog : https://paolopatierno.wordpress.com/
32.
Thank you ! Questions ?
@ppatierno
Recommended
Messaging as a service : building a scalable messaging service
Paolo Patierno
Reactive Internet of Things : the Vert.x way
Paolo Patierno
Telemetry with Windows 10 IoT Core : from Raspberry Pi2 to Event Hubs
Paolo Patierno
Eclipse Hono: Connect. Command. Control.
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Skip to content
Sign up
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile
Customer stories →
Security →
Team
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Concepts
Device Identity
Multi-Tenancy
Device Provisioning
Connecting Devices
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
MongoDB Based Device Registry
File Based Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
CoAP Adapter
Kura Adapter
Sigfox Adapter
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
responses to service invocations. All variables used for configuring the connection factory for a particular service share a
common prefix. This way, multiple sets of variables can be used to configure multiple factories for connecting to different
service endpoints without interfering with each other. For example, the set of variables for configuring the connection factory
for the Device Registration service may use the common prefix HONO_REGISTRATION whereas the set for configuring the factory
for the Credentials service may use HONO_CREDENTIALS.
Connection Properties
The following table provides an overview of the configuration variables and corresponding command line options for configuring
the AMQP connection to the service.
Note that the variables map to the properties of classes org.eclipse.hono.config.ClientConfigProperties
and org.eclipse.client.RequestResponseClientConfigProperties which can be used to programmatically configure a client.
delimiter, e.g. the variable prefix HONO_CREDENTIALS corresponds to the command line option prefix hono.credentials).
Environment VariableCommand Line Option
Mandatory
Default Value
Description
no
-
The name to use as the hostname in the client’s AMQP open frame during connection establishment. This variable can be used to indicate the virtual host to connect to on the server.
no
-
no
The route for events looks very similar to the route for telemetry data. It forwards the event message payload to the uploadEventMessage() method.
Please refer to the Telemetry API and Event API
for details about the different Hono APIs.
In the custom HTTP protocol adapter adapt the routes according to your needs.
Build and run the custom HTTP Protocol Adapter
If you have Hono running, you can launch your custom HTTP protocol adapter as a Docker Container or a Spring Boot application.
You may adopt the Maven profile build-docker-image from the Maven POM file of the standard HTTP Adapter into your
custom adapter’s Maven POM file.
Follow the guidelines for running the HTTP Adapter in HTTP Adapter. Don’t forget to configure the custom protocol adapter to bind to a different port than the standard HTTP Adapter if you intend to run them both at the same time. See the Port Configuration section of the HTTP Adapter documentation for details.
Using the custom HTTP Protocol Adapter
Now that you have your custom HTTP protocol adapter up and running, you can use any HTTP client, like curl or
HTTPie, to publish data to your custom adapter.
Note that before publishing data to your custom HTTP protocol adapter, you need to start a consumer for the tenant you intend to publish data for.
Otherwise you will not be able to successfully send data. For this purpose, you may use the example consumer as described in the Getting Started guide.
Further extend the custom HTTP Protocol Adapter
The abstract base class includes additional hooks which you may use to plug into the adapter’s life cycle:
Hook
Description
preStartup()
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
The adapter supports the following standard configuration options:
Common Java VM Options
Common vert.x Options
Common Protocol Adapter Options
Monitoring Options
Service Configuration
The following table provides an overview of the configuration variables and corresponding command line options for configuring the MQTT adapter.
Environment VariableCommand Line Option
Mandatory
Default Value
Description
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of verticle instances to deploy. If not set, one verticle per processor core is deployed.
HONO_KURA_AUTHENTICATION_REQUIRED--hono.kura.authenticationRequired
no
true
If set to true the protocol adapter requires devices to authenticate when connecting to the adapter. The credentials provided by the device are verified using the configured Credentials Service. Devices that have failed to authenticate are not allowed to publish any data.
HONO_KURA_BIND_ADDRESS--hono.kura.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure port should be bound to.See Port Configuration below for details.
Common Java VM Options
Common vert.x Options
Common Protocol Adapter Options
Monitoring Options
Service Configuration
The following table provides an overview of the configuration variables and corresponding command line options for configuring the CoAP adapter.
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of verticle instances to deploy. If not set, one verticle per processor core is deployed.
HONO_COAP_AUTHENTICATION_REQUIRED--hono.coap.authenticationRequired
no
true
If set to true the protocol adapter requires devices to authenticate when connecting to the adapter. The credentials provided by the device are verified using the configured Credentials Service. Devices that fail to authenticate are not allowed to connect to the adapter.
HONO_COAP_BIND_ADDRESS--hono.coap.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure port should be bound to.See Port Configuration below for details.
Service Configuration
The following table provides an overview of the configuration variables and corresponding command line options for configuring the AMQP adapter.
Environment VariableCommand Line Option
Mandatory
Default Value
Description
HONO_AMQP_AUTHENTICATION_REQUIRED--hono.amqp.authenticationRequired
no
true
If set to true the protocol adapter requires devices to authenticate when connecting to the adapter. The credentials provided by the device are verified using the configured Credentials Service. Devices that have failed to authenticate are not allowed to publish any data.
HONO_AMQP_BIND_ADDRESS--hono.amqp.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure port should be bound to.See Port Configuration below for details.
HONO_AMQP_CERT_PATH--hono.amqp.certPath
no
-
The absolute path to the PEM file containing the certificate that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_AMQP_KEY_PATH.Alternatively, the HONO_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_AMQP_DEFAULTS_ENABLED--hono.amqp.defaultsEnabled
no
true
If set to true the protocol adapter uses default values registered for a device to augment messages published by the device with missing information like a content type. In particular, the protocol adapter adds default values registered for the device as (application) properties with the same name to the AMQP 1.0 messages it sends downstream to the AMQP Messaging Network.
HONO_AMQP_IDLE_TIMEOUT--hono.amqp.idleTimeout
Common vert.x Options
Common Protocol Adapter Options
Monitoring Options
Service Configuration
The following table provides an overview of the configuration variables and corresponding command line options for configuring the MQTT adapter.
Environment VariableCommand Line Option
Mandatory
Default Value
Description
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of verticle instances to deploy. If not set, one verticle per processor core is deployed.
HONO_CONNECTION_EVENTS_PRODUCER--hono.connectionEvents.producer
no
logging
The implementation of connection events producer which is to be used. This may be logging or events.See Connection Events
HONO_MQTT_AUTHENTICATION_REQUIRED--hono.mqtt.authenticationRequired
no
true
If set to true the protocol adapter requires devices to authenticate when connecting to the adapter. The credentials provided by the device are verified using the configured Credentials Service. Devices that have failed to authenticate are not allowed to publish any data.
HONO_MQTT_BIND_ADDRESS--hono.mqtt.bindAddress
Service Configuration
The following table provides an overview of the configuration variables and corresponding command line options for configuring the HTTP adapter.
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of verticle instances to deploy. If not set, one verticle per processor core is deployed.
HONO_HTTP_AUTHENTICATION_REQUIRED--hono.http.authenticationRequired
no
true
If set to true the protocol adapter requires devices to authenticate when connecting to the adapter. The credentials provided by the device are verified using the configured Credentials Service. Devices that have failed to authenticate are not allowed to publish any data.
HONO_HTTP_BIND_ADDRESS--hono.http.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure port should be bound to.See Port Configuration below for details.
HONO_HTTP_CERT_PATH--hono.http.certPath
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
The Device Connection component provides a production grade implementation of the Device Connection API which uses a remote data grid for storing information about device connections. The data grid can be scaled out independently from the Device Connection service components to meet the storage demands at hand.
The Device Connection component is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the corresponding Docker image created from it.
Service Configuration
In addition to the following options, this component supports the options described in Common Configuration.
The following table provides an overview of the configuration variables and corresponding command line options for configuring the Device Connection component.
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of Verticle instances to deploy. If not set, one Verticle per processor core is deployed.
HONO_DEVICECONNECTION_AMQP_BIND_ADDRESS--hono.registry.amqp.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure AMQP port should be bound to.See Port Configuration below for details.
HONO_DEVICECONNECTION_AMQP_CERT_PATH--hono.deviceConnection.amqp.certPath
no
-
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_DEVICECONNECTION_AMQP_KEY_PATH.Alternatively, the HONO_DEVICECONNECTION_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_DEVICECONNECTION_AMQP_INSECURE_PORT--hono.deviceConnection.amqp.insecurePort
There is no particular technical reason to implement these three APIs in one component, so for production scenarios there might be up to three different components each implementing one of the API’s.
The Device Registry component also exposes HTTP based resources for managing tenants and the registration information and credentials of devices.
The Device Registry is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the corresponding Docker image created from it.
Service Configuration
In addition to the following options, this component supports the options described in Common Configuration.
The following table provides an overview of the configuration variables and corresponding command line options for configuring the Device Registry.
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_APP_TYPE--hono.app.type
no
file
The device registry implementation to use. This may be either file or dummy. In the case of dummy a dummy implementation will be used which will consider all devices queried for as valid devices, having the access credentials hono-secret. Of course this shouldn’t be used for productive use.
HONO_CREDENTIALS_SVC_CACHE_MAX_AGE--hono.credentials.svc.cacheMaxAge
no
180
The maximum period of time (seconds) that information returned by the service’s operations may be cached for.
HONO_CREDENTIALS_SVC_FILENAME--hono.credentials.svc.filename
no
/var/lib/hono/device-registry/credentials.json
The path to the file where the server stores credentials of devices. Hono tries to read credentials from this file during start-up and writes out all identities to this file periodically if property HONO_CREDENTIALS_SVC_SAVE_TO_FILE is set to true.Please refer to Credentials File Format for details regarding the file’s format.
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
tenantAdapterStore should use tenantsProperties().getAdapter()
#2321
Merged
kaniyan
merged 2 commits into
eclipse:master
from
Default Value
Description
HONO_HEALTHCHECK_BINDADDRESS--hono.healthCheck.bindAddress
127.0.0.1
The IP address of the network interface that the health check server’s secure port should be bound to. The server will only be started if this property is set to some other than the default value and corresponding key material has been configured using the HONO_HEALTHCHECK_KEYPATH and HONO_HEALTHCHECK_CERTPATH variables.
HONO_HEALTHCHECK_CERTPATH--hono.healthCheck.certPath
-
The absolute path to the PEM file containing the certificate that the secure server should use for authenticating to clients. This option must be used in conjunction with HONO_HEALTHCHECK_KEYPATH.Alternatively, the HONO_HEALTHCHECK_KEYSTOREPATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_HEALTHCHECK_INSECUREPORTBINDADDRESS--hono.healthCheck.insecurePortBindAddress
127.0.0.1
The IP address of the network interface that the health check server’s insecure port should be bound to. The server will only be started if this property is set to some other than the default value.
HONO_HEALTHCHECK_INSECUREPORT--hono.healthCheck.insecurePort
8088
The port that the insecure server should listen on.
HONO_HEALTHCHECK_KEYPATH--hono.healthCheck.keyPath
-
The absolute path to the (PKCS8) PEM file containing the private key that the secure server should use for authenticating to clients. This option must be used in conjunction with HONO_HEALTHCHECK_CERTPATH. Alternatively, the HONO_HEALTHCHECK_KEYSTOREPATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_HEALTHCHECK_PORT--hono.healthCheck.port
8088
The port that the secure server should listen on.
HONO_HEALTHCHECK_KEYSTOREPASSWORD--hono.healthCheck.keyStorePassword
Set command-handling protocol adapter instance for device
Clients use this command to set the protocol adapter instance that currently handles command & control messages for a given device.
Clients can provide an optional lifespan parameter to make the protocol adapter instance entry expire after the given number of seconds. Note that implementations of this API have to support this feature, otherwise protocol adapters, as the clients of this API, might fail to correctly route command messages.
This API doesn’t mandate checks on the validity of the given device in order not to introduce a dependency on the Device Registration API. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.
Message Flow
Client sets the command-handling protocol adapter instance for device
Request Message Format
The following table provides an overview of the properties a client needs to set on a message to set the command-handling protocol adapter instance for a device in addition to the Standard Request Properties.
Name
Mandatory
Location
AMQP Type
Description
subject
yes
properties
string
MUST be set to set-cmd-handling-adapter-instance.
adapter_instance_id
yes
application-properties
string
The example certificate asserting the server’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
File Based Device Registry
The file based Device Registry supports the use of TLS for connections to protocol adapters and the Auth Server.
Please refer to the file based Device Registry admin guide for details regarding the required configuration steps.
The demo-certs/certs folder contains the following demo keys and certificates to be used with the file based Device Registry for that purpose.
File
Description
auth-server-cert.pem
The certificate of the Auth Server, used to verify the signatures of tokens issued by the Auth Server.
device-registry-key.pem
The example private key for creating signatures.
device-registry-cert.pem
The example certificate asserting the server’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
MongoDB Based Device Registry
The MongoDB based Device Registry supports the use of TLS for connections to protocol adapters and the Auth Server.
#2323
Open
calohmn
wants to merge
1
commit into
eclipse:master
base:
master
from
bosch-io:PR/fix_cmdrouter_thread_issue
Open
[#2029] Fix issues caused by different vertx contexts being used
#2323
calohmn
wants to merge
1
commit into
eclipse:master
from
bosch-io:PR/fix_cmdrouter_thread_issue
+15
−4
1
commit into
eclipse:master
base:
master
from
bosch-io:#2288_device_level_qos_master
Open
[#2288] Add integration tests verifying forwarding of QoS level in downstream messages
#2320
fkaltner
wants to merge
1
commit into
eclipse:master
from
bosch-io:#2288_device_level_qos_master
+162
−20
Conversation
3
@b-abel
:+1:
Carsten Lohmann
@calohmn
:+1:
Deniz
@Rassilion
Hi guys, I am trying to connect a custom TCP/IP protocol but get confused in the docs. Docs has example for custom adapter, but in the git repo examples has a custom Protocol Gateway. Which is the better way?
Kai Hudalla
@sophokles73
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Florian Kaltner
@fkaltner
@sophokles73 @kaniyan @ctron Can you take a look at eclipse/hono#2189 ?
Deniz
@Rassilion
The Protocol Gateway approach is the officially supported and recommended one. If you are planning to deploy and operate Hono yourself, you can, of course, also implement a Protocol Adapter.
Thanks, I will look into it more.
Kai Hudalla
@sophokles73
200
OK, The response message body contains the requested tenant information.
400
Bad Request, the request message did not contain all mandatory properties.
403
Forbidden, the client is not authorized to retrieve information for the given tenant.
404
Not Found, there is no tenant matching the given search criteria.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred. In this case, the response message’s content-type property SHOULD be set accordingly.
Otherwise the response message contains the information for the requested tenant as described in the following sections.
Tenant Information Format
Tenant information is carried in a single Data section of the response message as a UTF-8 encoded string representation of a single JSON object.
It is an error to include payload that is not of this type.
The table below provides an overview of the standard members defined for the JSON response object:
Name
Mandatory
JSON Type
Description
adapters
no
array
A list of configuration options valid for certain adapters only. The format of a configuration option is described here Adapter Configuration Format. NB If the element is provided then the list MUST NOT be empty. NB Only a single entry per type is allowed. If multiple entries for the same type are present it is handled as an error. NB If the element is omitted then all adapters are enabled in their default configuration.
message-id
no
properties
string
MAY contain an identifier that uniquely identifies the message at the sender side. Either this or the correlation-id property MUST be set.
reply-to
yes
properties
string
MUST contain the source address that the application expects to receive the response from. This address MUST be the same as the source address used for establishing the client’s receiver link (see Preconditions above).
The command message MAY contain arbitrary payload to be sent to the device in a single AMQP Data section. The value of the command message’s subject value may provide a hint to the device regarding the format, encoding and semantics of the payload data.
Hono uses following AMQP delivery states to indicate the outcome of sending the command to the device:
Delivery State
Description
accepted
The command has been delivered to the device for processing.
released
The command has not been delivered to the device because the device is (currently) not connected.
rejected
The command has not been delivered to the device because it does not contain all required information.
symbol
Must be set to application/vnd.eclipse-hono-dc-notification+json
device_id
yes
application-properties
string
The ID of the authenticated device
Each connection event’s payload MUST contain a UTF-8 encoded string representation of a single JSON object with the following fields:
Name
Mandatory
Type
Description
cause
yes
string
The cause of the connection event. MUST be set to either connected or disconnected.
remote-id
yes
string
An identifier of the device that is the subject of this event, e.g. an IP address:port, client id etc. The format and semantics of this identifier is specific to the protocol adapter and the transport protocol it supports.
source
yes
string
The type name of the protocol adapter reporting the event, e.g. hono-mqtt.
Client has established an AMQP connection with Hono.
Hono supports both AT MOST ONCE as well as AT LEAST ONCE delivery of telemetry messages. However, clients SHOULD use AT LEAST ONCE delivery in order to support end-to-end flow control and therefore SHOULD set the snd-settle-mode field to unsettled and the rcv-settle-mode field to first in their attach frame during link establishment.
A client MAY indicate to Hono during link establishment that it wants to distribute the telemetry messages received for a given tenant among multiple consumers by including a link property subscription-name whose value is shared by all other consumers of the tenant. Hono ensures that messages from a given device are delivered to the same consumer. Note that this also means that telemetry messages MAY not be evenly distributed among consumers, e.g. when only a single device sends data. NB This feature is not supported yet.
In addition a client MAY include a boolean link property ordering-required with value false during link establishment in order to indicate to Hono that it does not require messages being delivered strictly in order per device but instead allows for messages being distributed evenly among the consumers. NB This feature is not supported yet.
Message Flow
The following sequence diagram illustrates the flow of messages involved in a Business Application receiving a telemetry data message from Hono. The delivery mode used is AT LEAST ONCE.
Receive Telemetry Data
AMQP 1.0 Messaging Network delivers telemetry message to Business Application.
Business Application acknowledges reception of message.
Note
The Business Application can only consume telemetry messages that have been uploaded to Hono after the Business Application has established the link with the AMQP 1.0 Messaging Network. This is because telemetry messages are not durable, i.e. they are not persisted in Hono in order to be forwarded at a later time.
Message Format
You can follow the steps as described in the Getting Started guide with the following differences:
Compared to a plain k8s deployment Azure provides us DNS names with static IPs for the Hono endpoints. To retrieve them:
HTTP_ADAPTER_IP=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.httpPublicIPFQDN.value -o tsv`
AMQP_ADAPTER_IP=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.amqpPublicIPFQDN.value -o tsv`
MQTT_ADAPTER_IP=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.mqttPublicIPFQDN.value -o tsv`
REGISTRY_IP=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.registryPublicIPFQDN.value -o tsv`
AMQP_NETWORK_IP=`az group deployment show --name HonoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.networkPublicIPFQDN.value -o tsv`
As Azure Service Bus does not support auto creation of queues you have to create a queue per tenant (ID), e.g. after you have created your tenant run:
az servicebus queue create --resource-group $resourcegroup_name \
--namespace-name $service_bus_namespace \
Recommended
What to Upload to SlideShare
SlideShare
Customer Code: Creating a Company Customers Love
HubSpot
Be A Great Product Leader (Amplify, Oct 2019)
Adam Nash
Trillion Dollar Coach Book (Bill Campbell)
Eric Schmidt
APIdays Paris 2019 - Innovation @ scale, APIs as Digital Factories' New Machi...
apidays
A few thoughts on work life-balance
Qpid Dispatch Router
Artemis
MQTT, HTTP clients
24 → /telemetry
Hono Components Consumer application
18.
18
Eclipse Hono
APIs
● Telemetry & Event
● Device Registration
● Credentials
● Authentication
● Command & Control (not available in 0.5 release)
19.
19
Eclipse Hono
Telemetry & Event
● used by devices to send data/events downstream
● leverages on “direct messaging” …
○ Telemetry
○ Devices can send data only if consumers are online
○ No broker involved
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "256Mi"
limits:
cpu: "1"
memory: "512Mi"
svc:
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
# adapter's container filesystem. The files from the secret(s) can
# then be used in e.g. the service client specs.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the adapter has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
Company
About
Press
Work Here
Legal
Privacy Policy
Contact Us
Stack Exchange Network
Technology
Life / Arts
Culture / Recreation
Science
Other
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Software Engineering
Unix & Linux
Ask Different (Apple)
WordPress Development
Geographic Information Systems
Delivery States
The Credentials service uses the following AMQP message delivery states when receiving request messages from clients:
Delivery State
Description
ACCEPTED
Indicates that the request message has been received and accepted for processing.
REJECTED
Indicates that the request message has been received but cannot be processed. The disposition frame’s error field contains information regarding the reason why. Clients should not try to re-send the request using the same message properties in this case.
Credentials Format
Credential data is carried in the body of an AMQP message as part of a single Data section. The message’s content-type property must be set to application/json.
The credential data is contained in the Data section as a UTF-8 encoded string representation of a single JSON object. It is an error to include payload that is not of this type.
The table below provides an overview of the standard members defined for the JSON object:
Name
Mandatory
JSON Type
Default Value
Description
device-id
yes
string
The ID of the device to which the credentials belong.
type
yes
ACCEPTED
Indicates that the request message has been received and accepted for processing.
REJECTED
Indicates that the request message has been received but cannot be processed. The disposition frame’s error field contains information regarding the reason why. Clients should not try to re-send the request using the same message properties in this case.
Paolo Patierno
MQTT on the road
Paolo Patierno
Iot Conference Berlin M2M,IoT, device management: one protocol to rule them all?
Julien Vermillard
Appetizers, Windows Embedded Compact and the Internet of Things
Paolo Patierno
Azure Service Bus : under the hood
Paolo Patierno
Internet of Things : my washing machine on Internet ?
Paolo Patierno
MQTT on devices : geolocation in the IoT world
Paolo Patierno
English
Español
Português
Français
Deutsch
About
Dev & API
Blog
Terms
Privacy
1.3
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > MongoDB Based Device Registry Configuration
Service Configuration
Port Configuration
Authentication Service Connection Configuration
Metrics Configuration
MongoDB Based Device Registry Configuration
The MongoDB based Device Registry component provides an implementation of Eclipse Hono™’s Device Registration,
Credentials and Tenant APIs. Protocol adapters use these APIs to determine a device’s registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it. In addition to the above, this Device Registry also provides an implementation of Device Registry Management APIs for managing tenants, registration information and credentials of devices.
The Device Registry is implemented as a Spring Boot application, and the data is persisted in a MongoDB database. It can be run either directly from the command line or by means of starting the corresponding Docker image created from it.
Service Configuration
The following table provides an overview of the configuration variables and corresponding command line options for configuring the MongoDB based Device Registry. In addition to the following options, this component also supports the options described in Common Configuration.
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_CREDENTIALS_SVC_CACHE_MAX_AGE--hono.credentials.svc.cacheMaxAge
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
GitHub Stars program
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
MongoDB Based Device Registry Configuration
File Based Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
MQTT Adapter Configuration
AMQP Adapter Configuration
CoAP Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
AMQP Adapter Client for Java
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Auth Server Configuration
Service Configuration
Port Configuration
Secure Port Only
Insecure Port Only
Dual Port
Ephemeral Ports
Metrics Configuration
Auth Server Configuration
The Auth Server component exposes a service endpoint implementing Eclipse Hono™’s Authentication API. Other services use this component for authenticating clients and retrieving a token asserting the client’s identity and corresponding authorities.
This component serves as a default implementation of the Authentication API only. On startup, it reads in all identities and their authorities from a JSON file from the file system. All data is then kept in memory and there are no remote service APIs for managing the identities and their authorities.
The Auth Server is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the corresponding Docker image created from it.
Service Configuration
In addition to the following options, this component supports the options described in Common Configuration.
The server can be configured by means of environment variables or corresponding command line options.
The following table provides an overview of the configuration variables and corresponding command line options that the server supports:
Environment VariableCommand Line Option
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide > Common Configuration
Java VM Options
Vert.x Options
Using epoll() on Linux
Protocol Adapter Options
AMQP 1.0 Messaging Network Connection Configuration
Command & Control Connection Configuration
Tenant Service Connection Configuration
Device Registration Service Connection Configuration
Credentials Service Connection Configuration
Device Connection Service Connection Configuration
Direct Connection to Data Grid
Resource Limits Checker Configuration
Connection Event Producer Configuration
Common Configuration
Many Hono components support a common set of configuration options. This section
5000
The maximum amount of time (milliseconds) that the client should wait for the AMQP connection to be opened. This includes the time for TCP/TLS connection establishment, SASL handshake and exchange of the AMQP open frame. This property can be used to tune the time period to wait according to the network latency involved with the connection between the client and the service.
no
-
no
20
The maximum amount of time (milliseconds) that the client should wait for credits after a link to the service has been established.
no
localhost
The IP address or name of the host to connect to. NB This needs to be set to an address that can be resolved within the network the adapter runs on. When running as a Docker container, use Docker’s --network command line option to attach the local container to the Docker network that the service is running on.
no
true
no
16000
Sets the amount of time in milliseconds after which a connection will be closed when no frames have been received from the remote peer. This property is also used to configure a heartbeat mechanism, checking that the connection is still alive. The corresponding heartbeat interval will be set to idleTimeout/2 ms.
no
200
The number of credits that a consuming client will initially issue to the service (sender) after link creation. This value effectively limits the number of messages that can be in flight unsettled.
no
-
no
-
The password required to read the contents of the key store.
no
called before start of adapter’s HTTP server
onStartupSuccess()
called after successful start of adapter
preShutdown()
called before stop of adapter’s HTTP server
postShutdown
called after successful stop of adapter
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Admin Guide
Admin Guide
Learn how to operate Eclipse Hono™ and look up the configuration options of its components.
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > Load Tests with JMeter
Installation
Example Test Plans
Load Tests with JMeter
Eclipse Hono™ comes with an Apache JMeter plugin which provides samplers that can be used in JMeter test plans to send and receive telemetry/event data.
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > Sigfox Adapter
Pre-requisites
Devices and credentials
Setup example
Registering devices
Setting up callbacks
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > Kura Adapter
Authentication
Client Certificate
Username/Password
Resource Limit Checks
Connection Limits
Connection Duration Limits
Message Limits
Connection Events
1.2
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > CoAP Adapter
Device Authentication
PSK
Message Limits
CoAP Content Format Codes
Publish Telemetry Data (authenticated Device)
Publish Telemetry Data (unauthenticated Device)
HONO_KURA_CERT_PATH--hono.kura.certPath
no
-
The absolute path to the PEM file containing the certificate that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_KURA_KEY_PATH.Alternatively, the HONO_KURA_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_KURA_CONTROL_PREFIX--hono.kura.controlPrefix
no
$EDC
The topic.control-prefix to use for determining if a message published by a Kura gateway is a control message. All messages published to a topic that does not start with this prefix are considered data messages.
HONO_KURA_CTRL_MSG_CONTENT_TYPE--hono.kura.ctrlMsgContentType
no
application/vnd.eclipse.kura-control
The content type to set on AMQP messages created from Kura control messages.
HONO_KURA_DATA_MSG_CONTENT_TYPE--hono.kura.dataMsgContentType
no
application/vnd.eclipse.kura-data
The content type to set on AMQP messages created from Kura data messages.
HONO_KURA_DEFAULTS_ENABLED--hono.kura.defaultsEnabled
HONO_COAP_CERT_PATH--hono.coap.certPath
no
-
The absolute path to the PEM file containing the certificate that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_COAP_KEY_PATH.Alternatively, the HONO_COAP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_COAP_COAP_THREADS--hono.coap.coapThreads
no
2
The number of threads to use for processing CoAP message exchanges at the protocol layer.
HONO_COAP_CONNECTOR_THREADS--hono.coap.connectorThreads
no
2
The number of threads to use for receiving/sending UDP packets. The connector will start the given number of threads for each direction, outbound (sending) as well as inbound (receiving).
HONO_COAP_DTLS_THREADS--hono.coap.dtlsThreads
no
32
The number of threads to use for processing DTLS message exchanges at the connection layer.
HONO_COAP_DTLS_RETRANSMISSION_TIMEOUT--hono.coap.dtlsRetransmissionTimeout
no
60000
The time interval (milliseconds) to wait for incoming traffic from a device before the connection should be considered stale and thus be closed. Setting this property to 0 prevents the adapter from detecting and closing stale connections.
HONO_AMQP_SEND_MESSAGE_TO_DEVICE_TIMEOUT--hono.amqp.sendMessageToDeviceTimeout
no
1000
The time interval (milliseconds) to wait for a device to acknowledge receiving a (command) message before the AMQP link used for sending the message will be closed. Setting this property to 0 means the adapter waits indefinitely for a device to acknowledge receiving the message.
HONO_AMQP_INSECURE_PORT_BIND_ADDRESS--hono.amqp.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure port should be bound to.See Port Configuration below for details.
HONO_AMQP_INSECURE_PORT--hono.amqp.insecurePort
no
5672
The port number that the protocol adapter should listen on for insecure connections.See Port Configuration below for details.
HONO_AMQP_INSECURE_PORT_ENABLED--hono.amqp.insecurePortEnabled
no
127.0.0.1
The IP address of the network interface that the secure port should be bound to.See Port Configuration below for details.
HONO_MQTT_CERT_PATH--hono.mqtt.certPath
no
-
The absolute path to the PEM file containing the certificate that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_MQTT_KEY_PATH.Alternatively, the HONO_MQTT_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_MQTT_COMMAND_ACK_TIMEOUT--hono.mqtt.commandAckTimeout
no
100
Deprecated. Use HONO_MQTT_SEND_MESSAGE_TO_DEVICE_TIMEOUT instead. The amount of time (milliseconds) after which the sending of a command to a device using QoS 1 is considered to be failed. The value of this variable should be increased in cases where devices are connected over a network with high latency.
HONO_MQTT_SEND_MESSAGE_TO_DEVICE_TIMEOUT--hono.mqtt.sendMessageToDeviceTimeout
no
1000
The amount of time (milliseconds) after which the sending of a command to a device using QoS 1 is considered to be failed. The value of this variable should be increased in cases where devices are connected over a network with high latency.
HONO_MQTT_DEFAULTS_ENABLED--hono.mqtt.defaultsEnabled
no
no
-
The absolute path to the PEM file containing the certificate that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_HTTP_KEY_PATH.Alternatively, the HONO_HTTP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_HTTP_DEFAULTS_ENABLED--hono.http.defaultsEnabled
no
true
If set to true the protocol adapter uses default values registered for a device to augment messages published by the device with missing information like a content type. In particular, the protocol adapter adds default values registered for the device as (application) properties with the same name to the AMQP 1.0 messages it sends downstream to the AMQP Messaging Network.
HONO_HTTP_INSECURE_PORT--hono.http.insecurePort
no
-
The insecure port the protocol adapter should listen on.See Port Configuration below for details.
HONO_HTTP_INSECURE_PORT_BIND_ADDRESS--hono.http.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure port should be bound to.See Port Configuration below for details.
HONO_HTTP_INSECURE_PORT_ENABLED--hono.http.insecurePortEnabled
no
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
40
Star
no
-
The insecure port the server should listen on for AMQP 1.0 connections.See Port Configuration below for details.
HONO_DEVICECONNECTION_AMQP_INSECURE_PORT_BIND_ADDRESS--hono.deviceConnection.amqp.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure AMQP port should be bound to.See Port Configuration below for details.
HONO_DEVICECONNECTION_AMQP_INSECURE_PORT_ENABLED--hono.deviceConnection.amqp.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_REGISTRY_AMQP_INSECURE_PORT or the default AMQP port number (5672) if not set explicitly.See Port Configuration below for details.
HONO_DEVICECONNECTION_AMQP_KEY_PATH--hono.deviceConnection.amqp.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with HONO_DEVICECONNECTION_AMQP_CERT_PATH. Alternatively, the HONO_DEVICECONNECTION_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_DEVICECONNECTION_AMQP_KEY_STORE_PASSWORD--hono.deviceConnection.amqp.keyStorePassword
HONO_CREDENTIALS_SVC_HASH_ALGORITHMS_WHITELIST--hono.credentials.svc.hashAlgorithmsWhitelist
no
empty
An array of supported hashing algorithms to be used with the hashed-password type of credentials. When not set, all values will be accepted.
HONO_CREDENTIALS_SVC_MAX_BCRYPT_ITERATIONS--hono.credentials.svc.maxBcryptIterations
no
10
HONO_CREDENTIALS_SVC_MODIFICATION_ENABLED--hono.credentials.svc.modificationEnabled
no
true
When set to false the credentials contained in the registry cannot be updated nor removed.
HONO_CREDENTIALS_SVC_RECEIVER_LINK_CREDIT--hono.credentials.svc.receiverLinkCredit
no
100
The number of credits to flow to a client connecting to the Credentials endpoint.
lhotari:lh-fix-jdbc-tenant-adapter-store
Nov 23, 2020
Merged
tenantAdapterStore should use tenantsProperties().getAdapter()
#2321
kaniyan
merged 2 commits into
eclipse:master
from
lhotari:lh-fix-jdbc-tenant-adapter-store
Nov 23, 2020
+2
−1
Conversation
3
Commits
2
Checks
-
The password required to read the contents of the key store.
HONO_HEALTHCHECK_KEYSTOREPATH--hono.healthCheck.keyStorePath
-
The absolute path to the Java key store containing the private key and certificate that the secure server should use for authenticating to clients. Either this option or the HONO_HEALTHCHECK_KEYPATH and HONO_HEALTHCHECK_CERTPATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively. The HONO_HEALTHCHECK_KEYSTOREPASSWORD variable can be used to set the password required for reading the key store.
Failure to start
The component/service will fail to start if neither the secure not the insecure server have been configured properly.
Tracing
In normal operation the vast majority of messages should be flowing through the system without any noteworthy delays or problems. In fact, that is the whole purpose of Hono. However, that doesn’t mean that nothing can go wrong. For example, when a tenant’s device administrator changes the credentials of a device in the Credentials service but has not yet updated the credentials on the device yet, then the device will start to fail in uploading any data to the protocol adapter it connects to. After a while, a back end application’s administrator might notice, that there hasn’t been any data being received from that particular device for quite some time. The application administrator therefore calls up the Hono operations team and complains about the data being lost somewhere.
The operations team will have a hard time determining what is happening, because it will need to figure out which components have been involved in the processing of the device and why the data hasn’t been processed as usual. The metrics alone usually do not help much here because metrics are usually not scoped to individual devices. The logs written by the individual components, on the other hand, might contain enough information to correlate individual entries in the log with each other and thus trace the processing of the message throughout the system. However, this is usually a very tedious (and error prone) process and the relevant information is often only logged at a level (e.g. DEBUG) that is not used in production (often INFO or above).
In order to address this problem, Hono’s service components are instrumented using OpenTracing. OpenTracing provides Vendor-neutral APIs and instrumentation for distributed tracing. The OpenTracing web page provides a list of supported tracer implementations from which users can choose in order to collect (and examine) the tracing information generated by Hono’s individual components.
Configuring a Tracer
Hint: The description in this chapter applies to any compatible OpenTracing implementation. For an easier approach to configure usage of Jaeger tracing, see the next chapter.
Hono’s components use the OpenTracing Tracer Resolver mechanism to find and initialize a concrete OpenTracing implementation during startup of the component. The discovery mechanism is using Java’s ServiceLoader and as such relies on the required resources to be available on the class path.
The identifier of the protocol adapter instance that currently handles commands for the device or gateway identified by the device_id property.
lifespan
no
application-properties
int
The lifespan of the mapping entry in seconds. After that period, the mapping entry shall be treated as non-existent by the Device Registration API methods. A negative value, as well as an omitted property, is interpreted as an unlimited lifespan.
The body of the message SHOULD be empty and will be ignored if it is not.
Response Message Format
A response to a set command-handling adapter instance for device request contains the Standard Response Properties.
The response message’s status property may contain the following codes:
Code
Description
204
OK, the command-handling adapter instance for the device has been updated.
400
Bad Request, the adapter instance for the device has not been set or updated due to invalid or missing data in the request.
Please refer to the MongoDB based Device Registry admin guide for details regarding the required configuration steps.
The demo-certs/certs folder contains the following demo keys and certificates to be used with the MongoDB based Device Registry for that purpose.
File
Description
auth-server-cert.pem
The certificate of the Auth Server, used to verify the signatures of tokens issued by the Auth Server.
device-registry-key.pem
The example private key for creating signatures.
device-registry-cert.pem
The example certificate asserting the server’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
HTTP Adapter
The HTTP adapter supports the use of TLS for its connections to the Tenant service, the Device Registration service, the Credentials service and the AMQP Messaging Network. The adapter also supports the use of TLS for connections with devices. For this purpose, the adapter can be configured with a server certificate and private key.
Please refer to the HTTP adapter admin guide for details regarding the required configuration steps.
The demo-certs/certs folder contains the following demo keys and certificates to be used with the HTTP adapter for that purpose.
Conversation
0
Commits
1
Checks
3
Files changed
1
Conversation
Copy link
Quote reply
Contributor
calohmn
commented
Nov 23, 2020
When processing Command Router API requests, the original vert.x context of the CommandRouterAmqpServer needs to be restored at the end, because the commandConsumerFactory has switched to the context in which the downstream AMQP connection is used.
Commits
1
Checks
3
Files changed
12
Conversation
Copy link
Quote reply
Contributor
fkaltner
commented
Nov 23, 2020
The HTTP adapter suffered from a bug when a client sent an event and set a device level QoS to something different than 1 or set no device level QoS at all. In any case the event was sent with QoS 1 but the message property indicating the device level QoS to the northbound application (which should always be 1 as this is the only supported QoS for events) was wrong.
Signed-off-by: Florian Kaltner florian.kaltner@bosch.io
@/all I would like to prepare the 1.3.1 and 1.4.3 service releases. Any other fixes that you want to go into these apart from what is already on the project boards? Just in case you wonder why it is 1.4.3 and not 1.4.1: that is due the fact that the Management API on the 1.4.x branch has version 1.4.3 now and IMHO it would be a good idea to keep the Management API version in sync with the Hono release version so that it is easy to know which version of Hono contains which Management API version. That also means that we would bump the Management API version always according to the Hono releases, which FMPOV is not a problem at all. WDYT?
Dejan Bosanac
@dejanb
@sophokles73 sounds good 👍
Karthees Kalidass
@kaniyan
@sophokles73 Its good to keep the Management API and Hono relase versions in sync. :+1:
marcel-bluestone
@marcel-bluestone
Hello, one basic question. How do I set configuration parameters for mono via command-line? E.g. --hono.connectionEvents.producer=events.... Upon Minikube startup? Or do I have to connect to a specific docker container? I don't see anything in the documentation on how to do this. An example would be really helpful
Kai Hudalla
@sophokles73
Hi @marcel-bluestone It seems that you are deploying to kubernetes. Are you using the Helm chart?
Kai Hudalla
@sophokles73
defaults
no
object
Arbitrary default properties for devices belonging to the tenant. The properties can be used by protocol adapters to augment downstream messages with missing information, e.g. setting a default content type or time-to-live.
enabled
yes
boolean
If set to false the tenant is currently disabled. Protocol adapters MUST NOT allow devices of a disabled tenant to connect and MUST NOT accept data published by such devices.
minimum-message-size
no
number
The minimum message size in bytes. If it is set then the payload size of the telemetry, event and command messages are calculated in accordance with the configured value and then reported to the metrics. See Metrics for more details.
resource-limits
no
Note that Hono relies on the particular protocol adapter to deliver commands to devices. Depending on the used transport protocol and the adapter’s implementation, the accepted outcome may thus indicate any of the following:
An attempt has been made to deliver the command to the device. However, it is unclear if the device has received (or processed) the command.
The device has acknowledged the reception of the command but has not processed the command yet.
An application can determine the overall outcome of the operation by means of the response to the command that is sent back by the device. An application should consider execution of a command to have failed, if it does not receive a response within a reasonable amount of time.
Response Message Format
The following table provides an overview of the properties set on a message sent in response to a command.
Name
Mandatory
Location
Type
Description
content-type
no
properties
string
If present, MUST contain a Media Type as defined by RFC 2046 which describes the semantics and format of the command’s input data contained in the message payload. However, not all protocol adapters will support this property as not all transport protocols provide means to convey this information, e.g. MQTT 3.1.1 has no notion of message headers.
data
no
object
An arbitrary JSON object which may contain additional information about the occurrence of the event.
The example below might be used by the MQTT adapter to indicate that a connection with a device using client identifier mqtt-client-id-1 has been established:
{
"cause": "connected",
"remote-id": "mqtt-client-id-1",
"source": "hono-mqtt",
"data": {
"foo": "bar"
}
}
The format of the messages containing the telemetry data is the same as for the Forward Telemetry Data operation.
--name $MY_TENANT
Wim Vanderbauwhede
Is vc still a thing final
Mark Suster
The GaryVee Content Model
Gary Vaynerchuk
Mammalian Brain Chemistry Explains Everything
Loretta Breuning, PhD
Blockchain + AI + Crypto Economics Are We Creating a Code Tsunami?
Dinis Guarda
English
Español
Português
Français
Deutsch
About
● … “store and forward”
○ Event
○ Broker for storing event with a “ttl” eventually
● consumers receive data published by devices belonging to a
particular tenant
20.
20
Routing Telemetry Data
Producer Router Consumer
Send message
Accepted
Send message
Accepted
21.
21
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the adapter's configuration properties
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
# healthCheck contains configuration properties for the adapter's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the adapter's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
Electrical Engineering
Android Enthusiasts
Information Security
Database Administrators
Drupal Answers
SharePoint
User Experience
Mathematica
Salesforce
ExpressionEngine® Answers
Stack Overflow em Português
Blender
Network Engineering
Cryptography
Code Review
Magento
Software Recommendations
string
The credential type name. The value may be arbitrarily chosen by clients but SHOULD reflect the particular type of authentication mechanism the credentials are to be used with. Possible values include (but are not limited to) psk, x509-cert, hashed-password etc.
auth-id
yes
string
The identity that the device should be authenticated as.
enabled
no
boolean
true
If set to false the credentials are not supposed to be used to authenticate devices any longer. This may e.g. be used to disable a particular mechanism for authenticating the device. NB It is the responsibility of the protocol adapter to make use of this information.
secrets
yes
array
A list of secrets scoped to a particular time period. See Secrets Format for details. NB This array must contain at least one element - an empty array is considered an error.
For each set of credentials the combination of auth-id and type MUST be unique within a tenant.
The device registry may choose to not return information which is not suitable for authentication a device. This includes for example the enabled property. If set to false, then the device registry may choose to treat this request as if no credentials would be found. For secrets for example, this could mean that the device registry does not return secrets which are not valid at the current point in time.
Copyright
Support
×
Share Clipboard
×
Facebook
Twitter
LinkedIn
Link
Public clipboards featuring this slide
×
No public clipboards found for this slide
Select another clipboard
×
Looks like you’ve clipped this slide to already.
Create a clipboard
no
180
The maximum period of time (seconds) that information returned by the service’s operations may be cached for.
HONO_CREDENTIALS_SVC_COLLECTION_NAME--hono.credentials.svc.collectionName
no
credentials
The name of the MongoDB collection where the server stores credentials of devices.
HONO_CREDENTIALS_SVC_HASH_ALGORITHMS_WHITELIST--hono.credentials.svc.hashAlgorithmsWhitelist
no
empty
An array of supported hashing algorithms to be used with the hashed-password type of credentials. When not set, all values will be accepted.
HONO_CREDENTIALS_SVC_MAX_BCRYPT_ITERATIONS--hono.credentials.svc.maxBcryptIterations
no
10
HONO_CREDENTIALS_SVC_MODIFICATION_ENABLED--hono.credentials.svc.modificationEnabled
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
eclipse
/
hono
Watch
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
1.3
dev
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
1.4
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.4)
Mandatory
Default
Description
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of verticle instances to deploy. If not set, one verticle per processor core is deployed.
HONO_AUTH_AMQP_BIND_ADDRESS--hono.auth.amqp.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure port should be bound to.See Port Configuration below for details.
HONO_AUTH_AMQP_CERT_PATH--hono.auth.amqp.certPath
no
-
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_AUTH_AMQP_KEY_PATH.Alternatively, the HONO_AUTH_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_AUTH_AMQP_INSECURE_PORT--hono.auth.amqp.insecurePort
no
-
The insecure port the server should listen on.See Port Configuration below for details.
HONO_AUTH_AMQP_INSECURE_PORT_BIND_ADDRESS--hono.auth.amqp.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure port should be bound to.See Port Configuration below for details.
describes those options.
Each component which supports the following options explicitly states so. If
it doesn’t, then these options are not supported by this component.
Java VM Options
The Java VM started in Hono’s components can be configured with arbitrary command line options by means of setting the JDK_JAVA_OPTIONS environment variable.
Environment Variable
Mandatory
Default
Description
JDK_JAVA_OPTIONS
no
-
Any options that should be passed to the Java VM on the command line, e.g. -Xmx128m
Vert.x Options
The vert.x framework instance used to run Hono’s components on can be configured using the following environment variables or corresponding command line options:
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_VERTX_DNS_QUERY_TIMEOUT--hono.vertx.dnsQueryTimeout
no
-
no
1000
The maximum amount of time (milliseconds) that the client should wait for the service’s attach frame during link establishment. This property can be used to tune the time period to wait according to the network latency involved with the communication link between the client and the service.
no
-
The name to use as the container-id in the client’s AMQP open frame during connection establishment.
no
-
The password to use for authenticating to the service.
no
5671
The port that the service is listening on.
no
1000
The maximum number of milliseconds to wait for a delivery update after an event or command message was sent before the send operation is failed. Setting this value to a higher value increases the chance of successful service invocation in situations where network latency is high.
no
-1
The number of attempts (in addition to the original connection attempt) that the client should make in order to establish an AMQP connection with the peer before giving up. The default value of this property is -1 which means that the client will try forever.
no
100
The plugin provides a Hono Receiver Sampler which can be used together with JMeter’s standard HTTP Sampler and XMeter’s JMeter plugin for MQTT to play the roles of a downstream application (consumer) and devices uploading data to the HTTP and MQTT protocol adapters. The diagram below illustrates how the components are related to each other.
JMeter with Hono
Installation
Install JMeter
Copy the plugin jar file <hono-installation>/jmeter/target/plugin/hono-jmeter-<version>-jar-with-dependencies.jar to the <jmeter-installation>/lib/ext folder.
Start JMeter
Example Test Plans
The <hono-installation>/jmeter/src/jmeter folder contains several JMeter test plans which you can use as a basis for your own tests. All test plans can be run against Hono’s example deployment.
http_messaging_throughput_test.jmx runs a set of HTTP clients and AMQP 1.0 consumers for a given period of time. The senders publish data to Hono’ HTTP adapter while the consumers receive messages from the AMQP 1.0 Messaging Network (in case of the example installation this is the Qpid Dispatch Router). The test plan measures the number of messages that are sent/received during the test execution.
mqtt_messaging_throughput_test.jmx runs a set of MQTT clients and AMQP 1.0 consumers for a given period of time. The clients publish data to Hono’ MQTT adapter while the consumers receive messages from the AMQP 1.0 Messaging Network (in case of the example installation this is the Qpid Dispatch Router). The test plan measures the number of messages that are sent/received during the test execution. To use this plan you also need to add the JMeter plugin for MQTT to your JMeter plugin path.
amqp_messaging_throughput_test.jmx runs a set of AMQP 1.0 senders and consumers for a given period of time. The senders publish data to the AMQP 1.0 Messaging Network directly while the consumers receive messages from the AMQP 1.0 Messaging Network (in case of the example installation this is the Qpid Dispatch Router). The test plan measures the number of messages that are sent/received during the test execution.
The sender can be configured to wait for n active receivers (from this test plan and JMeter instance) which can be used to make sure, that the receivers consuming from the corresponding address (e.g. telemetry/DEFAULT_TENANT) are up and running before the senders begin to publish messages.
It is recommended to run the test plans in non-gui mode as illustrated by the example shell scripts that are contained in the <hono-installation>/jmeter/src/jmeter folder. You may need to adapt some of the properties to reflect your concrete setup, e.g. the path to the trust store, host names, ports etc.
Enabling command & control
Events
Consuming data
Known bugs and limitations
Sigfox Adapter
The Sigfox protocol adapter exposes an HTTP endpoint for connecting up with
the Sigfox backend for publishing telemetry, events and use command & control.
Tech preview
This protocol adapter is not considered production ready. Its APIs might still
be subject to change without warning.
Pre-requisites
This Sigfox adapter only connects to the Sigfox backend system
(backend.sigfox.com). It does not allow direct access to Sigfox devices.
So you need to set up your Sigfox devices on backend.sigfox.com and then
configure the callbacks connect to your installation of Hono.
Devices and credentials
In a nutshell, the Sigfox adapter requires a single device identity, acting
as a gateway device. This identity will be used to connect to Hono. All devices
registered with Sigfox (the actual Sigfox devices), will be registered in Hono
to allow this first identity as their gateway device.
Setup example
The following sub-sections walk you through an example setup.
Registering devices
This example assumes that the Sigfox protocol adapter is available as
https://iot-sigfox-adapter.my.hono.
Create a new gateway device with the following registration:
Publishing Data
Downstream Meta Data
Event Message Time-to-live
Tenant specific Configuration
Kura Adapter
The Kura protocol adapter exposes an MQTT topic hierarchy allowing Eclipse Kura™ based gateways to publish control and data messages to Eclipse Hono™’s Telemetry and Event endpoints.
Note
The Kura adapter is supposed to be used with gateways running Kura version 3.x. Gateways running Kura version 4 and later should connect to the MQTT adapter instead.
Authentication
The Kura adapter by default requires devices (gateways) to authenticate during connection establishment.
The adapter supports both the authentication based on the username/password provided in an MQTT CONNECT packet as well as client
certificate based authentication as part of a TLS handshake for that purpose.
The adapter tries to authenticate the device using these mechanisms in the following order
Client Certificate
When a device uses a client certificate for authentication during the TLS handshake, the adapter tries to determine the tenant
that the device belongs to based on the issuer DN contained in the certificate.
In order for the lookup to succeed, the tenant’s trust anchor needs to be configured by means of registering the
trusted certificate authority. The device’s client certificate will then be
validated using the registered trust anchor, thus implicitly establishing the tenant that the device belongs to.
Publish Telemetry Data (authenticated Gateway)
Publish an Event (authenticated Device)
Publish an Event (unauthenticated Device)
Publish an Event (authenticated Gateway)
Command & Control
Commands handled by gateways
Sending a Response to a Command (authenticated Device)
Sending a Response to a Command (unauthenticated Device)
Sending a Response to a Command (authenticated Gateway)
Downstream Meta Data
Event Message Time-to-live
Tenant specific Configuration
CoAP Adapter
The CoAP protocol adapter exposes CoAP based endpoints for Eclipse Hono™’s south bound Telemetry, Event and Command & Control APIs.
Experimental
The CoAP adapter has not yet reached the level of maturity of the other standard adapters. In particular, the resources implemented by the adapter might
still be subject to change.
Device Authentication
no
true
If set to true the protocol adapter uses default values registered for a device to augment messages published by the device with missing information like a content type. In particular, the protocol adapter adds default values registered for the device as (application) properties with the same name to the AMQP 1.0 messages it sends downstream to the AMQP Messaging Network.
HONO_KURA_INSECURE_PORT--hono.kura.insecurePort
no
-
The insecure port the protocol adapter should listen on.See Port Configuration below for details.
HONO_KURA_INSECURE_PORT_BIND_ADDRESS--hono.kura.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure port should be bound to.See Port Configuration below for details.
HONO_KURA_INSECURE_PORT_ENABLED--hono.kura.insecurePortEnabled
no
false
If set to true the protocol adapter will open an insecure port (not secured by TLS) using either the port number set via HONO_KURA_INSECURE_PORT or the default MQTT port number (1883) if not set explicitly.See Port Configuration below for details.
HONO_KURA_KEY_PATH--hono.kura.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_KURA_CERT_PATH. Alternatively, the HONO_KURA_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
no
2000
The timeout in milliseconds for DTLS retransmissions.
HONO_COAP_DEFAULTS_ENABLED--hono.coap.defaultsEnabled
no
true
If set to true the protocol adapter uses default values registered for a device to augment messages published by the device with missing information like a content type. In particular, the protocol adapter adds default values registered for the device as (application) properties with the same name to the AMQP 1.0 messages it sends downstream to the AMQP Messaging Network.
HONO_COAP_EXCHANGE_LIFETIME--hono.coap.exchangeLifetime
no
247000
The exchange lifetime in milliseconds. According RFC 7252, that value is 247s. Such a large time requires also a huge amount of heap. That time includes a processing time of 100s and retransmissions of CON messages. Therefore a practical value could be much smaller.
HONO_COAP_INSECURE_NETWORK_CONFIG--hono.coap.insecureNetworkConfig
no
-
The absolute path to a Californium properties file containing network configuration properties that should be used for the insecure CoAP port. If not set, Californium’s default properties will be used.
HONO_COAP_INSECURE_PORT--hono.coap.insecurePort
no
-
The insecure port the protocol adapter should listen on.See Port Configuration below for details.
HONO_COAP_INSECURE_PORT_BIND_ADDRESS--hono.coap.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure port should be bound to.See Port Configuration below for details.
HONO_COAP_INSECURE_PORT_ENABLED--hono.coap.insecurePortEnabled
no
no
false
If set to true the protocol adapter will open an insecure port (not secured by TLS) using either the port number set via HONO_AMQP_INSECURE_PORT or the default AMQP port number (1883) if not set explicitly.See Port Configuration below for details.
HONO_AMQP_KEY_PATH--hono.amqp.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_AMQP_CERT_PATH. Alternatively, the HONO_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_AMQP_KEY_STORE_PASSWORD--hono.amqp.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_AMQP_KEY_STORE_PATH--hono.amqp.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the protocol adapter should use for authenticating to clients. Either this option or the HONO_AMQP_KEY_PATH and HONO_AMQP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_AMQP_SNI--hono.amqp.sni
no
false
Set whether the server supports Server Name Indication. By default, the server will not support SNI and the option is false. However, if set to true then the key store format, HONO_AMQP_KEY_STORE_PATH, should be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_AMQP_MAX_CONNECTIONS--hono.amqp.maxConnections
no
0
The maximum number of concurrent connections that the protocol adapter should accept. If not set (or set to 0), the protocol adapter determines a reasonable value based on the available resources like memory and CPU.
HONO_AMQP_MAX_FRAME_SIZE--hono.amqp.maxFrameSize
no
true
If set to true the protocol adapter uses default values registered for a device to augment messages published by the device with missing information like a content type. In particular, the protocol adapter adds default values registered for the device as (application) properties with the same name to the AMQP 1.0 messages it sends downstream to the AMQP Messaging Network.
HONO_MQTT_INSECURE_PORT_BIND_ADDRESS--hono.mqtt.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure port should be bound to.See Port Configuration below for details.
HONO_MQTT_INSECURE_PORT_ENABLED--hono.mqtt.insecurePortEnabled
no
false
If set to true the protocol adapter will open an insecure port (not secured by TLS) using either the port number set via HONO_MQTT_INSECURE_PORT or the default MQTT port number (1883) if not set explicitly.See Port Configuration below for details.
HONO_MQTT_KEY_PATH--hono.mqtt.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_MQTT_CERT_PATH. Alternatively, the HONO_MQTT_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_MQTT_KEY_STORE_PASSWORD--hono.mqtt.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_MQTT_KEY_STORE_PATH--hono.mqtt.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the protocol adapter should use for authenticating to clients. Either this option or the HONO_MQTT_KEY_PATH and HONO_MQTT_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_MQTT_SNI--hono.mqtt.sni
false
If set to true the protocol adapter will open an insecure port (not secured by TLS) using either the port number set via HONO_HTTP_INSECURE_PORT or the default port number (8080) if not set explicitly.See Port Configuration below for details.
HONO_HTTP_KEY_PATH--hono.http.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_HTTP_CERT_PATH. Alternatively, the HONO_HTTP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_HTTP_KEY_STORE_PASSWORD--hono.http.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_HTTP_KEY_STORE_PATH--hono.http.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the protocol adapter should use for authenticating to clients. Either this option or the HONO_HTTP_KEY_PATH and HONO_HTTP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_HTTP_SNI--hono.http.sni
no
false
Set whether the server supports Server Name Indication. By default, the server will not support SNI and the option is false. However, if set to true then the key store format , HONO_HTTP_KEY_STORE_PATH, should be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_HTTP_NATIVE_TLS_REQUIRED--hono.http.nativeTlsRequired
no
false
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
307
Fork
103
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Dismiss
no
-
The password required to read the contents of the key store.
HONO_DEVICECONNECTION_AMQP_KEY_STORE_PATH--hono.deviceConnection.amqp.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_DEVICECONNECTION_AMQP_KEY_PATH and HONO_DEVICECONNECTION_AMQP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_DEVICECONNECTION_AMQP_NATIVE_TLS_REQUIRED--hono.deviceConnection.amqp.nativeTlsRequired
no
false
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_DEVICECONNECTION_AMQP_PORT--hono.deviceConnection.amqp.port
no
5671
The secure port that the server should listen on for AMQP 1.0 connections.See Port Configuration below for details.
HONO_DEVICECONNECTION_AMQP_RECEIVER_LINK_CREDIT--hono.deviceConnection.amqp.receiverLinkCredit
no
100
The number of credits to flow to a client connecting to the service’s AMQP endpoint.
HONO_DEVICECONNECTION_AMQP_SECURE_PROTOCOLS--hono.deviceConnection.amqp.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
The variables only need to be set if the default value does not match your environment.
HONO_CREDENTIALS_SVC_SAVE_TO_FILE--hono.credentials.svc.saveToFile
no
false
When set to true the server will periodically write out the registered credentials to the file specified by the HONO_CREDENTIALS_SVC_FILENAME property.
HONO_CREDENTIALS_SVC_STARTEMPTY--hono.credentials.svc.startEmpty
no
false
When set to true the server will not try to load credentials from the file specified by the HONO_CREDENTIALS_SVC_FILENAME property during startup.
HONO_DEVICE_CONNECTION_SVC_MAX_DEVICES_PER_TENANT--hono.deviceConnection.svc.maxDevicesPerTenant
no
100
The number of devices per tenant for which connection related data is stored. It is an error to set this property to a value <= 0.
HONO_REGISTRY_AMQP_BIND_ADDRESS--hono.registry.amqp.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure AMQP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_AMQP_CERT_PATH--hono.registry.amqp.certPath
no
-
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_AMQP_KEY_PATH.Alternatively, the HONO_REGISTRY_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_AMQP_INSECURE_PORT--hono.registry.amqp.insecurePort
no
-
The insecure port the server should listen on for AMQP 1.0 connections.See Port Configuration below for details.
3
Files changed
2
Conversation
Copy link
Quote reply
Contributor
lhotari
commented
Nov 23, 2020
tenantAdapterStore should use tenantsProperties().getAdapter() instead of tenantsProperties().getManagement()
I noticed this small bug while working on #2317 .
tenantAdapterStore should use tenantsProperties().getAdapter()
…
Loading status checks…
2634030
Signed-off-by: Lari Hotari <lari@hotari.net>
lhotari
requested a review
from dejanb
as a
code owner
Nov 23, 2020
kaniyan
When starting up any of Hono’s Docker images as a container, the JVM will look for additional jar files to include in its class path in the container’s /opt/hono/extensions folder. Thus, using a specific implementation of OpenTracing is just a matter of configuring the container to mount a volume or binding a host folder at that location and putting the implementation’s jar files and resources into the corresponding volume or host folder.
Note
This also means that (currently) only Tracer implementations can be used with Hono that also implement the Tracer Resolver mechanism.
Assuming that the HTTP adapter should be configured to use Jaeger tracing, the following steps are necessary:
Download Jaeger’s Java Tracer Resolver implementation and its dependencies (see the hint at the end).
Put the jars to a folder on the Docker host, e.g. /tmp/jaeger.
Start the HTTP adapter Docker image mounting the host folder:
docker run --name hono-adapter-http-vertx \
--mount type=bind,src=/tmp/jaeger,dst=/opt/hono/extensions,ro \
... \
eclipse/hono-adapter-http-vertx
Note: the command given above does not contain the environment variables and secrets that are required to configure the service properly. The environment variables for configuring the Jaeger client are also missing. Please refer to the Jaeger documentation for details.
When the HTTP adapter starts up, it will look for a working implementation of the Tracer Resolver on its classpath and (if found) initialize and use it for publishing traces. The adapter’s log file will indicate the name of the Tracer implementation being used.
Using a Docker volume instead of a bind mount works the same way but requires the use of volume as the type of the --mount parameter. Please refer to the Docker reference documentation for details.
Hint: to resolve all dependencies for jaeger-tracerresolver in order to provide them to /opt/hono/extensions, you may want to rely on Maven’s dependency plugin. To obtain all jar files you can invoke the following command in a simple Maven project that contains only the dependency to jaeger-tracerresolver:
mvn dependency:copy-dependencies
All jar files can then be found in the directory target/dependency.
Configuring usage of Jaeger tracing (included in Docker images)
In case Jaeger tracing shall be used, there is an alternative to putting the jar files in the container’s /opt/hono/extensions folder as described above.
This is to have the Jaeger tracing jar files be included in the Hono Docker images by using the jaeger Maven profile when building Hono.
For example, building the HTTP adapter image with the Jaeger client included:
Implementors of this API may return a 404 status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred.
Remove command-handling protocol adapter instance for device
Clients use this command to remove the information, which protocol adapter instance is currently handling command & control messages for the given device. The mapping information is only removed, if the currently associated adapter instance matches the one given in the request.
This API doesn’t mandate checks on the validity of the given device in order not to introduce a dependency on the Device Registration API. However, implementations of this API may choose to perform such checks or impose a restriction on the overall amount of data that can be stored per tenant in order to protect against malicious requests.
Message Flow
Client removes the command-handling protocol adapter instance information for device
Request Message Format
The following table provides an overview of the properties a client needs to set on a message to remove the mapping information regarding the command-handling protocol adapter instance for a device in addition to the Standard Request Properties.
Name
Mandatory
Location
AMQP Type
Description
subject
yes
properties
string
MUST be set to remove-cmd-handling-adapter-instance.
adapter_instance_id
yes
application-properties
string
The identifier of the protocol adapter instance to remove the mapping information for. Only if this adapter instance is currently associated with the device or gateway identified by the device_id property, the mapping entry will be removed.
The body of the message SHOULD be empty and will be ignored if it is not.
File
Description
http-adapter-key.pem
The example private key for creating signatures.
http-adapter-cert.pem
The example certificate asserting the adapter’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
MQTT Adapter
The MQTT adapter supports the use of TLS for its connections to the Tenant service, the Device Registration service, the Credentials service and the AMQP Messaging Network. The adapter also supports the use of TLS for connections with devices. For this purpose, the adapter can be configured with a server certificate and private key.
Please refer to the MQTT adapter admin guide for details regarding the required configuration steps.
The demo-certs/certs folder contains the following demo keys and certificates to be used with the MQTT adapter for that purpose.
File
Description
mqtt-adapter-key.pem
The example private key for creating signatures.
mqtt-adapter-cert.pem
The example certificate asserting the adapter’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
Kura Adapter
The Kura adapter supports the use of TLS for its connections to the Tenant service, the Device Registration service, the Credentials service and the AMQP Messaging Network. The adapter also supports the use of TLS for connections with devices. For this purpose, the adapter can be configured with a server certificate and private key.
Please refer to the Kura adapter admin guide for details regarding the required configuration steps.
This fixes issues with the Command Router component sending invalid AMQP frames or throwing exceptions when handling the requests.
I'm also working on a more general fix concerning verticle handling/communication in the Command Router component, which shall use multiple ProtonBasedCommandConsumerFactoryImpl instances and thereby use multiple downstream AMQP connections.
[#2029] Fix issues caused by different vertx contexts being used.
…
Loading status checks…
9343c3b
When processing Command Router API requests, the original vert.x
context of the CommandRouterAmqpServer needs to be restored at
the end, because the commandConsumerFactory has switched to the
context in which the downstream AMQP connection is used.
Signed-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>
calohmn
added
bug
C&C
fkaltner
force-pushed the
bosch-io:#2288_device_level_qos_master
branch
3 times, most recently
from
a4e1fa5
to
50f04d0
Nov 23, 2020
[#2288] Fixing device level QoS forwarding of events for HTTP adapter
…
Loading status checks…
11e3ff7
The HTTP adapter suffered from a bug when a client sent an event and set a device level QoS to something different than 1 or set no device level QoS at all. In any case the event was sent with QoS 1 but the message property indicating the device level QoS to the northbound application (which should always be 1 as this is the only supported QoS for events) was wrong.
Signed-off-by: Florian Kaltner <florian.kaltner@bosch.io>
fkaltner
force-pushed the
bosch-io:#2288_device_level_qos_master
branch
from
50f04d0
to
@/all I would like to create the 1.4.3 service release today. Unless anybody has any objections, I will start the build Nov 5th 2020, 2PM CET.
Karthees Kalidass
@kaniyan
@sophokles73 :+1:
marcel-bluestone
@marcel-bluestone
@sophokles73 : yes, I am using the helm chart
Kai Hudalla
@sophokles73
Then you can set all the configuration properties that the Helm chart supports. You should take a look at the chart's values.yaml file. It contains all the properties along with comments describing their purpose.
The chart's documentation also contains examples for setting configuration properties on the helm command line as well as using a yaml file.
Kai Hudalla
@sophokles73
The Hono 1.4.3 and 1.3.1 service releases are available from Maven Central and Docker Hub. The Hono Helm chart has also been updated to use the latest Hono 1.4.3 release. We encourage all users to upgrade ASAP.
Bob Claerhout
@BobClaerhout
Hi all,We are experiencing following exception in the mqtt adapter:14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.client.impl.HonoConnectionImpl - opening receiver [device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0] failed: amqp:not-found - no endpoint registered for address device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0
14:43:48.283 [vert.x-eventloop-thread-1] DEBUG o.e.h.c.i.DeviceConnectionClientImpl - failed to create device connection client for [aloxy]
14:43:48.282 [vert.x-eventloop-thread-0] INFO o.e.h.d.s.DeviceRegistryAmqpServer - client [container: Hono adapter-mqtt-vertx-Device Connection-203b50e3-087b-4362-bbea-47bc4e7da954] wants to establish link for unknown endpoint [address: device_con/aloxy/e36bd211-3448-4b2d-83de-02757431f7e0]Our yaml file contains following config concerning the deviceConnection:deviceConnectionService:
enabled: falseAccording to the documentation in the example values.yaml-file (https://github.com/eclipse/packages/blob/master/charts/hono/values.yaml#L1043), the example deviceRegistry should expose this endpoint, however, when I have a look at the deviceRegistry at boot, I only see 3 endpoints registered:08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [registration]
object
Any resource limits that should be enforced for the tenant, e.g. the maximum number of concurrent connections and the maximum data volume for a given period. Refer to Resource Limits Configuration Format for details.
tenant-id
yes
string
The ID of the tenant.
tracing
no
object
A set of options regarding the tracing of messages for the tenant. See Tracing Format for a definition of the content model of the object.
trusted-ca
no
array
The list of trusted certificate authorities to use for validating certificates presented by devices of the tenant for authentication purposes. See Trusted Certificate Authority Format for a definition of the content model of the objects contained in the array. NB If the element is provided then the list MUST NOT be empty.
The JSON object MAY contain an arbitrary number of additional members with arbitrary names which can be of a scalar or a complex type.
This allows for future well-known additions and also allows to add further information which might be relevant to a custom adapter only.
Examples
The JSON structure below contains example information for tenant TEST_TENANT. Note that the structure contains some custom properties at both the root level (customer) as well as the adapter configuration level (deployment) and also defines a default TTL for downstream messages.
{
"tenant-id": "TEST_TENANT",
"defaults": {
correlation-id
yes
properties
string
MUST contain the correlation ID used to match the command message with the response message containing the result of execution on the device.
device_id
yes
application-properties
string
The identifier of the device that sent the response.
status
yes
application-properties
integer
MUST indicate the status of the execution. See table below for possible values.
tenant_id
yes
application-properties
string
The identifier of the tenant that the device belongs to.
The status property must contain an HTTP 1.1 response status code:
Code
Description
2xx
The command has been processed successfully.
Dev & API
Blog
Terms
Privacy
Copyright
Support
×
Share Clipboard
×
Facebook
Twitter
LinkedIn
Link
Public clipboards featuring this slide
×
No public clipboards found for this slide
Select another clipboard
×
Looks like you’ve clipped this slide to already.
Create a clipboard
You just clipped your first slide!
Clipping is a handy way to collect important slides you want to go back to later. Now customize the name of a clipboard to store your clips.
Brokering Events
Producer Broker Consumer
Send message
Accepted
Send message
Accepted
22.
● EnMasse …
○ a messaging-as-a-service platform
○ elastic scaling
○ multiple communication patterns
○ … and more and more …
○ more info : enmasse.io
AMQP 1.0
22
Scaling out the messaging network
Connect. Command. Control
Protocol Adapters
Business
Applications
Devices
AMQP 1.0
AMQP 1.0
HTTP, MQTT, AMQP 1.0
end to end flow control
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
http:
# enabled indicates if Hono's HTTP adapter should be deployed.
enabled: true
# imageName contains the name (excluding registry)
# of the container image to use for the HTTP adapter
imageName: eclipse/hono-adapter-http-vertx
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
Signal Processing
Emacs
Raspberry Pi
Stack Overflow на русском
Code Golf
Stack Overflow en español
Ethereum
Data Science
Arduino
Bitcoin
Software Quality Assurance & Testing
Sound Design
Windows Phone
more (28)
Photography
Science Fiction & Fantasy
Graphic Design
Movies & TV
Music: Practice & Theory
Worldbuilding
Video Production
Seasoned Advice (cooking)
Home Improvement
Personal Finance & Money
NB Care needs to be taken that the value for the authentication identifier is compliant with the authentication mechanism(s) it is supposed to be used with. For example, when using standard HTTP Basic authentication, the username part of the Basic Authorization header value (which corresponds to the auth-id) MUST not contain any colon (:) characters, because the colon character is used as the separator between username and password. Similar constraints may exist for other authentication mechanisms, so the authentication identifier needs to be chosen with the anticipated mechanism(s) being used in mind. Otherwise, devices may fail to authenticate with protocol adapters, even if the credentials provided by the device match the credentials registered for the device. In general, using only characters from the [a-zA-Z0-9_-] range for the authentication identifier should be compatible with most mechanisms.
Secrets Format
Each set of credentials may contain arbitrary secrets scoped to a particular validity period during which the secrets may be used for authenticating a device. The validity periods MAY overlap in order to support the process of changing a secret on a device that itself doesn’t support the definition of multiple secrets for gapless authentication across adjacent validity periods.
The table below contains the properties used to define the validity period of a single secret:
Name
Mandatory
JSON Type
Default Value
Description
not-before
no
string
null
The point in time from which on the secret may be used to authenticate devices. If not null, the value MUST be an ISO 8601 compliant combined date and time representation in extended format. NB It is up to the discretion of the protocol adapter to make use of this information.
not-after
no
string
null
The point in time until which the secret may be used to authenticate devices. If not null, the value MUST be an ISO 8601 compliant combined date and time representation in extended format. NB It is up to the discretion of the protocol adapter to make use of this information.
Examples
{
"device-id": "4711",
"type": "hashed-password",
You just clipped your first slide!
Clipping is a handy way to collect important slides you want to go back to later. Now customize the name of a clipboard to store your clips.
Name*
Description
Visibility
Others can see my Clipboard
Cancel
Save
no
true
When set to false the credentials contained in the registry cannot be updated nor removed.
HONO_CREDENTIALS_SVC_RECEIVER_LINK_CREDIT--hono.credentials.svc.receiverLinkCredit
no
100
The number of credits to flow to a client connecting to the Credentials endpoint.
HONO_MONGODB_CONNECTION_STRING--hono.mongodb.connectionString
no
-
The connection string used by the Device Registry application to connect to the MongoDB database. If HONO_MONGODB_CONNECTION_STRING is set, it overrides the other MongoDB connection settings. See Connection String URI Format for more information.
HONO_MONGODB_CONNECTION_TIMEOUT_IN_MS--hono.mongodb.connectionTimeoutInMs
no
10000
The time in milliseconds to attempt a connection before timing out.
HONO_MONGODB_DB_NAME--hono.mongodb.dbName
no
-
The name of the MongoDB database that should be used by the Device Registry application.
HONO_MONGODB_HOST--hono.mongodb.host
no
localhost
The host name or IP address of the MongoDB instance.
HONO_MONGODB_PORT--hono.mongodb.port
40
Star
307
Fork
103
Code
Issues
97
Pull requests
17
Actions
Projects
3
Wiki
Security
Insights
More
Code
Issues
Pull requests
Actions
Projects
Wiki
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > AMQP Adapter
Device Authentication
SASL PLAIN Authentication
SASL EXTERNAL Authentication
Resource Limit Checks
Connection Limits
Connection Duration Limits
Message Limits
Connection Events
Link Establishment
Error Handling
AMQP Command-line Client
Publishing Telemetry Data
Publish Telemetry Data (authenticated Device)
Publish Telemetry Data (unauthenticated Device)
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > MQTT Adapter
Authentication
Client Certificate
Username/Password
Resource Limit Checks
Connection Limits
Connection Duration Limits
Message Limits
Connection Events
Publishing Telemetry Data
Publish Telemetry Data (authenticated Device)
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > HTTP Adapter
Device Authentication
Client Certificate
HTTP Basic Auth
Message Limits
Publish Telemetry Data (authenticated Device)
Publish Telemetry Data (unauthenticated Device)
Publish Telemetry Data (authenticated Gateway)
Publish an Event (authenticated Device)
Publish an Event (unauthenticated Device)
Publish an Event (authenticated Gateway)
Command & Control
1.3
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > File Based Device Registry
Managing Tenants
Managing Devices
Managing Credentials
File Based Device Registry
The Device Registry component provides exemplary implementations of Hono’s Tenant API, Device Registration API and Credentials API.
As such it exposes AMQP 1.0 based endpoints for retrieving the relevant information and persists data in the local filesystem.
In addition, the Device Registry also exposes HTTP resources for managing the contents of the registry according to the Device Registry HTTP API.
Warning
The Device Registry is not intended to be used in production environments. In particular, access to the HTTP resources described below is not restricted to authorized clients only.
The resources have been designed to provide convenient access to the registry’s content using command line tools like curl or HTTPie.
Managing Tenants
Please refer to the Device Registry Management API for information about managing tenants.
Managing Devices
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide > MongoDB Based Device Registry
Authentication
Managing Tenants
Managing Devices
Managing Credentials
MongoDB Based Device Registry
The MongoDB based Device Registry component provides implementations of Hono’s Tenant API, Device Registration API and Credentials API. As such it exposes AMQP 1.0 based endpoints for retrieving the relevant information. Protocol adapters use these APIs to determine a device’s registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it.
In addition to the above APIs, this Device Registry also exposes HTTP endpoints for managing the contents of the Device Registry according to the Device Registry Management API. It uses a MongoDB database to persist the data. The credentials, device and tenant information are stored in separate collections in a MongoDB database. For more information on how to configure the MongoDB based device registry, see MongoDB based Device Registry configuration.
Authentication
This Device Registry secures its HTTP Endpoints using basic authentication mechanism. Thereby the clients connecting to the MongoDB based Device Registry are required to authenticate. For more information on how to enable the authentication and configure it, please refer to the hono.registry.http.authenticationRequired property in the MongoDB based Device Registry configuration.
Managing Tenants
Please refer to the Device Registry Management API for information about managing tenants.
Managing Devices
Please refer to the Device Registry Management API for information about managing devices.
Managing Credentials
Please refer to the Device Registry Management API for information about managing credentials.
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > User Guide
User Guide
Learn how Eclipse Hono™ enables you to quickly send data from devices to business applications and vice versa.
Getting Started
Version:
stable (1.4)
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Connection Events
1.4
1.3
1.2
1.1
1.0
dev
© 2020 The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn theme.
Edit this page
Documentation > Concepts > Resource limits
Connections Limit
Connection Duration Limit
HONO_AUTH_AMQP_INSECURE_PORT_ENABLED--hono.auth.amqp.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_AUTH_AMQP_INSECURE_PORT or the default AMQP port number (5672) if not set explicitly.See Port Configuration below for details.
HONO_AUTH_AMQP_KEY_PATH--hono.auth.amqp.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. Note that the private key is not protected by a password. You should therefore make sure that the key file can only be read by the user that the server process is running under. This option must be used in conjunction with HONO_AUTH_CERT_PATH.Alternatively, the HONO_AUTH_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_AUTH_AMQP_KEY_STORE_PASSWORD--hono.auth.amqp.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_AUTH_AMQP_KEY_STORE_PATH--hono.auth.amqp.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_AUTH_AMQP_KEY_PATH and HONO_AUTH_AMQP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_AUTH_AMQP_NATIVE_TLS_REQUIRED--hono.auth.amqp.nativeTlsRequired
no
5000
The amount of time (in milliseconds) after which a DNS query is considered to be failed. Setting this variable to a smaller value may help to reduce the time required to establish connections to the services this adapter depends on. However, setting it to a value that is too small for any DNS query to succeed will effectively prevent any connections to be established at all.
HONO_VERTX_MAX_EVENT_LOOP_EXECUTE_TIME_MILLIS--hono.vertx.maxEventLoopExecuteTimeMillis
no
2000
The maximum number of milliseconds that a task on the event loop may run without being considered to block the event loop.
HONO_VERTX_PREFER_NATIVE--hono.vertx.preferNative
no
false
Tries to enable epoll() support on Linux (if available). See the notes below for an explanation of the benefits of enabling epoll.
Using epoll() on Linux
Using epoll() on Linux may provide better performance for applications which
have a high I/O throughput. Especially when the application supports an
asynchronous I/O model. This is true for most Hono components and applications using Hono.
The Netty framework supports using epoll() on Linux x86_64 based systems.
Hono provides the a Maven build profile for enabling
support for epoll during the build process.
In order to use epoll
Hono needs to be built with the netty-native-linux-x86_64 Maven profile enabled and
the HONO_VERTX_PREFER_NATIVE environment variable needs to be set to true on startup.
Protocol Adapter Options
AMQP 1.0 Messaging Network Connection Configuration
Protocol adapters require a connection to the AMQP 1.0 Messaging Network in order to forward telemetry data and events received from devices to downstream consumers.
The connection to the messaging network is configured according to Hono Client Configuration
no
7000
The maximum number of milliseconds to wait before trying to re-establish an AMQP connection with the peer.
no
0
The minimum number of milliseconds to wait before trying to re-establish an AMQP connection with the peer.
no
200
The maximum number of milliseconds to wait for a response before a service invocation is failed. Setting this value to a higher value increases the chance of successful service invocation in situations where network latency is high.
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
no
false
no
-
The absolute path to the Java key store containing the CA certificates the adapter uses for authenticating the service. This property must be set if the service has been configured to support TLS. The key store format can be either JKS, PKCS12 or PEM indicated by a .jks, .p12 or .pem file suffix respectively.
no
-
The password required to read the contents of the trust store.
no
-
The username to use for authenticating to the service. This property (and the corresponding password) needs to be set in order to enable SASL Plain based authentication to the service.
{
"device-id": "sigfox-backend"
}
Create new credentials for the gateway device. For example, using
a username of sigfox and a password of test12:
{
"auth-id": "sigfox",
"device-id": "sigfox-backend",
"enabled": true,
"secrets": [
{
"pwd-plain": "test12",
}
],
"type": "hashed-password"
}
Create a new device, referencing the previous gateway device. The
device id must be your Sigfox device ID (e.g. 1AB2C3):
{
"device-id": "1AB2C3",
"via": "sigfox-backend"
}
Setting up callbacks
Log in to the Sigfox backend at https://backend.sigfox.com and then open up
the view Device Type -> Callbacks.
In a second step, the adapter uses the Credentials API’s get operation to retrieve the credentials on record, including the client
certificate’s subject DN as the auth-id, x509-cert as the type of secret and the MQTT client identifier as client-id in the
request payload.
NB The adapter needs to be configured for TLS in order to support this mechanism.
Username/Password
When a device wants to authenticate using this mechanism, it needs to provide a username and a password in the MQTT CONNECT packet
it sends in order to initiate the connection. The username must have the form auth-id@tenant, e.g. sensor1@DEFAULT_TENANT.
The adapter verifies the credentials provided by the client against the credentials that the
configured Credentials service has on record for the client.
The adapter uses the Credentials API’s get operation to retrieve the credentials on record, including the tenant and auth-id provided
by the client in the username, hashed-password as the type of secret and the MQTT client identifier as client-id in the request payload.
Please refer to the Eclipse Kura documentation on how to configure the
gateway’s cloud service connection accordingly. It is important to set the gateway’s topic.context.account-name to the ID of the
Hono tenant that the gateway has been registered with whereas the gateway’s client-id needs to be set to the corresponding Hono
device ID. The auth-id used as part of the gateway’s username property needs to match the authentication identifier of a set of
credentials registered for the device ID in Hono’s Credentials service. In other words, the credentials configured on the gateway
need to belong to the corresponding device ID.
NB There is a subtle difference between the device identifier (device-id) and the auth-id a device uses for authentication.
See Device Identity for a discussion of the concepts.
Resource Limit Checks
The adapter performs additional checks regarding resource limits when a client tries to connect and/or send a message to the adapter.
Connection Limits
The adapter rejects a client’s connection attempt with return code 0x05, indicating Connection Refused: not authorized, if
The CoAP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment.
The adapter (currently) only supports PSK as part of a DTLS handshake for that purpose.
Additional variants mentioned in Securing CoAP might be added in the future.
The adapter tries to authenticate the device using these mechanisms in the following order
PSK
The identity provided in the ClientKeyExchange must have the form auth-id@tenant, e.g. sensor1@DEFAULT_TENANT.
The adapter performs the handshake using the credentials the configured Credentials service
has on record for the client. The adapter uses the Credentials API’s get operation to retrieve the credentials on record
with the tenant and auth-id provided by the device in the identity and psk as the type of secret as query parameters.
The examples below refer to devices 4711 and gw-1 of tenant DEFAULT_TENANT using auth-ids sensor1 and gw1 and
corresponding secrets. The example deployment as described in the Deployment Guides comes pre-configured
with the corresponding entities in its device registry component.
Please refer to the Credentials API for details regarding the different
types of secrets.
NB There is a subtle difference between the device identifier (device-id) and the auth-id a device uses for authentication. See Device Identity for a discussion of the concepts.
Message Limits
The adapter rejects
a client’s request to upload data with status code 429 Too Many Requests and
any AMQP 1.0 message containing a command sent by a north bound application
if the message limit that has been configured for the device’s tenant is exceeded.
CoAP Content Format Codes
CoAP doesn’t use a textual identifier for content types. Instead numbers are used, which are maintained by the IANA.
The IANA - CoAP Content Formats page lists all
(currently) registered codes and the corresponding media types.
Publish Telemetry Data (authenticated Device)
HONO_KURA_KEY_STORE_PASSWORD--hono.kura.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_KURA_KEY_STORE_PATH--hono.kura.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the protocol adapter should use for authenticating to clients. Either this option or the HONO_KURA_KEY_PATH and HONO_KURA_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_KURA_SNI--hono.kura.sni
no
false
Set whether the server supports Server Name Indication. By default, the server will not support SNI and the option is false. However, if set to true then the key store format , HONO_KURA_KEY_STORE_PATH, should be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_MQTT_MAX_CONNECTIONS--hono.mqtt.maxConnections
no
0
The maximum number of concurrent connections that the protocol adapter should accept. If not set (or set to 0), the protocol adapter determines a reasonable value based on the available resources like memory and CPU.
HONO_KURA_MAX_PAYLOAD_SIZE--hono.kura.maxPayloadSize
no
2048
The maximum allowed size of an incoming MQTT message’s payload in bytes. When a client sends a message with a larger payload, the message is discarded and the connection to the client gets closed.
HONO_KURA_NATIVE_TLS_REQUIRED--hono.kura.nativeTlsRequired
no
false
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_KURA_PORT--hono.kura.port
no
false
If set to true the protocol adapter will open an insecure port (not secured by TLS) using either the port number set via HONO_COAP_INSECURE_PORT or the default port number (5683) if not set explicitly.See Port Configuration below for details.
HONO_COAP_KEY_PATH--hono.coap.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the protocol adapter should use for authenticating to clients. This option must be used in conjunction with HONO_COAP_CERT_PATH. Alternatively, the HONO_COAP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_COAP_KEY_STORE_PASSWORD--hono.coap.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_COAP_KEY_STORE_PATH--hono.coap.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the protocol adapter should use for authenticating to clients. Either this option or the HONO_COAP_KEY_PATH and HONO_COAP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_COAP_MAX_CONNECTIONS--hono.coap.maxConnections
no
0
The maximum number of concurrent DTLS connections that the protocol adapter should accept. If set to 0, the protocol adapter determines a reasonable value based on the available resources like memory and CPU.
HONO_COAP_MAX_PAYLOAD_SIZE--hono.coap.maxPayloadSize
no
2048
The maximum allowed size of an incoming CoAP request’s body in bytes. Requests with a larger body size are rejected with a 4.13 Request entity too large response.
16384
The maximum number of bytes that can be sent in an AMQP message delivery over the connection with a device. When a client sends an AMQP frame of larger size, the connection is closed.
HONO_AMQP_MAX_PAYLOAD_SIZE--hono.amqp.maxPayloadSize
no
2048
The maximum allowed size of an incoming AMQP message in bytes. When a client sends a message with a larger payload, the message is discarded and the link to the client is closed.
HONO_AMQP_MAX_SESSION_FRAMES--hono.amqp.maxSessionFrames
no
30
The maximum number of AMQP transfer frames for sessions created on this connection. This is the number of transfer frames that may simultaneously be in flight for all links in the session.
HONO_AMQP_NATIVE_TLS_REQUIRED--hono.amqp.nativeTlsRequired
no
false
The server will probe for OpenSSL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_AMQP_PORT--hono.amqp.port
no
5671
The secure port that the protocol adapter should listen on.See Port Configuration below for details.
HONO_AMQP_SECURE_PROTOCOLS--hono.amqp.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_AMQP_TENANT_IDLE_TIMEOUT--hono.amqp.tenantIdleTimeout
no
false
Set whether the server supports Server Name Indication. By default, the server will not support SNI and the option is false. However, if set to true then the key store format , HONO_MQTT_KEY_STORE_PATH, should be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_MQTT_MAX_CONNECTIONS--hono.mqtt.maxConnections
no
0
The maximum number of concurrent connections that the protocol adapter should accept. If not set (or set to 0), the protocol adapter determines a reasonable value based on the available resources like memory and CPU.
HONO_MQTT_MAX_PAYLOAD_SIZE--hono.mqtt.maxPayloadSize
no
2048
The maximum allowed size of an incoming MQTT message’s payload in bytes. When a client sends a message with a larger payload, the message is discarded and the connection to the client gets closed.
HONO_MQTT_NATIVE_TLS_REQUIRED--hono.mqtt.nativeTlsRequired
no
false
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_MQTT_PORT--hono.mqtt.port
no
8883
The secure port that the protocol adapter should listen on.See Port Configuration below for details.
HONO_MQTT_SECURE_PROTOCOLS--hono.mqtt.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_MQTT_TENANT_IDLE_TIMEOUT--hono.mqtt.tenantIdleTimeout
HONO_HTTP_MAX_PAYLOAD_SIZE--hono.http.maxPayloadSize
no
2048
The maximum allowed size of an incoming HTTP request’s body in bytes. Requests with a larger body size are rejected with a 413 Request entity too large response.
HONO_HTTP_PORT--hono.http.port
no
8443
The secure port that the protocol adapter should listen on.See Port Configuration below for details.
HONO_HTTP_REALM--hono.http.realm
no
Hono
The name of the realm that unauthenticated devices are prompted to provide credentials for. The realm is used in the WWW-Authenticate header returned to devices in response to unauthenticated requests.
HONO_HTTP_SECURE_PROTOCOLS--hono.http.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_HTTP_TENANT_IDLE_TIMEOUT--hono.http.tenantIdleTimeout
no
0ms
The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. 2h for 2 hours. See the Spring Boot documentation for an explanation of the format. The value 0ms disables the timeout.
The variables only need to be set if the default value does not match your environment.
Port Configuration
The HTTP protocol adapter can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
Support using Device Connection cache client with Quarkus adapters
#2318
Merged
sophokles73
Port Configuration
The Device Connection component supports configuration of both, an AMQP based endpoint as well as an HTTP based endpoint proving RESTful resources for managing registration information and credentials. Both endpoints can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
The server will fail to start if none of the ports is configured properly.
Secure Port Only
The server needs to be configured with a private key and certificate in order to open a TLS secured port.
There are two alternative ways for doing so:
Setting the HONO_DEVICECONNECTION_AMQP_KEY_STORE_PATH and the HONO_DEVICECONNECTION_AMQP_KEY_STORE_PASSWORD variables in order to load the key & certificate from a password protected key store, or
setting the HONO_DEVICECONNECTION_AMQP_KEY_PATH and HONO_DEVICECONNECTION_AMQP_CERT_PATH variables in order to load the key and certificate from two separate PEM files in PKCS8 format.
When starting up, the server will bind a TLS secured socket to the default secure AMQP port 5671. The port number can also be set explicitly using the HONO_DEVICECONNECTION_AMQP_PORT variable.
The HONO_DEVICECONNECTION_AMQP_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_DEVICECONNECTION_AMQP_INSECURE_PORT to a valid port number, or by
implicitly configuring the default AMQP port (5672) by simply setting HONO_DEVICECONNECTION_AMQP_INSECURE_PORT_ENABLED to true.
The server issues a warning on the console if HONO_DEVICECONNECTION_AMQP_INSECURE_PORT is set to the default secure AMQP port (5671).
The HONO_DEVICECONNECTION_AMQP_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Dual Port
HONO_REGISTRY_AMQP_INSECURE_PORT_BIND_ADDRESS--hono.registry.amqp.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure AMQP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_AMQP_INSECURE_PORT_ENABLED--hono.registry.amqp.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_REGISTRY_AMQP_INSECURE_PORT or the default AMQP port number (5672) if not set explicitly.See Port Configuration below for details.
HONO_REGISTRY_AMQP_KEY_PATH--hono.registry.amqp.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_AMQP_CERT_PATH. Alternatively, the HONO_REGISTRY_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_AMQP_KEY_STORE_PASSWORD--hono.registry.amqp.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_REGISTRY_AMQP_KEY_STORE_PATH--hono.registry.amqp.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_REGISTRY_AMQP_KEY_PATH and HONO_REGISTRY_AMQP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_REGISTRY_AMQP_NATIVE_TLS_REQUIRED--hono.registry.amqp.nativeTlsRequired
no
false
added
bug
JDBC Device Registry
labels
Nov 23, 2020
kaniyan
added this to In progress
in 1.5.0
via automation
Nov 23, 2020
kaniyan
added this to the 1.5.0 milestone
Nov 23, 2020
lhotari
mentioned this pull request
Nov 23, 2020
Add MS SQLServer support to JDBC device registry, also test and fix Postgres support in JDBC device registry
#2317
Open
Copy link
Contributor
kaniyan
commented
Nov 23, 2020
# in directory: hono/adapters/http-vertx/
mvn clean install -Pbuild-docker-image,jaeger
Note that when running the created docker image, the environment variables for configuring the Jaeger client still need to be set. Please refer to the Jaeger documentation for details.
Enforcing the recording of traces for a tenant
Typically, in production systems, the tracing components will be configured to not store all trace spans in the tracing backend, in order to reduce the performance impact. For debugging purposes it can however be beneficial to enforce the recording of certain traces. Hono allows this by providing a configuration option in the Tenant information with which all traces concerning the processing of telemetry, event and command messages for that specific tenant will be recorded. Furthermore, this enforced trace sampling can be restricted to only apply to messages sent in the context of a specific authentication identifier. Please refer to the description of the tracing object in the Tenant Information for details.
Response Message Format
A response to a remove command-handling adapter instance for device request contains the Standard Response Properties.
The response message’s status property may contain the following codes:
Code
Description
204
OK, the adapter instance mapping information for the device has been removed.
400
Bad Request, the request message does not contain all required properties.
412
Precondition failed, the adapter instance for the device has not been removed because there is no matching command-handling adapter instance assigned to the device.
Implementors of this API may return a 404 status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred.
Get command-handling protocol adapter instances for device
Clients use this command to get information about the adapter instances that can handle command & control messages for the given device.
As part of the request message, the client is supposed to provide the list of gateways that may act on behalf of the given device. The client may get this list via the Device Registration API’s assert Device Registration operation.
This API doesn’t mandate checks on the validity of the given device and the gateway list in order not to introduce a dependency on the Device Registration API.
The command implementation MUST determine the adapter instances by applying the following rules (in the given order):
If an adapter instance is associated with the given device, this adapter instance is returned as the single returned list entry.
Otherwise, if there is an adapter instance registered for the last known gateway associated with the given device, this adapter instance is returned as the single returned list entry. The last known gateway has to be contained in the given list of gateways for this case.
Otherwise, all adapter instances associated with any of the given gateway identifiers are returned.
That means that for a device communicating via a gateway, the result is reduced to a single element list if an adapter instance for the device itself or its last known gateway is found. The adapter instance registered for the device itself is given precedence in order to ensure that a gateway having subscribed to commands for that particular device is chosen over a gateway that has subscribed to commands for all devices of a tenant.
Message Flow
Client retrieving the list of command-handling adapter instances for a device
The demo-certs/certs folder contains the following demo keys and certificates to be used with the Kura adapter for that purpose.
File
Description
kura-adapter-key.pem
The example private key for creating signatures.
kura-adapter-cert.pem
The example certificate asserting the adapter’s identity.
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
Client Application
When the connection between an application client and Hono (i.e. the Dispatch Router) is supposed to be secured by TLS (which is a good idea),
then the client application needs to be configured to trust the CA that signed the Dispatch Router’s certificate chain.
Clients can use the org.eclipse.hono.client.HonoConnection.newConnection(ClientConfigProperties) method to establish a connection
to Hono. The org.eclipse.hono.config.ClientConfigProperties instance passed in to the method needs to be configured
with the trust store containing the CA’s certificate.
Please refer to the Hono Client configuration guide for details regarding the
corresponding configuration properties that need to be set.
The demo-certs/certs folder contains the following demo keys to be used with client applications for that purpose.
File
Description
trusted-certs.pem
Trusted CA certificates to use for verifying signatures.
Using OpenSSL
Hono’s individual services are implemented in Java and therefore, by default, use the SSL/TLS engine that comes with the Java Virtual Machine that the services are running on. In case of the Docker images provided by Hono this is the SSL engine of OpenJDK. While the standard SSL engine has the advantage of being a part of the JVM itself and thus being available on every operating system that the JVM is running on without further installation, it provides only limited performance and throughput when compared to native TLS implementations like OpenSSL.
labels
Nov 23, 2020
calohmn
added this to the 1.5.0 milestone
Nov 23, 2020
calohmn
requested a review
from dejanb
as a
code owner
Nov 23, 2020
calohmn
added this to In progress
in 1.5.0
via automation
Nov 23, 2020
calohmn
mentioned this pull request
Nov 23, 2020
[#2029] Use Command Router in adapters and integration tests
#2312
Open
Sign up for free
to join this conversation on GitHub.
11e3ff7
Nov 23, 2020
fkaltner
reviewed
Nov 23, 2020
View changes
tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java
getEndpointUri(),
Buffer.buffer("hello"),
requestHeaders,
ResponsePredicate.status(HttpURLConnection.HTTP_BAD_REQUEST))
This comment has been minimized.
Sign in to view
fkaltner
Nov 23, 2020
•
edited
Author
Contributor
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [credentials]
08:54:47.031 [main] DEBUG o.e.h.d.s.DeviceRegistryAmqpServer - registering endpoint [tenant]Am I missing some configuration? It looks like the device_con endpoint is not registered and thus not started. Any hints?Thanks
Bob Claerhout
@BobClaerhout
To be complete: we were running on hono 1.4.0 (helm 1.4.3) but I just upgraded to hono 1.4.3 (helm 1.4.8) and we are experiencing the same error
Kai Hudalla
@sophokles73
The Mongo based registry doesn't implement the Device Connection API. Only the example registry (the file based one does). If you are running the Mongo DB based registry you should run the Device Connection service as well. You can also configure it to use an embedded cache, i.e. no separate data grid required. That is what we are doing in Hono's integration tests as well so you should be able to take the config there as a blue print ....
Bob Claerhout
@BobClaerhout
ok, thanks for the fast response. Let me try that. If that's indeed the case, I think the documentation in the values.yaml file should be updated since the mongoDb deviceregistry is also an "example" device registry
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
Lari Hotari
@lhotari
"ttl": 30
},
"enabled": true,
"customer": "ACME Inc.",
"resource-limits": {
"max-connections": 100000,
"data-volume": {
"max-bytes": 2147483648,
"period": {
"mode": "days",
"no-of-days": 30
},
"effective-since": "2019-07-27T14:30:00Z"
}
},
"adapters": [
{
"type": "hono-mqtt",
"enabled": true,
"device-authentication-required": true
}, {
"type": "hono-http",
"enabled": true,
"device-authentication-required": true,
4xx
The command could not be processed due to a client error, e.g. malformed message payload.
5xx
The command could not be processed due to an internal problem at the device side.
The semantics of the individual codes are specific to the device and command. For status codes indicating an error (codes in the 400 - 599 range) the message body MAY contain a detailed description of the error that occurred.
If a command message response contains a payload, the body of the message MUST consist of a single AMQP Data section containing the response message data.
Examples
The following sequence diagram illustrates how a Business Application sends a command called getReading to device 4711 of the DEFAULT_TENANT and receives a response from the device:
Successfully send a Command
The sending of a command may fail for the same reasons as those illustrated for sending a one-way command. Additionally, the sending of a command may be considered unsuccessful by an application if it does not receive the response from the device in a reasonable amount of time:
Command times out
Name*
Description
Visibility
Others can see my Clipboard
Cancel
Save
API Endpoints &
Security
23.
23
Eclipse Hono
Device Registration
● used to make Hono aware of devices that can/will connect to the
service
● solutions/consumers may use the API to get information about
devices
● operations
○ assert status (mandatory)
○ register, deregister, get information (optional)
● where a system managing device identities is already in place
○ …implement this API as a facade to the existing system
24.
24
Eclipse Hono
Registration Assertion Flow
MQTT Adapter
Hono
Messaging
Device
Registration
1. publish telemetry
requests:
cpu: "100m"
memory: "300Mi"
limits:
cpu: "1"
memory: "512Mi"
svc:
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
# adapter's container filesystem. The files from the secret(s) can
# then be used in e.g. the service client specs.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the adapter has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the adapter's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/http-adapter-config/
hono:
Academia
Law
Physical Fitness
Gardening & Landscaping
Parenting
more (10)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Christianity
English Language Learners
Japanese Language
Chinese Language
French Language
German Language
Biblical Hermeneutics
History
Spanish Language
Islam
Русский язык
Russian Language
Arqade (gaming)
Bicycles
Role-playing Games
"auth-id": "sensor1",
"enabled": true,
"secrets": [{
"not-after": "2017-12-24T19:00:00+0100",
"pwd-hash": "AQIDBAUGBwg=",
"salt": "Mq7wFw==",
}]
}
The next example contains two pre-shared keys with overlapping validity periods for device myDevice with PSK identity little-sensor2.
{
"device-id": "myDevice",
"type": "psk",
"auth-id": "little-sensor2",
"enabled": true,
"secrets": [{
"not-after": "2017-07-01T00:00:00+0100",
"key": "cGFzc3dvcmRfb2xk"
},{
"not-before": "2017-06-29T00:00:00+0100",
"key": "cGFzc3dvcmRfbmV3"
}]
}
Credential Verification
Protocol Adapters are responsible for authenticating devices when they connect. The Credentials API provides the Get Credentials operation to support Protocol Adapters in doing so as illustrated below:
no
27017
The port that the MongoDB instance is listening on.
HONO_MONGODB_PASSWORD--hono.mongodb.password
no
-
The password to use for authenticating to the MongoDB instance.
HONO_MONGODB_SERVER_SELECTION_TIMEOUT_IN_MS--hono.mongodb.serverSelectionTimeoutInMs
no
1000
The time in milliseconds that the mongo driver will wait to select a server for an operation before raising an error.
HONO_MONGODB_USERNAME--hono.mongodb.username
no
-
The user name to use for authenticating to the MongoDB instance.
HONO_REGISTRY_AMQP_BIND_ADDRESS--hono.registry.amqp.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure AMQP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_AMQP_CERT_PATH--hono.registry.amqp.certPath
no
-
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_AMQP_KEY_PATH.Alternatively, the HONO_REGISTRY_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_AMQP_INSECURE_PORT--hono.registry.amqp.insecurePort
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up
GitHub is where the world builds software
Millions of developers and companies build, ship, and maintain their software on GitHub — the largest and most advanced development platform in the world.
Sign up for free
Dismiss
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Jump to bottom
[#2029] Use Command Router in adapters and integration tests
#2312
Publish Telemetry Data (authenticated Gateway)
Publishing Events
Publish an Event (authenticated Device)
Publish an Event (unauthenticated Device)
Publish an Event (authenticated Gateway)
Command & Control
Receiving Commands
Sending a Response to a Command
Examples
Downstream Meta Data
Event Message Time-to-live
Tenant specific Configuration
AMQP Adapter
The AMQP protocol adapter allows clients (devices or gateway components) supporting the AMQP 1.0 protocol to publish messages to Eclipse Hono™’s Telemetry, Event and Command & Control endpoints.
Device Authentication
By default, all Hono protocol adapters require clients (devices or gateway components) to authenticate during connection establishment.
This is the preferred way for devices to publish data via protocol adapters. The AMQP adapter supports both the
SASL PLAIN and SASL EXTERNAL authentication mechanisms.
The former uses a username and password to authenticate to the adapter while the latter uses an X.509 client certificate.
This guide provides examples for publishing telemetry and events for authenticated (using SASL PLAIN) and unauthenticated clients.
NB The AMQP adapter can be configured to allow unauthenticated devices to connect by setting configuration variable
HONO_AMQP_AUTHENTICATION_REQUIRED to false.
SASL PLAIN Authentication
Publish Telemetry Data (unauthenticated Device)
Publish Telemetry Data (authenticated Gateway)
Publishing Events
Publish an Event (authenticated Device)
Publish an Event (unauthenticated Device)
Publish an Event (authenticated Gateway)
Command & Control
Receiving Commands (authenticated Device)
Receiving Commands (unauthenticated Device)
Receiving Commands (authenticated Gateway)
Sending a Response to a Command (authenticated Device)
Sending a Response to a Command (unauthenticated Device)
Sending a Response to a Command (authenticated Gateway)
Custom Message Mapping
Downstream Meta Data
Event Message Time-to-live
Tenant specific Configuration
MQTT Adapter
The MQTT protocol adapter exposes an MQTT topic hierarchy for publishing telemetry data and events to downstream consumers and for receiving commands from applications and sending back responses.
The MQTT adapter is not a general purpose MQTT broker. In particular the adapter
supports MQTT 3.1.1 only.
does not maintain session state for clients and thus always sets the session present flag in its CONNACK packet to 0, regardless of the value of the clean session flag provided in a client’s CONNECT packet.
Specifying the Time a Device will wait for a Response
Using an HTTP Header
Using a Query Parameter
Commands handled by gateways
Sending a Response to a Command (authenticated Device)
Sending a Response to a Command (unauthenticated Device)
Sending a Response to a Command (authenticated Gateway)
Downstream Meta Data
Event Message Time-to-live
Tenant specific Configuration
HTTP Adapter
The HTTP protocol adapter exposes HTTP based endpoints for Eclipse Hono™’s south bound Telemetry, Event and Command & Control APIs.
Device Authentication
The HTTP adapter by default requires clients (devices or gateway components) to authenticate during connection establishment. The adapter supports both the Basic HTTP authentication scheme as well as client certificate based authentication as part of a TLS handshake for that purpose.
The adapter tries to authenticate the device using these mechanisms in the following order
Client Certificate
When a device uses a client certificate for authentication during the TLS handshake, the adapter tries to determine the tenant that the device belongs to, based on the issuer DN contained in the certificate. In order for the lookup to succeed, the tenant’s trust anchor needs to be configured by means of registering the trusted certificate authority. The device’s client certificate will then be validated using the registered trust anchor, thus implicitly establishing the tenant that the device belongs to. In a second step, the adapter then uses the Credentials API’s get operation with the client certificate’s subject DN as the auth-id and x509-cert as the type of secret as query parameters.
NB The HTTP adapter needs to be configured for TLS in order to support this mechanism.
HTTP Basic Auth
The username provided in the header must have the form auth-id@tenant, e.g. sensor1@DEFAULT_TENANT. The adapter verifies the credentials provided by the client against the credentials that the configured Credentials service has on record for the client. The adapter uses the Credentials API’s get operation to retrieve the credentials on record with the tenant and auth-id provided by the device in the username and hashed-password as the type of secret as query parameters.
The examples below refer to devices 4711 and gw-1 of tenant DEFAULT_TENANT using auth-ids sensor1 and gw1 and corresponding passwords. The example deployment as described in the Deployment Guides comes pre-configured with the corresponding entities in its device registry component.
Please refer to the Credentials API for details regarding the different types of secrets.
Please refer to the Device Registry Management API for information about managing devices.
Managing Credentials
Please refer to the Device Registry Management API for information about managing credentials.
Connection Events
Hono’s protocol adapters can use connection events to indicate the connection
status of a device. In particular, an adapter can notify downstream components
about a newly established connection with a device or about a device having
disconnected.
The connection status of devices using stateful protocols like MQTT and AMQP can usually
be determined quite easily because these protocols often require peers to explicitly open
or close a connection and often also support a kind of heart beat which can be used to
determine if a connection is still alive. However, for stateless protocols like HTTP
or CoAP, there is no clear definition of what it actually means that a device is
connected. It is obvious that a device is connected when it is sending an HTTP request.
However, the adapter has no way of knowing if the device has gone to sleep after it has
received the adapter’s response to its request.
That said, connection events indicating an established connection with a device can
usually be taken as face value. However, connection events indicating the disconnection
of a device may only represent the protocol adapters view of the device’s connection
status. For example, the HTTP adapter might consider a device disconnected because
it hasn’t received any requests from the device for some time. However, the device itself
might as well be up and running (i.e. not sleeping) and simply have no data worth publishing.
The mechanism of firing connection events is pluggable with the default implementation
simply forwarding connection status information to the logging framework.
Hono also comes with an alternative implementation which forwards connection status
information by means of Connection Events
via the Events API.
Messages Limit
Resource limits
Resource limits such as the maximum number of device connections allowed per tenant or the allowed data volume of the messages over a period of time per tenant can be set in Hono.
Hono specifies an API ResourceLimitChecks that is used by the protocol adapters for the verification of the configured resource limits. A default implementation of this API is shipped with Hono. This default implementation uses the live metrics data retrieved from a Prometheus server to verify the resource-limits, if configured. To enable and use this default implementation, please refer to the protocol adapter admin guides. Based on the requirements, a custom version of the above API can be implemented and used. The resource-limits for a tenant can be set using the tenant configuration. Please refer to the Tenant API for more details.
Connections Limit
Before accepting a new connection request from a device, the number of existing connections is checked against the configured limit by the protocol adapters. The connection request is declined if the limit is exceeded.
The MQTT and AMQP protocol adapters keep the connections longer opened than their counterparts such as HTTP. Thereby the MQTT and AMQP adapters are enabled to check the connection limits before accepting any new connection to a device.
Connection Duration Limit
Before accepting a new connection request from a device, the overall amount of time that the devices have already been connected to protocol adapters for that tenant is checked against the configured limit by the protocol adapters. The connection request is declined if the connection duration limit has been already reached. This limit is only supported by protocol adapters that maintain connection state with authenticated devices. In particular, the HTTP adapter does not support this metric.
The default Prometheus based implementation uses connection duration as the factor to limit the connections. This default implementation supports two modes of connection duration limit calculation namely days and monthly. For more details on how to set the mode refer to the Tenant API. If the period is not set explicitly, then the mode is assumed as monthly in the default implementation.
In the monthly mode, further device connections are only allowed, if the overall amount of time that the devices have already been connected from the beginning till the end of the current (Gregorian) calendar month does not exceed the configured max-minutes value. But for the first month, on which the connection duration limit became effective, the effective connection duration limit is calculated based on the max-minutes with respect to the remaining days in that month from the effective-since date.
Below is a sample resource limit configuration for a tenant, where it has been defined that the connection duration limit became effective on 10.Jul.2019 and the maximum connection duration limit for every month is 50,000 minutes. It means that from August 2019, the connection limit check ensures that no more connections are allowed for that tenant, if that limit of 50,000 minutes is already reached. But in case of July 2019, the month on which the message limit became effective, the effective connection duration limit is calculated by finding the average limit for a day from the configured max-minutes and then multiplying it with the number of days from the effective-since date till the end of that month. In this case it is calculated as (50,000 minutes / 31 days) x 22 days, which is 35,483 minutes. It means that for the month of July 2019, no more new connections are allowed, if the limit of 35,843 minutes is already reached.
"resource-limits": {
"connection-duration": {
"effective-since": "2019-07-10T14:30:00Z",
"max-minutes": 50000,
"period": {
"mode": "monthly"
}
}
false
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_AUTH_AMQP_PORT--hono.auth.amqp.port
no
5671
The secure port that the server should listen on.See Port Configuration below for details.
HONO_AUTH_AMQP_SECURE_PROTOCOLS--hono.auth.amqp.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_AUTH_AMQP_TRUST_STORE_PASSWORD--hono.auth.amqp.trustStorePassword
no
-
The password required to read the contents of the trust store.
HONO_AUTH_AMQP_TRUST_STORE_PATH--hono.auth.amqp.trustStorePath
no
-
The absolute path to the Java key store containing the CA certificates the service uses for authenticating clients. The key store format can be either JKS, PKCS12 or PEM indicated by a .jks, .p12 or .pem file suffix respectively.
HONO_AUTH_SVC_PERMISSIONS_PATH--hono.auth.svc.permissionsPath
no
classpath:/permissions.json
The Spring resource URI of the JSON file defining the identities and corresponding authorities on Hono’s endpoint resources. The default file bundled with the Auth Server defines authorities required by protocol adapters and downstream consumer. The default permissions file should only be used for evaluation purposes.
HONO_AUTH_SVC_SIGNING_KEY_PATH--hono.auth.svc.signing.keyPath
Command & Control Connection Configuration
Protocol adapters require an additional connection to the AMQP 1.0 Messaging Network in order to receive
commands from downstream applications and send responses to commands back to applications.
The connection is configured according to Hono Client Configuration
Tenant Service Connection Configuration
Protocol adapters require a connection to an implementation of Hono’s Tenant API in order to retrieve information for a tenant.
The connection to the Tenant Service is configured according to Hono Client Configuration
The adapter caches the responses from the service according to the cache directive included in the response.
If the response doesn’t contain a cache directive no data will be cached.
Device Registration Service Connection Configuration
Protocol adapters require a connection to an implementation of Hono’s Device Registration API in order to retrieve registration status assertions for connected devices.
The connection to the Device Registration Service is configured according to Hono Client Configuration
The adapter caches the responses from the service according to the cache directive included in the response.
If the response doesn’t contain a cache directive no data will be cached.
Credentials Service Connection Configuration
Protocol adapters require a connection to an implementation of Hono’s Credentials API in order to retrieve credentials stored for devices that needs to be authenticated. During connection establishment, the adapter uses the Credentials API to retrieve the credentials on record for the device and matches that with the credentials provided by a device.
The connection to the Credentials Service is configured according to Hono Client Configuration
The adapter caches the responses from the service according to the cache directive included in the response.
If the response doesn’t contain a cache directive no data will be cached.
Device Connection Service Connection Configuration
Protocol adapters require a connection to an implementation of Hono’s Device Connection API
in order to determine the gateway that a device is connected via to a protocol adapter. This information is required in order to
forward commands issued by applications to the protocol adapter instance that the gateway is connected to.
The connection to the Device Connection service is configured according to Hono Client Configuration
Response Caching
The clients created by a Hono client factory support the caching of responses received in response to service invocations. Caching can greatly improve performance by preventing costly invocations of remote service operations. However, it usually only makes sense for resources that do not change too frequently. The Hono client follows the approach to caching used in HTTP 1.1. In particular, it supports cache directives that a service includes in the response messages it sends back to the Hono client.
In order to enable caching, the org.eclipse.hono.client.impl.HonoClientImpl factory class needs to be configured with a cache manager using the setCacheManager method. Any specific client created by the factory will then cache responses to service invocations based on the following rules:
If the response contains a no-cache directive, the response is not cached at all.
Otherwise, if the response contains a max-age directive, the response is cached for the number of seconds specified by the directive.
The following table provides an overview of the configuration variables and corresponding command line options for configuring the Hono client’s caching behavior.
Environment VariableCommand Line Option
Mandatory
Default Value
Description
no
20
The minimum number of responses that can be cached.
no
1000
The maximum number of responses that can be cached. It is up to the particular cache implementation, how to deal with new cache entries once this limit has been reached.
no
600
The default number of seconds after which cached responses should be considered invalid.
Using TLS
The factory can be configured to use TLS for
authenticating the server during connection establishment and
Create a new “Custom” callback, with the following settings
(replacing <TENANT> with the name of the tenant):
Type: DATA – UPLINK
Channel: URL
Use HTTP Method: GET
Headers
Authorization – Basic … (see note below)
Send SNI: ☑ (Enabled)
Credentials
At the moment you need to manually put in the Authorization header,
you cannot put the credentials into the URL, as there is a bug in the
Sigfox backend, which cannot be fixed by Hono. The backend does not
properly escape the @ character, and thus sends foo%40tenant
instead of foo@tenant to the Hono protocol adapter.
As a workaround, you can explicitly set the Authorization header to a
value of Basic <base64 encoded credentials>. You can encode the
credentials using:
echo -n "sigfox@tenant:password" | base64
To get the full value, including the Basic you may use:
echo "Basic $(echo -n "sigfox@tenant:password" | base64)"
Enabling command & control
It is possible to enable command & control as well. For this you need to:
* the maximum number of connections per protocol adapter instance is reached, or
* if the maximum number of simultaneously connected devices for the tenant is reached.
Please refer to resource-limits for details.
Connection Duration Limits
The adapter rejects a client’s connection attempt with return code 0x05, indicating Connection Refused: not authorized, if the
connection duration limit that has been configured for
the client’s tenant is exceeded.
Message Limits
The adapter
discards any MQTT PUBLISH packet containing telemetry data or an event that is sent by a client and
rejects any AMQP 1.0 message containing a command sent by a north bound application
if the message limit that has been configured for the device’s tenant is exceeded.
Connection Events
The adapter can emit Connection Events for client connections being established and/or terminated.
Please refer to the common configuration options
for details regarding how to enable this behavior.
The adapter includes the client identifier from the client’s MQTT CONNECT packet as the Connection Event’s remote-id.
Publishing Data
Once the gateway has established a connection to the Kura adapter, all control and data messages published by applications running on
the gateway are sent to the adapter and mapped to Hono’s Telemetry and Event API endpoints as follows:
The adapter treats all messages that are published to a topic starting with the configured HONO_KURA_CONTROL_PREFIX as control messages.
All other messages are considered to be data messages.
control messages with QoS 0 are forwarded to Hono’s telemetry endpoint whereas messages with QoS 1 are forwarded to the event endpoint.
The corresponding AMQP 1.0 messages that are sent downstream have a content type of application/vnd.eclipse.kura-control.
data messages with QoS 0 are forwarded to the telemetry endpoint whereas messages with QoS 1 are forwarded to the event endpoint.
The device is authenticated using PSK.
URI: /telemetry
Method: POST
Type:
CON: at least once delivery semantics
NON: at most once delivery semantics
Request Options:
(optional) content-format: The type of payload contained in the request body. Required, if request contains payload.
Query Parameters:
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) empty: Marks the request as an empty notification.
Request Body:
(optional) Arbitrary payload encoded according to the given content type. Maybe empty, if URI-query: empty is provided.
Response Options:
(optional) content-format: A media type describing the semantics and format of payload contained in the response body.
This option will only be present if the response contains a command to be executed by the device which requires input data.
Note that this option will be empty if the media type contained in the command (AMQP) message’s content-type property cannot
be mapped to one of the registered CoAP content-format codes.
(optional) location-query: The hono-command query parameter contains the name of the command to execute.
This option will only be present if the response contains a command to be executed by the device.
(optional) location-path: The location path is command for one-way-commands and
command_response/<command-request-id> for commands expecting a response.
In the latter case, the location-path option contains exactly the URI-path that the device must use when sending its
response to the command.
8883
The secure port that the protocol adapter should listen on.See Port Configuration below for details.
HONO_KURA_SECURE_PROTOCOLS--hono.kura.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_KURA_TENANT_IDLE_TIMEOUT--hono.kura.tenantIdleTimeout
no
0ms
The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. 2h for 2 hours. See the Spring Boot documentation for an explanation of the format. The value 0ms disables the timeout.
HONO_KURA_SEND_MESSAGE_TO_DEVICE_TIMEOUT--hono.kura.sendMessageToDeviceTimeout
no
1000
The amount of time (milliseconds) after which the sending of a command to a device using QoS 1 is considered to be failed. The value of this variable should be increased in cases where devices are connected over a network with high latency.
The variables only need to be set if the default values do not match your environment.
Port Configuration
The Kura protocol adapter can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
The Kura protocol adapter will fail to start if none of the ports is configured properly.
Secure Port Only
The protocol adapter needs to be configured with a private key and certificate in order to open a TLS secured port.
HONO_COAP_MESSAGE_OFFLOADING_ENABLED--hono.coap.messageOffloadingEnabled
no
true
Enables to clear payload and serialized messages kept for deduplication in order to reduce the heap consumption. Experimental.
HONO_COAP_NETWORK_CONFIG--hono.coap.networkConfig
no
-
The absolute path to a Californium properties file containing network configuration properties that should be used for the secure CoAP port. If not set, Californium’s default properties will be used.
HONO_COAP_PORT--hono.coap.port
no
-
The secure port that the protocol adapter should listen on.See Port Configuration below for details.
HONO_COAP_TENANT_IDLE_TIMEOUT--hono.coap.tenantIdleTimeout
no
0ms
The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. 2h for 2 hours. See the Spring Boot documentation for an explanation of the format. The value 0ms disables the timeout.
HONO_COAP_TIMEOUT_TO_ACK--hono.coap.timeoutToAck
no
500
Timeout in milliseconds to send an ACK for a CoAP CON request. If the response is available before that timeout, a more efficient piggybacked response is used. If the timeout is reached without having received a response, an empty ACK is sent back to the client and the response is sent in a separate CON once it becomes available. Special values: -1 means to always piggyback the response in an ACK and never send a separate CON; 0 means to always send an ACK immediately and include the response in a separate CON.
The variables only need to be set if the default value needs to be changed.
Port Configuration
The CoAP protocol adapter can be configured to listen for connections on
a secure port only (default) or
no
0ms
The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. 2h for 2 hours. See the Spring Boot documentation for an explanation of the format. The value 0ms disables the timeout.
HONO_APP_MAX_INSTANCES--hono.app.maxInstances
no
#CPU cores
The number of verticle instances to deploy. If not set, one verticle per processor core is deployed.
The variables only need to be set if the default values do not match your environment.
Port Configuration
The AMQP protocol adapter can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
The AMQP protocol adapter will fail to start if none of the ports is configured properly.
Secure Port Only
The protocol adapter needs to be configured with a private key and certificate in order to open a TLS secured port.
There are two alternative ways for doing so:
either setting the HONO_AMQP_KEY_STORE_PATH and the HONO_AMQP_KEY_STORE_PASSWORD variables in order to load the key & certificate from a password protected key store, or
setting the HONO_AMQP_KEY_PATH and HONO_AMQP_CERT_PATH variables in order to load the key and certificate from two separate PEM files in PKCS8 format.
no
0ms
The duration after which the protocol adapter removes local state of the tenant (e.g. open AMQP links) with an amount and a unit, e.g. 2h for 2 hours. See the Spring Boot documentation for an explanation of the format. The value 0ms disables the timeout.
The variables only need to be set if the default values do not match your environment.
Port Configuration
The MQTT protocol adapter can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
The MQTT protocol adapter will fail to start if none of the ports is configured properly.
Secure Port Only
The protocol adapter needs to be configured with a private key and certificate in order to open a TLS secured port.
There are two alternative ways for doing so:
either setting the HONO_MQTT_KEY_STORE_PATH and the HONO_MQTT_KEY_STORE_PASSWORD variables in order to load the key & certificate from a password protected key store, or
setting the HONO_MQTT_KEY_PATH and HONO_MQTT_CERT_PATH variables in order to load the key and certificate from two separate PEM files in PKCS8 format.
When starting up, the protocol adapter will bind a TLS secured socket to the default secure MQTT port 8883. The port number can also be set explicitly using the HONO_MQTT_PORT variable.
The HONO_MQTT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_MQTT_INSECURE_PORT to a valid port number, or by
implicitly configuring the default MQTT port (1883) by simply setting HONO_MQTT_INSECURE_PORT_ENABLED to true.
The protocol adapter issues a warning on the console if HONO_MQTT_INSECURE_PORT is set to the default secure MQTT port (8883).
The HONO_MQTT_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
both a secure and an insecure port (dual port configuration)
The HTTP protocol adapter will fail to start if none of the ports is configured properly.
Secure Port Only
The protocol adapter needs to be configured with a private key and certificate in order to open a TLS secured port.
There are two alternative ways for doing so:
Setting the HONO_HTTP_KEY_STORE_PATH and the HONO_HTTP_KEY_STORE_PASSWORD variables in order to load the key & certificate from a password protected key store, or
setting the HONO_HTTP_KEY_PATH and HONO_HTTP_CERT_PATH variables in order to load the key and certificate from two separate PEM files in PKCS8 format.
When starting up, the protocol adapter will bind a TLS secured socket to the default secure port 8443. The port number can also be set explicitly using the HONO_HTTP_PORT variable.
The HONO_HTTP_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_HTTP_INSECURE_PORT to a valid port number, or by
implicitly configuring the default port (8080) by simply setting HONO_HTTP_INSECURE_PORT_ENABLED to true.
The protocol adapter issues a warning on the console if HONO_HTTP_INSECURE_PORT is set to the default secure HTTP port (8443).
The HONO_HTTP_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Dual Port
The protocol adapter may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Ephemeral Ports
Both the secure as well as the insecure port numbers may be explicitly set to 0. The protocol adapter will then use arbitrary (unused) port numbers determined by the operating system during startup.
merged 1 commit into
eclipse:master
from
bosch-io:support_deviceconnectioncache_in_quarkus_adapters
Nov 23, 2020
Merged
Support using Device Connection cache client with Quarkus adapters
#2318
sophokles73
merged 1 commit into
eclipse:master
from
bosch-io:support_deviceconnectioncache_in_quarkus_adapters
Nov 23, 2020
+266
−251
Conversation
3
Commits
In test setups and some production scenarios Hono server may be configured to open one secure and one insecure port at the same time.
This is achieved by configuring both ports correctly (see above). The server will fail to start if both ports are configured to use the same port number.
Since the secure port may need different visibility in the network setup compared to the secure port, it has it’s own binding address HONO_DEVICECONNECTION_AMQP_INSECURE_PORT_BIND_ADDRESS.
This can be used to narrow the visibility of the insecure port to a local network e.g., while the secure port may be visible worldwide.
Ephemeral Ports
The server may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Data Grid Connection Configuration
The Device Connection component requires either an embedded cache or a remote
data grid, using the Infinispan Hotrod protocol to store device information.
The following table provides an overview of the configuration variables and corresponding command line options for configuring the common aspects of the service:
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_DEVICECONNECTION_COMMON_CACHENAME--hono.deviceConnection.common.cacheName
no
device-connection
The name of the cache
HONO_DEVICECONNECTION_COMMON_CHECKKEY--hono.deviceConnection.common.checkKey
no
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_REGISTRY_AMQP_PORT--hono.registry.amqp.port
no
5671
The secure port that the server should listen on for AMQP 1.0 connections.See Port Configuration below for details.
HONO_REGISTRY_AMQP_SECURE_PROTOCOLS--hono.registry.amqp.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_REGISTRY_HTTP_TENANT_ID_PATTERN--hono.registry.http.tenantIdPattern
no
^[a-zA-Z0-9-_\.]+$
The regular expression to use to validate tenant ID. Please refer to the java pattern documentation.
HONO_REGISTRY_HTTP_DEVICE_ID_PATTERN--hono.registry.http.deviceIdPattern
no
^[a-zA-Z0-9-_\.:]+$
The regular expression to use to validate device ID. Please refer to the java pattern documentation.
HONO_REGISTRY_HTTP_BIND_ADDRESS--hono.registry.http.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure HTTP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_HTTP_CERT_PATH--hono.registry.http.certPath
@lhotari Thank you for contributing :-)
Can you also please add yourself to the Copyright Holders section of the legal/src/main/resources/legal/NOTICE.md file?
lhotari
requested a review
from sophokles73
as a
code owner
Nov 23, 2020
Add Lari Hotari to copyright holders section
…
Loading status checks…
9f00777
Signed-off-by: Lari Hotari <lari@hotari.net>
lhotari
force-pushed the
lhotari:lh-fix-jdbc-tenant-adapter-store
branch
from
089e69a
to
9f00777
Nov 23, 2020
Copy link
Request Message Format
The following table provides an overview of the properties a client needs to set on a message to retrieve the command-handling adapter instances for a device in addition to the Standard Request Properties.
Name
Mandatory
Location
AMQP Type
Description
content-type
yes
properties
string
MUST be set to application/json.
subject
yes
properties
string
MUST be set to get-cmd-handling-adapter-instances.
The body of the message MUST consist of a single AMQP Data section containing a UTF-8 encoded string representation of a single JSON object. The JSON object has the following properties:
Name
Mandatory
JSON Type
Description
gateway-ids
yes
array
In order to address this problem, the Netty networking library that is used in Hono’s components can be configured to employ the OpenSSL instead of the JVM’s SSL engine by means of Netty’s Forked Tomcat Native (tcnative) module.
The tcnative module comes in several flavors, corresponding to the way that the OpenSSL library has been linked in. The statically linked versions include a specific version of OpenSSL (or BoringSSL for that matter) and is therefore most easy to use on supported platforms, regardless of whether another version of OpenSSL is already installed or not. In contrast, the dynamically linked variants depend on a particular version of OpenSSL being already installed on the operating system. Both approaches have their pros and cons and Hono therefore does not include tcnative in its Docker images by default, i.e. Hono’s services will use the JVM’s default SSL engine by default.
Configuring Containers
When starting up any of Hono’s Docker images as a container, the JVM will look for additional jar files to include in its classpath in the container’s /opt/hono/extensions folder. Thus, using a specific variant of tcnative is just a matter of configuring the container to mount a volume or binding a host folder at that location and putting the desired variant of tcnative into the corresponding volume or host folder.r
Assuming that the Auth Server should be run with the statically linked, BoringSSL based tcnative variant, the following steps are necessary:
Download tcnative matching the platform architecture (linux-x86_64).
Put the jar file to a folder on the Docker host, e.g. /tmp/tcnative.
Start the Auth Server Docker image mounting the host folder:
docker run --name hono-auth-server --mount type=bind,src=/tmp/tcnative,dst=/opt/hono/extensions,ro ... eclipse/hono-service-auth
Note that the command given above does not contain the environment variables and secrets that are usually required to configure the service properly.
When the Auth Server starts up, it will look for a working variant of tcnative on its classpath and (if found) use it for establishing TLS connections. The service’s log file will indicate whether the JVM’s default SSL engine or OpenSSL is used.
Using a Docker volume instead of a bind mount works the same way but requires the use of volume as the type of the --mount parameter. Please refer to the Docker reference documentation for details.
Server Name Indication (SNI)
Server Name Indication can be used to indicate to a server the host name that the client wants to
connect to as part of the TLS handshake. This is useful in order to be able to host multiple virtual servers on a single network address.
In particular, SNI allows server components to select a server certificate that matches the domain name indicated by the client using SNI.
Hono’s protocol adapters support virtual servers by means of SNI as described above. Devices can then connect to a protocol adapter using any one
of the configured virtual domain names.
The following steps a re necessary in order to configure the protocol adapters with multiple virtual servers:
Create Server Certificate(s)
When a device establishes a connection to one of Hono’s protocol adapters using one of its virtual domain names, then it includes the domain name in
its TLS hello message by means of the SNI extension. The server can then use this information to determine the matching server certificate and
corresponding private key that is required to perform the TLS handshake.
It is therefore necessary to create a private key and certificate for each virtual server to be hosted.
Already have an account?
Sign in to comment
Reviewers
dejanb
Assignees
No one assigned
Labels
C&C
bug
Projects
1.5.0
In progress
Milestone
1.5.0
Linked issues
Successfully merging this pull request may close these issues.
None yet
1 participant
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Note that there was a code change which leads to a different behaviour in Hono's AMQP adapter in 1.5.:
Previously the message was accepted (and the QoS was ignored), now it is rejected.
It's not specified as far as I can see how the adapter will react on this, but this may impact clients if they had accidentally set a qos-level HTTP header for events to AT_MOST_ONCE.
This comment has been minimized.
Sign in to view
sophokles73
Nov 23, 2020
Member
you mean HTTP adapter, right?
fkaltner
marked this pull request as ready for review
Nov 23, 2020
fkaltner
requested a review
from sophokles73
as a
code owner
Nov 23, 2020
sophokles73
reviewed
Nov 23, 2020
View changes
Hi, I'm planning to take Hono for a test run on Azure AKS. I'd like to see if it can easily scale to 10M devices (just for testing the registry, ignoring scaling aspects of device communications).For that goal, I guess it would make sense to use Azure CosmosDB for backing Hono's Mongo DB based registry.Does someone have experiences of using Azure CosmosDB with Hono's Mongo DB based registry?I found eclipse/hono#1120 mentioning CosmosDB, but there's no further details whether someone has tested it already.
Bob Claerhout
@BobClaerhout
FWIW we are using MongoDB Atlas (https://www.mongodb.com/cloud/atlas) and this seems to be working. We should properly test this however. If that's an option, we might be able to help you set this up.
Sign in to start talking
"deployment": {
"maxInstances": 4
}
}
]
}
Tracing Format
The table below provides an overview of the members defined for the tracing JSON object:
Name
Mandatory
Type
Default Value
Description
sampling-mode
no
string
default
Defines in how far OpenTracing spans created when processing messages for this tenant shall be recorded (sampled) by the tracing system. The value default lets the default sampling mechanism be used. The value all marks the spans related to this tenant so that they should all be sampled. The value none marks the spans as not to be sampled. The mode defined here may be overridden for a particular auth-id by means of the sampling-mode-per-auth-id property.
sampling-mode-per-auth-id
no
object
Defines in how far OpenTracing spans created when processing messages for this tenant and a particular auth-id shall be recorded (sampled) by the tracing system. The child properties have the auth-id as name. A child property value of default lets the default sampling mechanism be used. The child property value all marks the spans related to this tenant and the auth-id so that they should all be sampled. The child property value none marks the spans as not to be sampled. The mode defined for a particular auth-id has precedence over the value defined by the sampling-mode property.
Trusted CA Format
The table below provides an overview of the members of a JSON object representing a trusted CA:
2. assert (tenant-id, device-id)
6. forward message
5. create message
(incl. token) 7. validate token
8. forward message
Device
4. Json Web Token
Assertions are cached by the adapter per device connection
3. check if device is
registered and enabled
25.
25
Eclipse Hono
Credentials
● supports the process of authenticating devices
● used by protocol adapters to retrieve credentials used to
authenticate devices connecting to the adapter (MQTT, HTTP, …)
● different types of credentials
○ psk, hashed password, public key, …
● operations
○ get (mandatory)
○ add, update, remove (optional)
● where a system for doing this is already in place …
○ implement this API as a facade to the existing system
26.
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
# http contains configuration properties for the adapter's
# exposed HTTP endpoints.
# If not set, the adapter by default exposes the secure and insecure ports
# using an example key and certificate.
http:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the adapter's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the adapter's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
kura:
# enabled indicates if Hono's (deprecated) Kura adapter should be deployed.
Anime & Manga
Puzzling
Motor Vehicle Maintenance & Repair
Board & Card Games
Bricks
Homebrewing
Martial Arts
The Great Outdoors
Poker
Chess
Sports
more (16)
MathOverflow
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
Chemistry
Biology
Computer Science
Philosophy
Linguistics
Psychology & Neuroscience
Computational Science
more (10)
Meta Stack Exchange
The following sequence diagram illustrates the flow of messages involved in a Protocol Adapter authenticating a device.
This is shown for the MQTT Protocol Adapter as example how a device authenticates with a username and a hashed-password.
The mechanism can be transferred to other protocols in a similar manner.
MQTT Adapter authenticates device using the Credentials service
Protocol adapters MUST comply with the following rules when verifying credentials presented by a device:
Credentials that have their enabled property set to false MUST NOT be used for authentication.
Adapters MUST only consider secrets for authentication which
have their not-before property set to either null or the current or a past point in time and
have their not-after property set to either null or the current or a future point in time.
Standard Credential Types
The following sections define some standard credential types and their properties. Applications are encouraged to make use of these types. However, the types are not enforced anywhere in Hono and clients may of course add application specific properties to the credential types.
Common Properties
All credential types used with Hono MUST contain device-id, type, auth-id, enabled and secrets properties as defined in Credentials Format.
Hashed Password
A credential type for storing a (hashed) password for a device.
Example:
{
"device-id": "4711",
"type": "hashed-password",
"auth-id": "sensor1",
"secrets": [{
"pwd-hash": "AQIDBAUGBwg=",
"salt": "Mq7wFw==",
no
-
The insecure port the server should listen on for AMQP 1.0 connections.See Port Configuration below for details.
HONO_REGISTRY_AMQP_INSECURE_PORT_BIND_ADDRESS--hono.registry.amqp.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure AMQP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_AMQP_INSECURE_PORT_ENABLED--hono.registry.amqp.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_REGISTRY_AMQP_INSECURE_PORT or the default AMQP port number (5672) if not set explicitly.See Port Configuration below for details.
HONO_REGISTRY_AMQP_KEY_PATH--hono.registry.amqp.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_AMQP_CERT_PATH. Alternatively, the HONO_REGISTRY_AMQP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_AMQP_KEY_STORE_PASSWORD--hono.registry.amqp.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_REGISTRY_AMQP_KEY_STORE_PATH--hono.registry.amqp.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_REGISTRY_AMQP_KEY_PATH and HONO_REGISTRY_AMQP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
Open
calohmn
wants to merge
1
commit into
eclipse:master
base:
master
from
bosch-io:PR/use_cmdrouter_in_adapters
Open
[#2029] Use Command Router in adapters and integration tests
#2312
calohmn
wants to merge
1
commit into
eclipse:master
from
bosch-io:PR/use_cmdrouter_in_adapters
+860
−151
Conversation
6
The AMQP adapter supports authenticating clients using a username and password. This means that clients need to provide a username and a password
when connecting to the AMQP adapter. If the adapter is configured for multi-tenancy (i.e HONO_AMQP_SINGLE_TENANT is set to false),
then the username must match the pattern [auth-id@tenant], e.g. sensor1@DEFAULT_TENANT. Otherwise, the tenant-id can be omitted from the username
and the client is assumed to belong to the DEFAULT_TENANT.
The adapter verifies the credentials provided by the client against the credentials that the
configured Credentials service has on record for the client.
If the credentials match, the client device can proceed to publish messages to Hono.
The examples below refer to devices 4711 and gw-1 of tenant DEFAULT_TENANT using auth-ids sensor1 and gw1 and corresponding passwords.
The example deployment as described in the Deployment Guide comes pre-configured with the corresponding entities in its
device registry component.
NB There is a subtle difference between the device identifier (device-id) and the auth-id a device uses for authentication.
See Device Identity for a discussion of the concepts.
SASL EXTERNAL Authentication
When a device uses a client certificate for authentication, the TLS handshake is initiated during TCP connection establishment.
If no trust anchor is configured for the AMQP adapter, the TLS handshake will succeed only if the certificate has not yet expired.
Once the TLS handshake completes and a secure connection is established, the certificate’s signature is checked during the SASL handshake.
To complete the SASL handshake and authenticate the client, the adapter performs the following steps:
The adapter extracts the client certificate’s Issuer DN from the client certificate
The adapter invokes the Tenant service to look up the tenant matching the DN.
In order for the lookup to succeed, the tenant’s trust anchor needs to be configured by means of registering the
ignores any Will included in a client’s CONNECT packet.
does not support retaining messages. However, if an event or telemetry message’s retain flag is set to 1 then the corresponding AMQP 1.0 message being sent downstream by the adapter will contain an x-opt-retain message annotation containing the boolean value true. A downstream consumer may then react according to the presence of this annotation.
Authentication
The MQTT adapter by default requires clients (devices or gateway components) to authenticate during connection establishment.
The adapter supports both the authentication based on the username/password provided in an MQTT CONNECT packet as well as client
certificate based authentication as part of a TLS handshake for that purpose.
The adapter tries to authenticate the device using these mechanisms in the following order
Client Certificate
When a device uses a client certificate for authentication during the TLS handshake, the adapter tries to determine the tenant
that the device belongs to based on the issuer DN contained in the certificate.
In order for the lookup to succeed, the tenant’s trust anchor needs to be configured by means of registering the
trusted certificate authority. The device’s client certificate will then be
validated using the registered trust anchor, thus implicitly establishing the tenant that the device belongs to.
In a second step, the adapter uses the Credentials API’s get operation to retrieve the credentials on record, including the client
certificate’s subject DN as the auth-id, x509-cert as the type of secret and the MQTT client identifier as client-id in the
request payload.
NB The adapter needs to be configured for TLS in order to support this mechanism.
Username/Password
When a device wants to authenticate using this mechanism, it needs to provide a username and a password in the MQTT CONNECT packet
it sends in order to initiate the connection. The username must have the form auth-id@tenant, e.g. sensor1@DEFAULT_TENANT.
The adapter verifies the credentials provided by the client against the credentials that the
configured Credentials service has on record for the client.
The adapter uses the Credentials API’s get operation to retrieve the credentials on record, including the tenant and auth-id provided
NB There is a subtle difference between the device identifier (device-id) and the auth-id a device uses for authentication. See Device Identity for a discussion of the concepts.
Message Limits
The adapter rejects
a client’s request to upload data with status code 429 Too Many Requests and
any AMQP 1.0 message containing a command sent by a north bound application
if the message limit that has been configured for the device’s tenant is exceeded.
Publish Telemetry Data (authenticated Device)
URI: /telemetry
Method: POST
Request Headers:
(optional) authorization: The device’s auth-id and plain text password encoded according to the Basic HTTP authentication scheme. If not set, the adapter expects the device to present a client certificate as part of the TLS handshake during connection establishment.
(required) content-type: The type of payload contained in the request body.
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) qos-level: The QoS level for publishing telemetry messages. The adapter supports at most once (0) and at least once (1) QoS levels. The default value of 0 is assumed if this header is omitted.
Request Body:
(required) Arbitrary payload encoded according to the given content type.
Response Headers:
(optional) content-type: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.
(optional) hono-command: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-req-id: An identifier that the device must include in its response to a command. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-target-device: The id of the device that shall execute the command. This header will only be present if the response contains a command to be executed by the device and if the response goes to a gateway that acts on behalf of the target device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.
}
In the days mode, further device connections are only allowed, if the overall amount of time that the devices have already been connected for the configured no-of-days does not exceed the max-minutes value. In the below sample configuration, the mode is configured as days and the accounting duration as 30 days. In this case the connection duration limit check ensures that new connections are accepted, only if the connection duration usage for every 30 days from 10.Jul.2019 (effective-since) does not exceed the 50,000 minutes limit.
"resource-limits": {
"connection-duration": {
"effective-since": "2019-07-10T14:30:00Z",
"max-minutes": 50000,
"period": {
"mode": "days",
"no-of-days": 30
}
}
}
Messages Limit
Hono supports limiting the number of messages that devices and north bound applications of a tenant can publish to Hono during a given time interval. Before accepting any telemetry or event or command messages from devices or north bound applications, it is checked by the protocol adapters that if the message limit is exceeded or not. The incoming message is discarded if the limit is exceeded.
The default Prometheus based implementation uses data volume as the factor to limit the messages. The data volume already consumed by a tenant over the given time interval is compared with the configured message limit before accepting any messages. The default implementation supports two modes of message limits calculation namely days and monthly. For more details on how to set the mode refer to the Tenant API. If the period is not set explicitly, then the mode is assumed as monthly in the default implementation.
In the monthly mode, the message limit check ensures that the data usage from the beginning till the end of a (Gregorian) calendar month does not exceed the max-bytes value. But for the first month on which the message limit became effective, the effective max-bytes are calculated based on the max-bytes with respect to the remaining days in that month from the effective-since date.
Below is a sample resource limit configuration for a tenant and it has been defined that the message limit became effective on 10.Jul.2019 and the maximum bytes allowed for a month is 2 GB. It means that from August 2019, the message limit check ensures that the data usage in a month does not exceed 2 GB. But in case of July 2019, the month on which the message limit became effective, the effective max-bytes is calculated by finding the average limit for a day from the max-bytes and multiplying it with the number of days from the effective-since date till the end of that month. In this case it is calculated as (2 GB / 31 days) x 22 days which is 1.4 GB. It means that for the month of July 2019, the data usage should not exceed 1.4GB.
"resource-limits": {
"data-volume": {
"effective-since": "2019-07-10T14:30:00Z",
"max-bytes": 2147483648,
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for signing tokens asserting an authenticated client’s identity and authorities. When using this variable, other services that need to validate the tokens issued by this service need to be configured with the corresponding certificate/public key. Alternatively, a symmetric key can be used for signing (and validating) by setting the HONO_AUTH_SVC_SIGNING_SHARED_SECRET variable. If none of these variables is set, the server falls back to the key indicated by the HONO_AUTH_AMQP_KEY_PATH variable. If that variable is also not set, startup of the server fails.
HONO_AUTH_SVC_SIGNING_SHARED_SECRET--hono.auth.svc.signing.sharedSecret
no
-
A string to derive a symmetric key from that is used for signing tokens asserting an authenticated client’s identity and authorities. The key is derived from the string by using the bytes of the String’s UTF8 encoding. When setting the signing key using this variable, other services that need to validate the tokens issued by this service need to be configured with the same key. Alternatively, an asymmetric key pair can be used for signing (and validating) by setting the HONO_AUTH_SVC_SIGNING_KEY_PATH variable. If none of these variables is set, startup of the server fails.
HONO_AUTH_SVC_SIGNING_TOKEN_EXPIRATION--hono.auth.svc.signing.tokenExpiration
no
600
The number of seconds after which the tokens created by this service for asserting an authenticated client’s identity should be considered invalid. Other Hono components will close AMQP connections with clients after this period in order to force the client to authenticate again and create a new token. In closed environments it should be save to set this value to a much higher value, e.g. several hours.
HONO_AUTH_SVC_SUPPORTED_SASL_MECHANISMS--hono.auth.svc.supportedSaslMechanisms
no
EXTERNAL, PLAIN
A (comma separated) list of the supported SASL mechanisms to be advertised to clients. This option may be set to specify only one of EXTERNAL or PLAIN, or to use a different order.
The variables only need to be set if the default value does not match your environment.
Port Configuration
The Auth Server can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
The server will fail to start if none of the ports is configured properly.
Secure Port Only
Responses from the Device Connection service are never cached, so the properties for configuring the cache are ignored.
Direct Connection to Data Grid
Protocol adapters can alternatively be configured to directly access a data grid for storing and retrieving
device connection information using Infinispan’s Hotrod protocol.
This has the advantage of saving the network hop to the Device Connection service. However,
this is only beneficial if the Device Connection service implementation itself uses a remote service (like a data grid) for
storing the data.
The following table provides an overview of the configuration variables and corresponding command line options for configuring
the connection to the data grid:
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_DEVICECONNECTION_SERVER_LIST--hono.deviceConnection.serverList
yes
-
A list of remote servers in the form: host1[:port][;host2[:port]].....
HONO_DEVICECONNECTION_AUTH_SERVER_NAME--hono.deviceConnection.authServerName
yes
-
The server name to indicate in the SASL handshake when authenticating to the server.
HONO_DEVICECONNECTION_AUTH_USERNAME--hono.deviceConnection.authUsername
yes
-
(optionally) authenticating to the server using a client certificate (if the server supports this)
Address rewriting
In some multi-tenant messaging environments external can have their addresses internally mapped to enforce consistent namespaces. For example, the addresses can be prefixed by the virtual host the client uses to connect or some other internal identifier. So address like telemetry/DEFAULT_TENANT would be internally represented as test-vhost/telemetry/DEFAULT_TENANT for example.
Environment VariableCommand Line Option
Mandatory
Default Value
Description
no
-
The address rewrite rule in the "$PATTERN $REPLACEMENT" format.
The rule is defined in the "$PATTERN $REPLACEMENT" format, where the pattern and replacement use the standard Java regular expression syntax. The pattern should match the address or otherwise the original address will be used.
For example, setting HONO_ADDRESSREWRITERULE to ([a-z_]+)/([\\w-]+) test-vhost/$1/$2 would result in adding the test-vhost/ prefix to all addresses used by the client.
Switch the Type of the DATA callback from UPLINK to BIDIR
Command requirements
Sigfox allows only a very specific payload in command messages. You must send
exactly 8 bytes of data. It only supports one way commands.
Events
You can send events by using the path /data/event on the URL.
Consuming data
Use the standard way of consuming Hono messages.
Known bugs and limitations
Only the simple URL and only data (no service or device events are
currently supported.
The corresponding AMQP 1.0 messages that are sent downstream have a content type of application/vnd.eclipse.kura-data.
Downstream Meta Data
The adapter includes the following meta data in messages being sent downstream:
Name
Location
Type
Description
device_id
application
string
The identifier of the device that the message originates from.
orig_adapter
application
string
Contains the adapter’s type name which can be used by downstream consumers to determine the protocol adapter that the message has been received over. The Kura adapter’s type name is hono-kura-mqtt.
orig_address
application
string
Contains the name of the MQTT topic that the Kura gateway has originally published the data to.
The adapter also considers defaults registered for the device at either the tenant or the device level. The values of the default properties are determined as follows:
If the message already contains a non-empty property of the same name, the value if unchanged.
Otherwise, if a default property of the same name is defined in the device’s registration information, that value is used.
Otherwise, if a default property of the same name is defined for the tenant that the device belongs to, that value is used.
Note that of the standard AMQP 1.0 message properties only the content-type and ttl can be set this way to a default value.
Event Message Time-to-live
This option will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device.
(optional) Error details, if status code is >= 4.00.
Response Codes:
2.04 (Changed): The data in the request body has been accepted for processing. The response may contain a command for the device to execute.
Note that if the message type is NON (at most once semantics), this status code does not mean that the message has been
delivered to any potential consumer (yet). However, if the message type is CON (at least once semantics), then the adapter waits
for the message to be delivered and accepted by a downstream consumer before responding with this status code.
4.00 (Bad Request): The request cannot be processed. Possible reasons include:
the request body is empty and the URI-query option doesn’t contain the empty parameter
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant
connected to Hono.
This is the preferred way for devices to publish telemetry data. It is available only if the protocol adapter is configured to require
There are two alternative ways for doing so:
either setting the HONO_KURA_KEY_STORE_PATH and the HONO_KURA_KEY_STORE_PASSWORD variables in order to load the key & certificate from a password protected key store, or
setting the HONO_KURA_KEY_PATH and HONO_KURA_CERT_PATH variables in order to load the key and certificate from two separate PEM files in PKCS8 format.
When starting up, the protocol adapter will bind a TLS secured socket to the default secure MQTT port 8883. The port number can also be set explicitly using the HONO_KURA_PORT variable.
The HONO_KURA_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_KURA_INSECURE_PORT to a valid port number, or by
implicitly configuring the default MQTT port (1883) by simply setting HONO_KURA_INSECURE_PORT_ENABLED to true.
The protocol adapter issues a warning on the console if HONO_KURA_INSECURE_PORT is set to the default secure MQTT port (8883).
The HONO_KURA_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Dual Port
The protocol adapter may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Ephemeral Ports
Both the secure as well as the insecure port numbers may be explicitly set to 0. The protocol adapter will then use arbitrary (unused) port numbers determined by the operating system during startup.
an insecure port only or
both a secure and an insecure port (dual port configuration)
The CoAP protocol adapter will fail to start if none of the ports is configured properly.
Secure Port Only
The protocol adapter opens a DTLS secured port if any of the following criteria are met
The HONO_COAP_KEY_STORE_PATH and HONO_COAP_KEY_STORE_PASSWORD environment variables are set in order to load a key and certificate from a password protected key store or
the HONO_COAP_KEY_PATH and HONO_COAP_CERT_PATH environment variables are set in order to load a key and certificate from two separate PEM files in PKCS8 format or
the HONO_COAP_PORT environment variable is set to a valid port number.
When starting up, the protocol adapter will bind a DTLS secured UDP socket to the configured port. If the port is not set explicitly, the default CoAP secure port 5684 is used.
The HONO_COAP_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only,
i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose
the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-DTLS secured port instead, e.g. for testing purposes.
In any case, the non-secure port needs to be explicitly enabled by
explicitly setting HONO_COAP_AUTHENTICATION_REQUIRED to false and either
explicitly setting HONO_COAP_INSECURE_PORT to a valid port number or
implicitly configuring the default insecure CoAP port (5683) by setting HONO_COAP_INSECURE_PORT_ENABLED to true.
The protocol adapter issues a warning on the console if HONO_COAP_INSECURE_PORT is set to the default secure CoAP port (5684).
The HONO_COAP_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only,
i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-DTLS secured port on a local interface only, thus providing easy access from within
the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Note
When starting up, the protocol adapter will bind a TLS secured socket to the default secure port 5671. The port number can also be set explicitly using the HONO_AMQP_PORT variable.
The HONO_AMQP_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_AMQP_INSECURE_PORT to a valid port number, or by
implicitly configuring the default adapter port (5672) by simply setting HONO_AMQP_INSECURE_PORT_ENABLED to true.
The protocol adapter issues a warning on the console if HONO_AMQP_INSECURE_PORT is set to the default secure port (5671) used by the adapter for secure connections.
The HONO_AMQP_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Dual Port
The protocol adapter may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Ephemeral Ports
Both the secure as well as the insecure port numbers may be explicitly set to 0. The protocol adapter will then use arbitrary (unused) port numbers determined by the operating system during startup.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Dual Port
The protocol adapter may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Ephemeral Ports
Both the secure as well as the insecure port numbers may be explicitly set to 0. The protocol adapter will then use arbitrary (unused) port numbers determined by the operating system during startup.
Custom Message Mapping
This protocol adapter supports transformation of messages that have been uploaded by devices before forwarding them to downstream consumers.
Experimental
subject to change without prior notice.
The following table provides an overview of the configuration variables and corresponding command line options for configuring the external
service endpoint(s) for transforming messages:
Environment VariableCommand Line Option
Mandatory
Default Value
Description
HONO_MQTT_MAPPERENDPOINTS_<mapperName>_HOST--hono.mqtt.mapperEndpoints.<mapperName>.host
no
-
The host name or IP address of the service to invoke for transforming uploaded messages. The <mapperName> needs to contain the service name as set in the mapper property of the device’s registration information.
HONO_MQTT_MAPPERENDPOINTS_<mapperName>_PORT--hono.mqtt.mapperEndpoints.<mapperName>.port
1
Checks
3
Files changed
17
Conversation
Copy link
Quote reply
Member
sophokles73
commented
Nov 23, 2020
The Quarkus based adapters now also support connecting to a remote cache
containing Device Connection data directly using the Infinispan Hotrod
client.
sophokles73
added
the
Client
label
Nov 23, 2020
sophokles73
added this to the 1.5.0 milestone
KEY_CONNECTION_CHECK
The key used to check the health of the cache.
HONO_DEVICECONNECTION_COMMON_CHECKVALUE--hono.deviceConnection.common.checkValue
no
VALUE_CONNECTION_CHECK
The value used to check the health of the cache.
The type of the cache is selected on startup by enabling or disabling the
profile embedded-cache. If the profile is enabled the embedded cache is
used, otherwise the remote cache is being used. The remote cache is the default.
Remote cache
The following table provides an overview of the configuration variables and corresponding command line options for configuring the connection to the data grid:
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_DEVICECONNECTION_REMOTE_SERVERLIST--hono.deviceConnection.remote.serverList
yes
-
A list of remote servers in the form: host1[:port][;host2[:port]].....
HONO_DEVICECONNECTION_REMOTE_AUTHSERVERNAME--hono.deviceConnection.remote.authServerName
yes
-
The server name to indicate in the SASL handshake when authenticating to the server.
HONO_DEVICECONNECTION_REMOTE_AUTHREALM--hono.deviceConnection.remote.authRealm
no
-
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_HTTP_KEY_PATH.Alternatively, the HONO_REGISTRY_HTTP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_HTTP_INSECURE_PORT--hono.registry.http.insecurePort
no
-
The insecure port the server should listen on for HTTP requests.See Port Configuration below for details.
HONO_REGISTRY_HTTP_INSECURE_PORT_BIND_ADDRESS--hono.registry.http.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure HTTP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_HTTP_INSECURE_PORT_ENABLED--hono.registry.http.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_REGISTRY_HTTP_INSECURE_PORT or the default HTTP port number (8080) if not set explicitly.See Port Configuration below for details.
HONO_REGISTRY_HTTP_KEY_PATH--hono.registry.http.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_HTTP_CERT_PATH. Alternatively, the HONO_REGISTRY_HTTP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_HTTP_KEY_STORE_PASSWORD--hono.registry.http.keyStorePassword
no
-
The password required to read the contents of the key store.
HONO_REGISTRY_HTTP_KEY_STORE_PATH--hono.registry.http.keyStorePath
Contributor
Author
lhotari
commented
Nov 23, 2020
@kaniyan thanks for reviewing.
Can you also please add yourself to the Copyright Holders section of the legal/src/main/resources/legal/NOTICE.md file?
done.
kaniyan
approved these changes
Nov 23, 2020
View changes
Copy link
Quote reply
Contributor
kaniyan
left a comment
LGTM
Hide details
View details
kaniyan
merged commit 11e3928
into
The IDs of the gateways that may act on behalf of the given device. This list may be obtained via the Device Registration API’s assert Device Registration operation.
Example of a request payload:
{
"gateway-ids": ["gw-1", "gw-2", "gw-3"]
}
Response Message Format
A response to a get command-handling adapter instances for device request contains the Standard Response Properties as well as the properties shown in the following table:
Name
Mandatory
Location
AMQP Type
Description
content-type
no
properties
string
MUST be set to application/json if the invocation of the operation was successful and the body of the response message contains payload as described below.
The result of a successful invocation is carried in a single Data section of the response message as a UTF-8 encoded string representation of a single JSON object. It is an error to include payload that is not of this type.
The response message JSON object has the following properties:
Name
Mandatory
JSON Type
Description
adapter-instances
yes
The virtual server’s domain name needs to be added to the certificate’s Subject Alternative Name (SAN) list in order for Hono to be able to
determine the key/certificate pair to use for the TLS handshake with the device.
Please refer to the vert.x SNI guide for details on how this works under the hood.
Hono’s protocol adapters then need to be configured with the server certificates and keys. In order to do so, the certificates and corresponding private
keys need to be added to a key store. Hono supports the JKS and PKCS12 key store formats for that purpose.
Once the key store has been created, Hono’s protocol adapters need to be configured with the path to the key store by means of the adapters’
KEY_STORE_PATH configuration variable. Please refer to the protocol adapter admin guides for details on how to
configure the key store path.
Enable SNI for Hono’s Protocol Adapters
Hono’s protocol adapters can be configured to support SNI by means of the SNI configuration variable. Please refer to the
protocol adapter admin guides for details on how to set this variable.
Verify Configuration
The setup can be verified by means of the command line tools that are part of OpenSSL.
Assuming that the MQTT protocol adapter’s IP address is 10.100.84.23, its secure endpoint is bound to port 31884 and it has
been configured with a certificate using domain name my-hono.eclipse.org, then the following command can be used to test
if a TLS secured connection with the adapter using that virtual host name can be established successfully:
openssl s_client -connect 10.100.84.23:31884 -servername my-hono.eclipse.org
Add this suggestion to a batch that can be applied as a single commit.
Applying suggestions on deleted lines is not supported.
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java
getEndpointUri(),
Buffer.buffer("hello"),
requestHeaders,
ResponsePredicate.status(HttpURLConnection.HTTP_BAD_REQUEST))
This comment has been minimized.
Sign in to view
sophokles73
Nov 23, 2020
Member
you mean HTTP adapter, right?
tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java
@@ -73,7 +73,7 @@
/**
* The default number of milliseconds to wait for a response to an AMQP 1.0 performative.
*/
public static final int DEFAULT_AMQP_TIMEOUT = 400;
public static final int DEFAULT_AMQP_TIMEOUT = 1000;
Name
Mandatory
Type
Default Value
Description
subject-dn
yes
string
-
The subject DN of the trusted root certificate in the format defined by RFC 2253.
public-key
yes
string
-
The Base64 encoded binary DER encoding of the trusted root certificate’s public key.
algorithm
no
string
RSA
The name of the public key algorithm. Supported values are RSA and EC.
auto-provisioning-enabled
no
boolean
false
If set to true, protocol adapters MAY request auto-provisioning of devices that authenticate with a client certificate issued by this CA. Otherwise, protocol adapters MUST NOT request auto-provisioning.
26
Eclipse Hono
Device Authentication Flow
MQTT Adapter Credentials
1. CONNECT
(username/password)
2. get (tenant-id, auth-id, mech)
3. verify credentials
4. ACCEPT
Device
⇐ hashed password
Verification of credentials is always responsibility of Protocol Adapter
27.
27
Eclipse Hono
Authentication
● handle authentication between components (Protocol Adapters,
Hono Messaging, …)
● used by clients/components for getting a token asserting …
○ subject’s identity
○ granted authorities
● services use the token to make authorization decisions on a client’s
request to read or write from/to a resource or to invoke a certain
operation
○ i.e. Hono Messaging checks if an Adapter may write telemetry data
enabled: false
# imageName contains the name (excluding registry)
# of the container image to use for the Kura adapter
imageName: eclipse/hono-adapter-kura
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "300Mi"
limits:
cpu: "1"
Stack Apps
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
site design / logo © 2020 Stack Exchange Inc; user contributions licensed under cc by-sa. rev 2020.11.23.38057
Stack Overflow works best with JavaScript enabled
}]
}
Name
Mandatory
JSON Type
Default
Description
type
yes
string
The credential type name, always hashed-password.
auth-id
yes
string
The identity that the device should be authenticated as.
pwd-hash
yes
string
The password hash (see table below for details).
salt
no
string
The Base64 encoding of the salt used in the password hash (see table below for details).
no
HONO_REGISTRY_AMQP_NATIVE_TLS_REQUIRED--hono.registry.amqp.nativeTlsRequired
no
false
The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM’s default SSL engine if not available. However, if set to true, the server will fail to start at all in this case.
HONO_REGISTRY_AMQP_PORT--hono.registry.amqp.port
no
5671
The secure port that the server should listen on for AMQP 1.0 connections.See Port Configuration below for details.
HONO_REGISTRY_AMQP_SECURE_PROTOCOLS--hono.registry.amqp.secureProtocols
no
TLSv1.2
A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the vert.x documentation for a list of supported protocol names.
HONO_REGISTRY_HTTP_AUTHENTICATION_REQUIRED--hono.registry.http.authenticationRequired
no
true
If set to true the HTTP endpoint of the Device Registry requires clients to authenticate when connecting to the Device Registry. The MongoDB based Device Registry currently supports basic authentication and the user credentials are to be stored in a MongoDB collection with name user. For more information on how to manage users please refer to Mongo Auth Provider.
HONO_REGISTRY_HTTP_BIND_ADDRESS--hono.registry.http.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure HTTP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_HTTP_CERT_PATH--hono.registry.http.certPath
no
-
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_HTTP_KEY_PATH.Alternatively, the HONO_REGISTRY_HTTP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
Commits
1
Checks
3
Files changed
27
Conversation
Copy link
Quote reply
Contributor
calohmn
commented
Nov 20, 2020
•
edited
This is for #2029.
This adds a org.eclipse.hono.adapter.client.command.CommandConsumerFactory implementation that uses the new Command Router component.
For the integration tests, a new maven profile command-router is added to let the tests run using the Command Router component.
The GitHub action workflow has been adapted to use that profile in the test-run that uses the jdbc device registry (so that the other test-runs still use the old command routing mechanism).
calohmn
added
enhancement
C&C
trusted certificate authority.
If the lookup succeeds, the tenant returned by the Tenant service is the tenant that the device belongs to.
The adapter verifies the device’s client certificate’s signature using the trust anchor registered for the tenant.
Finally, the adapter authenticates the client certificate using Hono’s credentials API. In this step, the adapter
uses the client certificate’s Subject DN (as authentication identifier) and x509-cert (for the credentials type)
in order to determine the device ID.
NB The AMQP adapter needs to be configured for TLS in order to support this mechanism.
Resource Limit Checks
The adapter performs additional checks regarding resource limits when a client tries to connect and/or send a message to the adapter.
Connection Limits
The adapter immediately closes a newly established connection with an amqp:unauthorized-access error if
the maximum number of connections per protocol adapter instance is reached, or
if the maximum number of simultaneously connected devices for the client’s tenant is reached.
Please refer to resource-limits for details.
Connection Duration Limits
The adapter immediately closes a newly established connection with an amqp:unauthorized-access error if the
connection duration limit that has been configured for
the client’s tenant is exceeded.
Message Limits
The adapter
immediately closes a newly established connection with an amqp:unauthorized-access error and
rejects any AMQP 1.0 message containing
by the client in the username, hashed-password as the type of secret and the MQTT client identifier as client-id in the request payload.
The examples below refer to devices 4711 and gw-1 of tenant DEFAULT_TENANT using auth-ids sensor1 and gw1 and corresponding passwords.
The example deployment as described in the Deployment Guides comes pre-configured with the corresponding entities in its device registry component.
NB There is a subtle difference between the device identifier (device-id) and the auth-id a device uses for authentication.
See Device Identity for a discussion of the concepts.
Resource Limit Checks
The adapter performs additional checks regarding resource limits when a client tries to connect and/or
send a message to the adapter.
Connection Limits
The adapter rejects a client’s connection attempt with return code
0x03 (Connection Refused: server unavailable), if the maximum number of connections per protocol adapter instance is reached
0x05 (Connection Refused: not authorized), if the maximum number of simultaneously connected devices for the tenant is reached.
Connection Duration Limits
The adapter rejects a client’s connection attempt with return code 0x05 (Connection Refused: not authorized), if the
connection duration limit that has been configured for the client’s tenant is exceeded.
Message Limits
The adapter
rejects a client’s connection attempt with return code 0x05 (Connection Refused: not authorized),
discards any MQTT PUBLISH packet containing telemetry data or an event that is sent by a client and
rejects any AMQP 1.0 message containing a command sent by a north bound application
if the message limit that has been configured for the device’s tenant is exceeded.
Connection Events
(optional) Error details, if status code is >= 400.
Status Codes:
200 (OK): The telemetry data has been accepted for processing. The response contains a command for the device to execute.
202 (Accepted): The telemetry data has been accepted for processing. Note that if the qos-level request header is omitted (at most once semantics),
this status code does not mean that the message has been delivered to any potential consumer. However, if the QoS level header is set to 1
(at least once semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with
this status code.
400 (Bad Request): The request cannot be processed. Possible reasons for this include:
The content type header is missing.
The request body is empty.
The QoS header value is invalid.
401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant connected to Hono.
This is the preferred way for devices to publish telemetry data. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default).
Examples
Publish some JSON data for device 4711:
HTTP/1.1 202 Accepted
content-length: 0
"period": {
"mode": "monthly"
}
}
}
In the days mode, the message limit check ensures that the data usage for the defined no-of-days does not exceed the max-bytes value. In the below sample configuration, the mode is configured as days and the accounting duration as 30 days. In this case the message limit check ensures that the data usage for every 30 days from 10.Jul.2019 (effective-since) does not exceed the 2GB limit.
"resource-limits": {
"data-volume": {
"effective-since": "2019-07-10T14:30:00Z",
"max-bytes": 2147483648,
"period": {
"mode": "days",
"no-of-days": 30
}
}
}
The server needs to be configured with a private key, a certificate holding the public key and a trust store in order to open a TLS secured port.
There are two alternative ways for setting the private key and certificate:
Setting the HONO_AUTH_AMQP_KEY_STORE_PATH and the HONO_AUTH_AMQP_KEY_STORE_PASSWORD variables in order to load the key & certificate from a password protected key store, or
setting the HONO_AUTH_AMQP_KEY_PATH and HONO_AUTH_AMQP_CERT_PATH variables in order to load the key and certificate from two separate PEM files in PKCS8 format.
In order to set the trust store, the HONO_AUTH_AMQP_TRUST_STORE_PATH variable needs to be set to a key store containing the trusted root CA certificates. The HONO_AUTH_AMQP_TRUST_STORE_PASSWORD variable needs to be set if the key store requires a pass phrase for reading its contents.
When starting up, the server will bind a TLS secured socket to the default secure AMQP port 5671. The port number can also be set explicitly using the HONO_AUTH_AMQP_PORT variable.
The HONO_AUTH_AMQP_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_AUTH_AMQP_INSECURE_PORT to a valid port number, or by
implicitly configuring the default AMQP port (5672) by simply setting HONO_AUTH_AMQP_INSECURE_PORT_ENABLED to true.
The server issues a warning on the console if HONO_AUTH_AMQP_INSECURE_PORT is set to the default secure AMQP port (5671).
The HONO_AUTH_AMQP_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally to the outside world).
Dual Port
In test setups and some production scenarios Hono server may be configured to open one secure and one insecure port at the same time.
This is achieved by configuring both ports correctly (see above). The server will fail to start if both ports are configured to use the same port number.
Since the secure port may need different visibility in the network setup compared to the secure port, it has it’s own binding address HONO_AUTH_AMQP_INSECURE_PORT_BIND_ADDRESS.
This can be used to narrow the visibility of the insecure port to a local network e.g., while the secure port may be visible worldwide.
Ephemeral Ports
The server may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Metrics Configuration
See Monitoring & Tracing Admin Guide for details on how to configure the reporting of metrics.
The username to use for authenticating to the server.
HONO_DEVICECONNECTION_AUTH_PASSWORD--hono.deviceConnection.authPassword
yes
-
The password to use for authenticating to the server.
In general, the service supports all configuration properties of the Infinispan Hotrod client using hono.deviceConnection instead of the infinispan.client.hotrod prefix.
Resource Limits Checker Configuration
The adapter can use metrics collected by a Prometheus server to enforce certain limits set at the tenant level like the overall number of connected devices allowed per tenant.
The following table provides an overview of the configuration variables and corresponding command line options for configuring the checker.
Environment VariableCommand Line Option
Mandatory
Default Value
Description
HONO_RESOURCELIMITS_PROMETHEUSBASED_HOST--hono.resourceLimits.prometheusBased.host
no
localhost
The host name or IP address of the Prometheus server to retrieve the metrics data from. This property needs to be set in order to enable the Prometheus based checks.
HONO_RESOURCELIMITS_PROMETHEUSBASED_PORT--hono.resourceLimits.prometheusBased.port
no
9090
The port of the Prometheus server to retrieve metrics data from.
HONO_RESOURCELIMITS_PROMETHEUSBASED_CACHEMINSIZE--hono.resourceLimits.prometheusBased.cacheMinSize
Events published by devices will usually be persisted by the AMQP Messaging Network in order to support deferred delivery to downstream consumers.
In most cases the AMQP Messaging Network can be configured with a maximum time-to-live to apply to the events so that the events will be removed
from the persistent store if no consumer has attached to receive the event before the message expires.
In order to support environments where the AMQP Messaging Network cannot be configured accordingly, the protocol adapter supports setting a
downstream event message’s ttl property based on the default ttl and max-ttl values configured for a tenant/device as described in the Tenant API.
Tenant specific Configuration
The adapter uses the Tenant API to retrieve tenant specific configuration for adapter type hono-kura-mqtt.
The following properties are (currently) supported:
Name
Type
Default Value
Description
enabled
boolean
true
If set to false the adapter will reject all data from devices belonging to the tenant.
devices to authenticate (which is the default).
Examples
The examples provided below make use of the coap-client command line tool which is part of the libcoap project.
Precompiled packages should be available for different Linux variants.
Publish some JSON data for device 4711 using default message type CON (at least once):
Note
coap-client only reports error response-codes, so the expected 2.04 response code will not be printed to the terminal.
Publish some JSON data for device 4711 using message type NON (at most once):
Publish some JSON data for device 4711, indicating that the device will wait for 10 seconds to receive the response:
{
"brightness": 87
}
Note
In the example above the response actually contains payload that should be used as input to a command to be executed by the device.
This is just for illustrative purposes. You will usually get an empty response because there is no downstream application attached which could
send any commands to the device.
Publish Telemetry Data (unauthenticated Device)
Method: PUT
Type:
CON: at least once delivery semantics
NON: at most once delivery semantics
Request Options:
(optional) content-format: The type of payload contained in the request body. Required, if request contains payload.
Query Parameters:
The insecure port will only be bound if the HONO_COAP_AUTHENTICATION_REQUIRED variable is set to false because CoAP authenticates clients (devices) as
part of the DTLS handshake. Thus, requiring devices to authenticate effectively rules out setting up a non-DTLS secured port.
Dual Port
The protocol adapter may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above. For this to work,
both ports must be configured to use different port numbers, otherwise startup will fail.
Ephemeral Ports
Both the secure as well as the insecure port numbers may be explicitly set to 0. The protocol adapter will then use arbitrary (unused) port numbers determined by the operating system during startup.
Authentication
The CoAP protocol is UDP based and as such uses the DTLS protocol to secure the communication between a client (device) and a server (adapter). The CoAP adapter also uses the DTLS handshake
to prove its identity to devices and to authenticate the devices themselves. The DTLS protocol allows for different cipher suites to be
used for doing so. These suites mainly differ from each other in the type of secret being used for proving the participants’ identity to each other.
One class of suites is based on a secret that is shared between the client and the server, very much like in a username/password based authentication scheme. This class of suites
is called pre-shared key or PSK-based and is very popular for use cases where the devices are very constrained regarding CPU and memory. Another class of cipher suites is based
on certificates which use asymmetric encryption for proving possession of the secret (the private key). The CoAP adapter supports cipher suites from both classes but only supports
elliptic curve cryptography (ECC) based keys for the latter class of cipher suites.
When enabling the secure port without configuring an ECC based key and certificate, the adapter will only use PSK based cipher suites for authentication.
When configuring an ECC based key and certificate, the adapter will also offer certificate based cipher suites to the client to use for authentication.
In any case the device’s credentials need to be registered with the device registry. Please refer to the Standard Credential Types
and the Device Registry Management API for additional information.
no
-
The port of the service to invoke for transforming uploaded messages. The <mapperName> needs to contain the service name as set in the mapper property of the device’s registration information.
HONO_MQTT_MAPPERENDPOINTS_<mapperName>_URI--hono.mqtt.mapperEndpoints.<mapperName>.uri
no
-
The URI of the service to invoke for transforming uploaded messages. The <mapperName> needs to contain the service name as set in the mapper property of the device’s registration information.
Nov 23, 2020
sophokles73
requested a review
from dejanb
Nov 23, 2020
sophokles73
requested a review
from calohmn
as a
code owner
Nov 23, 2020
sophokles73
added this to In progress
in 1.5.0
yes
-
The authentication realm for the SASL handshake when authenticating to the server.
HONO_DEVICECONNECTION_REMOTE_AUTHUSERNAME--hono.deviceConnection.remote.authUsername
yes
-
The username to use for authenticating to the server.
HONO_DEVICECONNECTION_REMOTE_AUTHPASSWORD--hono.deviceConnection.remote.authPassword
yes
-
The password to use for authenticating to the server.
In general, the service supports all configuration properties of the Infinispan Hotrod client using hono.deviceConnection.remote instead of the infinispan.client.hotrod prefix.
Embedded cache
The following table provides an overview of the configuration variables and corresponding command line options for configuring the embedded cache:
no
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_REGISTRY_HTTP_KEY_PATH and HONO_REGISTRY_HTTP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_REGISTRY_HTTP_PORT--hono.registry.http.port
no
8443
The secure port that the server should listen on for HTTP requests.See Port Configuration below for details.
HONO_REGISTRY_REST_TENANT_ID_PATTERN--hono.registry.rest.tenantIdPattern
no
^[a-zA-Z0-9-_\.]+$
The regular expression to use to validate tenant ID. Please refer to the java pattern documentation.Deprecated Use HONO_REGISTRY_HTTP_TENANT_ID_PATTERN instead.
HONO_REGISTRY_REST_DEVICE_ID_PATTERN--hono.registry.rest.deviceIdPattern
no
^[a-zA-Z0-9-_\.:]+$
The regular expression to use to validate device ID. Please refer to the java pattern documentation.Deprecated Use HONO_REGISTRY_HTTP_DEVICE_ID_PATTERN instead.
HONO_REGISTRY_REST_BIND_ADDRESS--hono.registry.rest.bindAddress
no
127.0.0.1
The IP address of the network interface that the secure HTTP port should be bound to.See Port Configuration below for details.Deprecated Use HONO_REGISTRY_HTTP_BIND_ADDRESS instead.
HONO_REGISTRY_REST_CERT_PATH--hono.registry.rest.certPath
no
-
eclipse:master
Nov 23, 2020
4 checks passed
4 checks passed
build (file)
Details
build (jdbc)
Details
build (mongodb)
Details
eclipsefdn/eca
The author(s) of the pull request is covered by necessary legal agreements in order to proceed!
Details
1.5.0
automation
moved this from In progress
to Done
Nov 23, 2020
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Reviewers
kaniyan
array
A non-empty array of JSON objects that represent the command-handling adapter instances along with the device or gateway id.
Each entry in the adapter-instances array has the following properties:
Name
Mandatory
JSON Type
Description
adapter-instance-id
yes
string
The ID of the protocol adapter instance handling command & control messages for the device given in the device-id property.
device-id
yes
string
The ID of the gateway or device that the protocol adapter instance given by the adapter-instance-id is handling command & control messages for. This ID is not necessarily the device_id given in the request message, it may be the ID of one of the gateways acting on behalf of the device.
An example of a response message with a single adapter instance result, returned for example if an adapter instance is registered for the given device:
{
"adapter-instances": [
{
"adapter-instance-id": "adapter-1",
"device-id": "4711"
}
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
This comment has been minimized.
Sign in to view
sophokles73
Nov 23, 2020
Member
please revert this change, we are already applying a factor > 1 to this value when running on test environment
sophokles73
changed the title
[#2288] Fixing device level QoS forwarding of events for HTTP adapter
[#2288] Add integration tests verifying forwarding of QoS level in downstream messages
Nov 23, 2020
sophokles73
added
the
enhancement
label
Nov 23, 2020
sophokles73
added this to In progress
in 1.5.0
via automation
Nov 23, 2020
sophokles73
NB CAs of the same tenant MAY share the same subject DN, e.g. allowing for the definition of overlapping validity periods.
However, CAs of different tenants MUST NOT share the same subject DN in order to allow for the unique look-up of a tenant by
the subject DN of one of its trusted CAs.
Examples
Below is an example payload for a response to a get request for tenant TEST_TENANT.
The tenant is configured with two trusted certificate authorities, each using a different public key algorithm.
Only one of them is configured to be used for auto-provisioning.
{
"tenant-id" : "TEST_TENANT",
"enabled" : true,
"trusted-ca": [{
"subject-dn": "CN=ca,OU=Hono,O=Eclipse",
"public-key": "PublicKey==",
"auto-provisioning-enabled": false,
"algorithm": "RSA"
}, {
"subject-dn": "CN=ca,OU=Hono,O=ACME Inc.",
"public-key": "ECKey==",
"auto-provisioning-enabled": true,
"algorithm": "EC"
}]
}
Adapter Configuration Format
The table below contains the properties which are used to configure a Hono protocol adapter:
Name
Mandatory
● Where an identity management system is already in place (e.g.
Keycloak) …
○ implement this API as a facade to the existing system
28.
28
Eclipse Hono
Command & Control
● used by applications to send commands to devices
● command execution can be “just in time” or “deferred”
○ just in time : command already executed, the response from device contains the
result
○ deferred : command not executed yet, the response from device specifies it’s
accepted; for long running operations the result will be provided later
DRAFT
29.
29
IoT : how to deploy ?
● “On premise” …
○ … maybe for a not so big solution
○ … ingesting few data and handling few devices
● “Cloud” …
○ … needs for more scalability
○ … don’t want to manage the infrastructure
● “Hybrid” …
○ … needs for processing at the edge
memory: "512Mi"
svc:
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
# adapter's container filesystem. The files from the secret(s) can
# then be used in e.g. the service client specs.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the adapter has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the adapter's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/kura-adapter-config/
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
string
sha-256
NB It is strongly recommended to use salted password hashes only. Furthermore, the salt should be unique per user and password, so no lookup table or rainbow table attacks can be used to crack the salt-hashed password.
Whenever a password is updated for a user, the salt should change as well.
NB The example above does not contain any of the not-before, not-after and enabled properties, thus the credentials can be used at any time according to the rules defined in Credential Verification.
Name
Salt Usage
Salt Location
Password Hash Format
sha-256
optional
salt field
sha-512
optional
salt field
bcrypt
mandatory
pwd-hash value
Pre-Shared Key
A credential type for storing a Pre-shared Key as used in (D)TLS handshakes.
HONO_REGISTRY_HTTP_DEVICE_ID_PATTERN--hono.registry.http.deviceIdPattern
no
^[a-zA-Z0-9-_\.:]+$
The regular expression to use to validate device ID. Please refer to the java pattern documentation.
HONO_REGISTRY_HTTP_INSECURE_PORT--hono.registry.http.insecurePort
no
-
The insecure port the server should listen on for HTTP requests.See Port Configuration below for details.
HONO_REGISTRY_HTTP_INSECURE_PORT_BIND_ADDRESS--hono.registry.http.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure HTTP port should be bound to.See Port Configuration below for details.
HONO_REGISTRY_HTTP_INSECURE_PORT_ENABLED--hono.registry.http.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_REGISTRY_HTTP_INSECURE_PORT or the default AMQP port number (5672) if not set explicitly.See Port Configuration below for details.
HONO_REGISTRY_HTTP_KEY_PATH--hono.registry.http.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_HTTP_CERT_PATH. Alternatively, the HONO_REGISTRY_HTTP_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.
HONO_REGISTRY_HTTP_KEY_STORE_PASSWORD--hono.registry.http.keyStorePassword
no
-
The password required to read the contents of the key store.
labels
Nov 20, 2020
calohmn
added this to the 1.5.0 milestone
Nov 20, 2020
calohmn
requested review from
dejanb and
sophokles73
as
code owners
Nov 20, 2020
calohmn
added this to In progress
in 1.5.0
via automation
Nov 20, 2020
calohmn
force-pushed the
bosch-io:PR/use_cmdrouter_in_adapters
branch
6 times, most recently
from
fb6b499
to
telemetry data or an event uploaded by a client
a command sent by a north bound application
if the message limit that has been configured for the device’s tenant is exceeded.
Connection Events
The adapter can emit Connection Events for client connections being established and/or terminated.
Please refer to the common configuration options
for details regarding how to enable this behavior.
The adapter includes the client’s AMQP container-id as the Connection Event’s remote-id.
Link Establishment
The AMQP adapter supports the Anonymous Terminus for Message Routing specification
and requires clients to create a single sender link using the null target address for publishing all types of messages to the AMQP adapter.
Using AT MOST ONCE delivery semantics, the client will not wait for the message to be accepted and settled by the downstream consumer. However, with AT LEAST ONCE, the client sends the message and waits for the message to be delivered to and accepted by the downstream consumer. If the message cannot be delivered due to a failure, the client will be notified.
The client indicates its preferred message delivery mode by means of the snd-settle-mode and rcv-settle-mode fields of its attach frame during link establishment. Clients should use mixed as the snd-settle-mode and first as the rcv-settle-mode in order to be able to use the same link for sending all types of messages using different delivery semantics as described in the following sections.
Error Handling
The AMQP adapter distinguishes between two types of errors when a message is published using at least once:
An error caused by the client side, e.g invalid message address, content-type, adapter disabled for tenant etc.
An error caused by the server side, e.g no downstream consumers registered, downstream connection loss etc.
For a client side error, the adapter settles the message transfer with the rejected outcome and provides an error description in the corresponding disposition frame. In the case of a server-side error, the adapter settles the message with the released outcome, indicating to the client that the message itself was OK but it cannot be delivered due to a failure beyond the control of the client. In the latter case, a client may attempt to re-send the message unaltered.
AMQP Command-line Client
For purposes of demonstrating the usage of the AMQP adapter, the Hono CLI Module contains an AMQP command-line client for interacting with the AMQP adapter. The client can be used to send telemetry or events and to receive/respond to command request messages.
The command-line client supports the following parameters (with default values):
The adapter can emit Connection Events for client connections being established and/or terminated.
Please refer to the common configuration options
for details regarding how to enable this behavior.
The adapter includes the client identifier from the client’s MQTT CONNECT packet as the Connection Event’s remote-id.
Publishing Telemetry Data
The MQTT adapter supports the publishing of telemetry data by means of MQTT PUBLISH packets using either QoS 0 or QoS 1.
Using QoS 1 will result in the adapter sending an MQTT PUBACK packet to the client once the message has been settled with the accepted outcome by the AMQP 1.0 Messaging Network.
This requires that
the AMQP 1.0 Messaging Network has capacity to process telemetry messages for the client’s tenant and
the messages published by the client comply with the format defined by the Telemetry API.
The protocol adapter checks the configured message limit before accepting any telemetry messages. If the message limit is exceeded or the incoming telemetry message cannot be processed, the connection to the client is closed.
Publish Telemetry Data (authenticated Device)
Topic: telemetry or t
Authentication: required
Payload:
(required) Arbitrary payload
This is the preferred way for devices to publish telemetry data. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default). When using this topic, the MQTT adapter determines the device’s tenant and device identity as part of the authentication process.
Example
Publish some JSON data for device 4711:
Publish some JSON data for device 4711 using a client certificate for authentication:
# in base directory of Hono repository:
NB The example above assumes that the MQTT adapter is configured for TLS and the secure port is used.
Publish Telemetry Data (unauthenticated Device)
Authentication: none
Publish some JSON data for device 4711 using at least once QoS:
HTTP/1.1 202 Accepted
content-length: 0
Publish some JSON data for device 4711, indicating that the device will wait for 10 seconds to receive the response:
HTTP/1.1 200 OK
hono-command: set
hono-cmd-req-id: 1010a7249aa5-f742-4376-8458-bbfc88c72d92
content-length: 23
{
"brightness": 87
}
Publish some JSON data for device 4711 using a client certificate for authentication:
# in base directory of Hono repository:
HTTP/1.1 202 Accepted
content-length: 0
NB The example above assumes that the HTTP adapter is configured for TLS and the secure port is used.
Publish Telemetry Data (unauthenticated Device)
Method: PUT
Request Headers:
(required) content-type: The type of payload contained in the request body.
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) qos-level: The QoS level for publishing telemetry messages. The adapter supports at most once (0) and at least once (1) QoS levels. The default value of 0 is assumed if this header is omitted.
Request Body:
(required) Arbitrary payload encoded according to the given content type.
no
20
The minimum size of the cache to store the metrics data retrieved from the Prometheus server. The cache is used for storing the current amount of data exchanged with devices of tenants.
HONO_RESOURCELIMITS_PROMETHEUSBASED_CACHEMAXSIZE--hono.resourceLimits.prometheusBased.cacheMaxSize
no
1000
The maximum size of the cache to store the metrics data retrieved from the Prometheus server.
HONO_RESOURCELIMITS_PROMETHEUSBASED_CACHETIMEOUT--hono.resourceLimits.prometheusBased.cacheTimeout
no
15
The number of seconds after which the cached metrics data should be considered invalid.
HONO_RESOURCELIMITS_PROMETHEUSBASED_QUERYTIMEOUT--hono.resourceLimits.prometheusBased.queryTimeout
no
500
The number of milliseconds after which a request to a Prometheus server is closed. Setting zero or a negative value disables the timeout.
In addition to the properties listed above, the resource limit checker also supports the properties listed below as documented in the
Hono Client Configuration. These properties might be useful if a reverse proxy in front of
the Prometheus server requires the client to use TLS and/or provide credentials for authentication.
HONO_RESOURCELIMITS_PROMETHEUSBASED_CREDENTIALSPATH
HONO_RESOURCELIMITS_PROMETHEUSBASED_HOSTNAMEVERIFICATIONREQUIRED
HONO_RESOURCELIMITS_PROMETHEUSBASED_KEYPATH
HONO_RESOURCELIMITS_PROMETHEUSBASED_KEYSTOREPASSWORD
HONO_RESOURCELIMITS_PROMETHEUSBASED_KEYSTOREPATH
HONO_RESOURCELIMITS_PROMETHEUSBASED_PASSWORD
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) empty: Marks the request as an empty notification.
Request Body:
(optional) Arbitrary payload encoded according to the given content type. Maybe empty, if URI-query: empty is provided.
Response Options:
(optional) content-format: A media type describing the semantics and format of payload contained in the response body.
This option will only be present if the response contains a command to be executed by the device which requires input data.
Note that this option will be empty if the media type contained in the command (AMQP) message’s content-type property cannot
be mapped to one of the registered CoAP content-format codes.
(optional) location-query: The hono-command query parameter contains the name of the command to execute.
This option will only be present if the response contains a command to be executed by the device.
(optional) location-path: The location path is command for one-way-commands and
command_response/<command-request-id> for commands expecting a response.
In the latter case, the location-path option contains exactly the URI-path that the device must use when sending its
response to the command.
This option will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (Content).
(optional) Error details, if status code is >= 4.00.
Response Codes:
2.04 (Changed): The data in the request body has been accepted for processing. The response may contain a command for the device to execute.
Note that if the message type is NON (at most once semantics), this status code does not mean that the message has been
delivered to any potential consumer (yet). However, if the message type is CON (at least once semantics), then the adapter waits
for the message to be delivered and accepted by a downstream consumer before responding with this status code.
4.00 (Bad Request): The request cannot be processed. Possible reasons include:
via automation
Nov 23, 2020
calohmn
reviewed
Nov 23, 2020
View changes
...arkus/src/main/java/org/eclipse/hono/service/quarkus/AbstractProtocolAdapterApplication.java
Outdated
LOG.debug(deviceConnectionCacheConfig.toString());
LOG.debug(config.deviceConnection.toString());
Comment on lines
228
to
229
This comment has been minimized.
Sign in to view
calohmn
Nov 23, 2020
Contributor
Was that intended to be kept here? If so, maybe put some more context info in the log output?
This comment has been minimized.
hono.device-connection.embedded.configuration-file
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_DEVICECONNECTION_EMBEDDED_CONFIGURATIONFILE--hono.deviceConnection.embedded.configurationFile
yes
-
The absolute path to an Infinispan configuration file. Also see the Infinispan Configuration Schema.
Authentication Service Connection Configuration
The Device Connection component requires a connection to an implementation of Hono’s Authentication API in order to authenticate and authorize client requests.
The connection is configured according to Hono Client Configuration
can be ignored.
In addition to the standard client configuration properties, following properties need to be set for the connection:
Environment VariableCommand Line Option
Mandatory
Default
Description
HONO_AUTH_VALIDATION_CERT_PATH--hono.auth.validation.certPath
no
-
The absolute path to the PEM file containing the public key that the service should use for validating tokens issued by the Authentication service. Alternatively, a symmetric key can be used for validating tokens by setting the HONO_AUTH_VALIDATION_SHARED_SECRET variable. If none of these variables is set, the service falls back to the key indicated by the HONO_AUTH_CERT_PATH variable. If that variable is also not set, startup of the service fails.
HONO_AUTH_VALIDATION_SHARED_SECRET--hono.auth.validation.sharedSecret
The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_REST_KEY_PATH.Alternatively, the HONO_REGISTRY_REST_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.Deprecated Use HONO_REGISTRY_HTTP_CERT_PATH instead.
HONO_REGISTRY_REST_INSECURE_PORT--hono.registry.rest.insecurePort
no
-
The insecure port the server should listen on for HTTP requests.See Port Configuration below for details.Deprecated Use HONO_REGISTRY_HTTP_INSECURE_PORT instead.
HONO_REGISTRY_REST_INSECURE_PORT_BIND_ADDRESS--hono.registry.rest.insecurePortBindAddress
no
127.0.0.1
The IP address of the network interface that the insecure HTTP port should be bound to.See Port Configuration below for details.Deprecated Use HONO_REGISTRY_HTTP_INSECURE_PORT_BIND_ADDRESS instead.
HONO_REGISTRY_REST_INSECURE_PORT_ENABLED--hono.registry.rest.insecurePortEnabled
no
false
If set to true the server will open an insecure port (not secured by TLS) using either the port number set via HONO_REGISTRY_REST_INSECURE_PORT or the default HTTP port number (8080) if not set explicitly.See Port Configuration below for details.Deprecated Use HONO_REGISTRY_HTTP_INSECURE_PORT_ENABLED instead.
HONO_REGISTRY_REST_KEY_PATH--hono.registry.rest.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with HONO_REGISTRY_REST_CERT_PATH. Alternatively, the HONO_REGISTRY_REST_KEY_STORE_PATH option can be used to configure a key store containing both the key as well as the certificate.Deprecated Use HONO_REGISTRY_HTTP_KEY_PATH instead.
HONO_REGISTRY_REST_KEY_STORE_PASSWORD--hono.registry.rest.keyStorePassword
no
-
The password required to read the contents of the key store.Deprecated Use HONO_REGISTRY_HTTP_KEY_STORE_PASSWORD instead.
HONO_REGISTRY_REST_KEY_STORE_PATH--hono.registry.rest.keyStorePath
no
dejanb
sophokles73
Assignees
No one assigned
Labels
JDBC Device Registry
bug
Projects
1.5.0
Done
Milestone
1.5.0
Linked issues
Successfully merging this pull request may close these issues.
None yet
2 participants
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Add this suggestion to a batch that can be applied as a single commit.
Applying suggestions on deleted lines is not supported.
]
}
An example of a response message with multiple contained adapter instances, returned for example if no adapter instance is registered for the given device or its last used gateway, and therefore a list of all adapter instances for the gateways of the device is returned:
{
"adapter-instances": [
{
"adapter-instance-id": "adapter-1",
"device-id": "gw-1"
},
{
"adapter-instance-id": "adapter-1",
"device-id": "gw-2"
}
]
}
The response message’s status property may contain the following codes:
Code
Description
200
OK, the payload contains the adapter instances.
400
Bad Request, the request message does not contain all required information/properties.
404
Not Found, there is no command-handling adapter instance assigned to the device.
Implementors of this API may also return a 404 status code in order to indicate that no device with the given identifier exists for the given tenant. However, performing such a check is optional.
added this to the 1.5.0 milestone
Nov 23, 2020
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Reviewers
sophokles73
Assignees
No one assigned
Labels
enhancement
Projects
1.5.0
In progress
Milestone
1.5.0
Linked issues
Successfully merging this pull request may close these issues.
None yet
2 participants
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
JSON Type
Default Value
Description
type
yes
string
-
The type of the adapter which this configuration belongs to.
enabled
no
boolean
false
If set to false the tenant is not allowed to receive / send data utilizing the given adapter.
device-authentication-required
no
boolean
true
If set to false, devices are not required to authenticate with the adapter before sending / receiving data.
Protocol adapters SHOULD use the configuration properties set for a tenant when interacting with devices of that tenant, e.g. in order to make authorization decisions etc.
The JSON object MAY contain an arbitrary number of additional members with arbitrary names of either scalar or complex type.
This allows for future well-known additions and also allows to add further information which might be relevant to a custom adapter only.
Resource Limits Configuration Format
The table below contains the properties which are used to configure a tenant’s resource limits:
Name
Mandatory
○ … needs for not making sensible data public
30.
30
Azure Container Service
● A containers hosting solution
● Scale and orchestrate using …
○ Kubernetes
○ Docker Swarm
○ DC/OS
● Deploying a cluster using Azure CLI / portal
○ Resource group with VMs, load balancer, ...
● Managing directly your preferred “orchestrator”
○ ACS provides you “only” the infrastructure
31.
31
Azure & OpenShift
● OpenShift Origin
○ the upstream open source project
● OpenShift Container Platform
○ the Red Hat productized version
○ enterprise grade container platform +
32.
32
Amazon EC2
● Spinning up virtual machines …
# http contains configuration properties for the adapter's
# exposed MQTT endpoints.
# If not set, the adapter by default exposes the secure and insecure ports
# using an example key and certificate.
kura:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the adapter's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the adapter's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
lora:
# enabled indicates if Hono's Lora adapter should be deployed.
enabled: false
# imageName contains the name (excluding registry)
# of the container image to use for the LoRa adapter
Example:
{
"device-id": "4711",
"type": "psk",
"auth-id": "little-sensor2",
"secrets": [{
"key": "AQIDBAUGBwg="
}]
}
Name
Mandatory
JSON Type
Description
type
yes
string
The credential type name, always psk.
auth-id
yes
string
The PSK identity.
key
yes
HONO_REGISTRY_HTTP_KEY_STORE_PATH--hono.registry.http.keyStorePath
no
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_REGISTRY_HTTP_KEY_PATH and HONO_REGISTRY_HTTP_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.
HONO_REGISTRY_HTTP_PORT--hono.registry.http.port
no
5671
The secure port that the server should listen on for HTTP requests.See Port Configuration below for details.
HONO_REGISTRY_HTTP_TENANT_ID_PATTERN--hono.registry.http.tenantIdPattern
no
^[a-zA-Z0-9-_\.]+$
The regular expression to use to validate tenant ID. Please refer to the java pattern documentation.
HONO_REGISTRY_SVC_CACHE_MAX_AGE--hono.registry.svc.cacheMaxAge
no
180
The maximum period of time (seconds) that information returned by the service’s operations may be cached for.
HONO_REGISTRY_SVC_COLLECTION_NAME--hono.registry.svc.collectionName
no
devices
The name of the MongoDB collection where the server stores registered device information.
HONO_REGISTRY_SVC_MAX_DEVICES_PER_TENANT--hono.registry.svc.maxDevicesPerTenant
no
-1
The number of devices that can be registered for each tenant. It is an error to set this property to a value < -1. The value -1 indicates that no limit is set.
HONO_REGISTRY_SVC_MODIFICATION_ENABLED--hono.registry.svc.modificationEnabled
aa5f662
Nov 20, 2020
sophokles73
reviewed
Nov 23, 2020
View changes
services/command-router/src/main/resources/logback-spring.xml
Outdated
Show resolved
Hide resolved
tests/pom.xml
<alias>command-router</alias>
<build>
<imagePullPolicy>IfNotPresent</imagePullPolicy>
This comment has been minimized.
Sign in to view
sophokles73
Nov 23, 2020
Member
we should also skip building the image if the command router is disabled ...
👍
1
--spring.profiles.active=amqp-send: Profile for sending telemetry data or events to Hono.
--spring.profiles.active=amqp-command: Profile for receiving and responding to command request messages.
--message.address: The AMQP 1.0 message address (default: telemetry)
--hono.client.host: The host name that the AMQP adapter is running on (default: localhost)
--hono.client.port: The port that the adapter is listening for incoming connections (default: 5672)
To run the client to send a telemetry message to Hono, open a terminal and execute the following:
# in directory: hono/cli/target/
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-send --hono.client.username=sensor1@DEFAULT_TENANT --hono.client.password=hono-secret
Accepted{}
The client prints the outcome of the operation to standard out. The outcome above (Accepted) indicates that the request to upload the data has succeeded.
NB
There are two JAR files in the hono/cli/target directory. The JAR to use for the client is the hono-cli-$VERSION-exec.jar and not the hono-cli-$VERSION.jar file. Running the latter will not work and will output the message: no main manifest attribute, in hono-cli-$VERSION.jar
Publishing Telemetry Data
The client indicates the delivery mode to use when uploading telemetry messages by means of the settled and rcv-settle-mode properties of the AMQP transfer frame(s) it uses for uploading the message. The AMQP adapter will accept messages using a delivery mode according to the following table:
settled
rcv-settle-mode
Delivery semantics
false
first
The adapter will forward the message to the downstream AMQP 1.0 Messaging Network and will forward any AMQP disposition frame received from the AMQP 1.0 Messaging Network to the client as is. It is up to the client’s discretion if and how it processes the disposition frame. The adapter will accept any re-delivered message. Sending unsettled messages allows for clients to implement either AT LEAST ONCE or AT MOST ONCE delivery semantics, depending on whether a client actually waits for and considers the disposition frames it receives from the adapter or not. This is the recommended mode for uploading telemetry data.
true
first
The adapter will acknowledge and settle any received message spontaneously before forwarding it to the downstream AMQP 1.0 Messaging Network. The adapter will ignore any AMQP disposition frames it receives from the AMQP 1.0 Messaging Network. Sending pre-settled messages allows for clients to implement AT MOST ONCE delivery semantics only. This is the fastest mode of delivery but has the drawback of less reliable end-to-end flow control and potential loss of messages without notice.
All other combinations are not supported by the adapter and will result in the message being ignored (pre-settled) or rejected (unsettled).
Payload:
(required) Arbitrary payload
This topic can be used by devices that have not authenticated to the protocol adapter. Note that this requires the
HONO_MQTT_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Publish some JSON data for device 4711:
Publish Telemetry Data (authenticated Gateway)
Authentication: required
Payload:
(required) Arbitrary payload
This topic can be used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. In this case the credentials provided by the gateway during connection establishment with the protocol adapter are used to authenticate the gateway whereas the parameters from the topic name are used to identify the device that the gateway publishes data for.
The protocol adapter checks the gateway’s authority to publish data on behalf of the device implicitly by means of retrieving a registration assertion for the device from the configured Device Registration service.
Examples
Publish some JSON data for device 4712 via gateway gw-1:
NB The example above assumes that a gateway device with ID gw-1 has been registered with hashed-password credentials with auth-id gw and password gw-secret.
Publishing Events
The MQTT adapter supports the publishing of events by means of MQTT PUBLISH packets using QoS 1 only.
The adapter will send an MQTT PUBACK packet to the client once the event has been settled with the accepted outcome by the AMQP 1.0 Messaging Network.
This requires that
the AMQP 1.0 Messaging Network has capacity to process events for the client’s tenant and
the events published by the client comply with the format defined by the Event API.
The protocol adapter checks the configured message limit before accepting any event messages. If the message limit is exceeded or the incoming event message cannot be processed, the connection to the client is closed.
The devices can optionally indicate a time-to-live duration for event messages by setting the hono-ttl property explicitly in the property-bag. The property-bag is an optional collection of properties intended for the receiver of the message. A property bag is only allowed at the very end of a topic. It always starts with a /? character, followed by pairs of URL encoded property names and values that are separated by &. For example, a property bag containing two properties seqNo and importance looks like this: /topic/name/?seqNo=10034&importance=high.
The MQTT adapter currently does not use any properties except hono-ttl.
Response Headers:
(optional) content-type: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.
(optional) hono-command: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-req-id: An identifier that the device must include in its response to a command. This header will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.
(optional) Error details, if status code is >= 400.
Status Codes:
200 (OK): The telemetry data has been accepted for processing. The response contains a command for the device to execute.
202 (Accepted): The telemetry data has been accepted for processing. Note that if the qos-level request header is omitted (at most once semantics),
this status code does not mean that the message has been delivered to any potential consumer. However, if the QoS level header is set to 1
(at least once semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with
this status code.
400 (Bad Request): The request cannot be processed. Possible reasons for this include:
The content type header is missing.
The request body is empty.
The QoS header value is invalid.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
HONO_RESOURCELIMITS_PROMETHEUSBASED_SECUREPROTOCOLS
HONO_RESOURCELIMITS_PROMETHEUSBASED_TLSENABLED
HONO_RESOURCELIMITS_PROMETHEUSBASED_TRUSTSTOREPATH
HONO_RESOURCELIMITS_PROMETHEUSBASED_TRUSTSTOREPASSWORD
HONO_RESOURCELIMITS_PROMETHEUSBASED_USERNAME
Connection Event Producer Configuration
Some of the protocol adapters report the establishment and termination of a connection with a device by means of a
Connection Event Producer.
The producer being used by the adapter can be configured as follows:
Environment VariableCommand Line Option
Mandatory
Default Value
Description
HONO_CONNECTIONEVENTS_PRODUCER--hono.connectionEvents.producer
no
logging
The type of connection event producer to use for reporting the establishment/termination of device connections. Supported values arenone - No information is reported at all.logging - All information is reported at INFO level via the logging framework.events - All information is being sent downstream as Connection Events.
HONO_CONNECTIONEVENTS_LOGLEVEL--hono.connectionEvents.logLevel
no
info
The level to log connection information at. Supported values are debug and info.
The events based connection event producer sets the TTL of event messages that it emits to the max TTL configured at the tenant level.
the request body is empty and the URI-query option doesn’t contain the empty parameter
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant
connected to Hono.
This resource MUST be used by devices that have not authenticated to the protocol adapter. Note that this requires the
HONO_COAP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Publish some JSON data for device 4711 using default message type CON (at least once):
Publish some JSON data for device 4711 using message type NON (at most once):
Publish some JSON data for device 4711, indicating that the device will wait for 10 seconds to receive the response:
{
"brightness": 87
}
Publish Telemetry Data (authenticated Gateway)
Method: PUT
Type:
CON: at least once delivery semantics
NON: at most once delivery semantics
Sign in to view
sophokles73
Nov 23, 2020
Author
Member
I have removed the log statements
dejanb
approved these changes
Nov 23, 2020
View changes
Copy link
Quote reply
Contributor
dejanb
left a comment
LGTM
Support using Device Connection cache client with Quarkus adapters
…
Loading status checks…
c2ab889
The Quarkus based adapters now also support connecting to a remote cache
no
-
A string to derive a symmetric key from which is used for validating tokens issued by the Authentication service. The key is derived from the string by using the bytes of the String’s UTF8 encoding. When setting the validation key using this variable, the Authentication service must be configured with the same key. Alternatively, an asymmetric key pair can be used for validating (and signing) by setting the HONO_AUTH_SIGNING_CERT_PATH variable. If none of these variables is set, startup of the service fails.
Metrics Configuration
See Monitoring & Tracing Admin Guide for details on how to configure the reporting of metrics.
-
The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the HONO_REGISTRY_REST_KEY_PATH and HONO_REGISTRY_REST_CERT_PATH options need to be set in order to enable TLS secured connections with clients. The key store format can be either JKS or PKCS12 indicated by a .jks or .p12 file suffix respectively.Deprecated Use HONO_REGISTRY_HTTP_KEY_STORE_PATH instead.
HONO_REGISTRY_REST_PORT--hono.registry.rest.port
no
8443
The secure port that the server should listen on for HTTP requests.See Port Configuration below for details.Deprecated Use HONO_REGISTRY_HTTP_PORT instead.
HONO_REGISTRY_SVC_CACHE_MAX_AGE--hono.registry.svc.cacheMaxAge
no
180
The maximum period of time (seconds) that information returned by the service’s operations may be cached for.
HONO_REGISTRY_SVC_FILENAME--hono.registry.svc.filename
no
/var/lib/hono/device-registry/device-identities.json
The path to the file where the server stores identities of registered devices. Hono tries to read device identities from this file during start-up and writes out all identities to this file periodically if property HONO_REGISTRY_SVC_SAVE_TO_FILE is set to true.Please refer to Device Identities File Format for details regarding the file’s format.
HONO_REGISTRY_SVC_MAX_DEVICES_PER_TENANT--hono.registry.svc.maxDevicesPerTenant
no
100
The number of devices that can be registered for each tenant. It is an error to set this property to a value <= 0.
HONO_REGISTRY_SVC_MODIFICATION_ENABLED--hono.registry.svc.modificationEnabled
no
true
When set to false the device information contained in the registry cannot be updated nor removed from the registry.
HONO_REGISTRY_SVC_RECEIVER_LINK_CREDIT--hono.registry.svc.receiverLinkCredit
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
For status codes indicating an error (codes in the 400 - 499 range) the message body MAY contain a detailed description of the error that occurred.
Standard Message Properties
Due to the nature of the request/response message pattern of the operations of the Device Connection API, there are some standard properties shared by all of the request and response messages exchanged as part of the operations.
Standard Request Properties
The following table provides an overview of the properties shared by all request messages regardless of the particular operation being invoked.
Name
Mandatory
Location
AMQP Type
Description
subject
yes
properties
string
MUST be set to the value defined by the particular operation being invoked.
correlation-id
no
properties
message-id
MAY contain an ID used to correlate a response message to the original request. If set, it is used as the correlation-id property in the response, otherwise the value of the message-id property is used. Either this or the message-id property MUST be set.
message-id
no
properties
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Add this suggestion to a batch that can be applied as a single commit.
Applying suggestions on deleted lines is not supported.
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
JSON Type
Default Value
Description
max-connections
no
number
-1
The maximum number of concurrent connections allowed from devices of this tenant. The default value -1 indicates that no limit is set.
max-ttl
no
number
-1
The maximum time-to-live (in seconds) to use for events published by devices of this tenant. Any default TTL value specified at either the tenant or device level will be limited to the max value specified here. If this property is set to a value greater than -1 and no default TTL is specified for a device, the max value will be used for events published by the device. A value of -1 (the default) indicates that no limit is set. Note that this property contains the TTL in seconds whereas the AMQP 1.0 specification defines a message’s ttl header to use milliseconds.
connection-duration
no
object
-
The maximum connection duration allowed for the given tenant. Refer to Connection Duration Configuration Format for details.
data-volume
no
object
-
The maximum data volume allowed for the given tenant. Refer to Data Volume Configuration Format for details.
Protocol adapters SHOULD use the max-connections property to determine if a device’s connection request should be accepted or rejected.
Protocol adapters SHOULD use the max-ttl property to determine the effective time-to-live for events published by devices as follows:
○ for making a cluster
● Providing …
○ Docker and …
○ … Kubernetes or OpenShift …
○ … or just Docker using Swarm mode
+
33.
Resources
33
● Eclipse Hono : https://www.eclipse.org/hono/
● Eclipse IoT : https://iot.eclipse.org/
● Qpid Dispatch Router :
http://qpid.apache.org/components/dispatch-router/
● ActiveMQ Artemis : https://activemq.apache.org/artemis/
● EnMasse : http://enmasse.io/
● Azure Container Service :
https://azure.microsoft.com/en-us/services/container-service/
● OpenShift on Azure : http://aka.ms/openshift
34.
Thank you ! Questions ?
Recommended
Azure Service Bus : under the hood
Paolo Patierno
MQTT on devices : geolocation in the IoT world
imageName: eclipse/hono-adapter-lora-vertx
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "300Mi"
limits:
cpu: "1"
memory: "512Mi"
svc:
string
The Base64 encoded bytes representing the shared (secret) key.
NB The example above does not contain any of the not-before, not-after and enabled properties, thus the credentials can be used at any time according to the rules defined in Credential Verification.
X.509 Certificate
A credential type for storing the RFC 2253 formatted subject DN of a client certificate that is used to authenticate the device as part of a (D)TLS handshake.
Example:
{
"device-id": "4711",
"type": "x509-cert",
"auth-id": "CN=device-1,O=ACME Corporation",
"secrets": [{}]
}
Name
Mandatory
JSON Type
Description
type
yes
string
The credential type name, always x509-cert.
auth-id
yes
string
The subject DN of the client certificate in the format defined by RFC 2253.
no
true
When set to false the device information contained in the registry cannot be updated nor removed from the registry.
HONO_REGISTRY_SVC_RECEIVER_LINK_CREDIT--hono.registry.svc.receiverLinkCredit
no
100
The number of credits to flow to a client connecting to the Device Registration endpoint.
HONO_TENANT_SVC_CACHE_MAX_AGE--hono.tenant.svc.cacheMaxAge
no
180
The maximum period of time (seconds) that information returned by the service’s operations may be cached for.
HONO_TENANT_SVC_COLLECTION_NAME--hono.tenant.svc.collectionName
no
tenants
The name of the MongoDB collection where the server stores tenants information.
HONO_TENANT_SVC_MODIFICATION_ENABLED--hono.tenant.svc.modificationEnabled
no
true
When set to false the tenants contained in the registry cannot be updated nor removed.
HONO_TENANT_SVC_RECEIVER_LINK_CREDIT--hono.tenant.svc.receiverLinkCredit
no
100
The number of credits to flow to a client connecting to the Tenant endpoint.
The variables only need to be set if the default value does not match your environment.
tests/src/test/resources/commandrouter/logback-spring.xml
Outdated
<logger name="org.eclipse.hono" level="DEBUG"/>
<logger name="org.eclipse.hono.client" level="TRACE"/>
<logger name="org.eclipse.hono.adapter.client" level="TRACE"/>
<logger name="org.eclipse.hono.connection" level="TRACE"/>
<logger name="org.eclipse.hono.commandrouter" level="TRACE"/>
<logger name="org.eclipse.hono.service" level="TRACE"/>
<!-- <springProfile name="trace">-->
<!-- <logger name="org.eclipse.hono.commandrouter" level="TRACE"/>-->
<!-- <logger name="org.eclipse.hono" level="DEBUG"/>-->
<!-- </springProfile>-->
<!-- <springProfile name="dev">-->
<!-- <logger name="org.eclipse.hono" level="DEBUG"/>-->
<!-- </springProfile>-->
<!-- <springProfile name="prod">-->
<!-- <logger name="org.eclipse.hono" level="INFO"/>-->
<!-- </springProfile>-->
Comment on lines
43
to
55
Publish Telemetry Data (authenticated Device)
The AMQP adapter supports publishing of telemetry data to Hono’s Telemetry API. Telemetry messages can be published using either AT LEAST ONCE or AT MOST ONCE delivery semantics.
Message Address: telemetry or t
This refers to the to property of the message.
Settlement Mode: presettled (AT MOST ONCE) or unsettled (AT LEAST ONCE)
Authentication: SASL PLAIN or SASL EXTERNAL
Message Body:
(optional) Arbitrary payload
Message properties:
(optional) Arbitrary properties (content-type, correlation-id, …)
Disposition Frames:
Accepted: Message successfully processed by the adapter.
Released: Message cannot be processed and should be redelivered.
Rejected: Adapter rejects the message due to one of the following:
(hono:bad-request): Request rejected due to a bad client request.
(amqp:unauthorized-access): Request rejected because the adapter is disabled for tenant.
(amqp:precondition-failed): Request does not fulfill certain requirements e.g adapter cannot assert device registration etc.
(amqp:resource-limit-exceeded): Request rejected because the message limit for the given tenant is exceeded.
When a device publishes data to the telemetry address, the AMQP adapter automatically determines the device’s identity and tenant during the authentication process.
Example
Publish some JSON data for device 4711:
# in directory: hono/cli/target/
Publish an Event (authenticated Device)
Topic: event or e
Authentication: required
Payload:
(required) Arbitrary payload
This is the preferred way for devices to publish events. It is available only if the protocol adapter has been configured to require devices to authenticate (which is the default).
Example
Upload a JSON string for device 4711:
Upload a JSON string for device 4711 with time-to-live as 10 seconds:
Publish an Event (unauthenticated Device)
Authentication: none
Payload:
(required) Arbitrary payload
This topic can be used by devices that have not authenticated to the protocol adapter. Note that this requires the
HONO_MQTT_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Publish some JSON data for device 4711:
Publish some JSON data for device 4711 with time-to-live as 15 seconds:
Publish an Event (authenticated Gateway)
Authentication: required
Payload:
(required) Arbitrary payload
This topic can be used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. In this case the credentials provided by the gateway during connection establishment with the protocol adapter are used to authenticate the gateway whereas the parameters from the topic name are used to identify the device that the gateway publishes data for.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant connected to Hono.
This resource MUST be used by devices that have not authenticated to the protocol adapter. Note that this requires the HONO_HTTP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Publish some JSON data for device 4711:
HTTP/1.1 202 Accepted
content-length: 0
Publish some JSON data for device 4711 using at least once QoS:
HTTP/1.1 202 Accepted
content-length: 0
Publish some JSON data for device 4711, indicating that the device will wait for 10 seconds to receive the response:
HTTP/1.1 200 OK
hono-command: set
hono-cmd-req-id: 1010a7249aa5-f742-4376-8458-bbfc88c72d92
content-length: 23
{
"brightness": 87
}
Publish Telemetry Data (authenticated Gateway)
Method: PUT
Request Headers:
(optional) authorization: The gateway’s auth-id and plain text password encoded according to the Basic HTTP authentication scheme. If not set, the adapter expects the gateway to present a client certificate as part of the TLS handshake during connection establishment.
(required) content-type: The type of payload contained in the request body.
(optional) hono-ttd: The number of seconds the device will wait for the response.
Request Options:
(optional) content-format: The type of payload contained in the request body. Required, if request contains payload.
Query Parameters:
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) empty: Marks the request as an empty notification.
Request Body:
(optional) Arbitrary payload encoded according to the given content type. Maybe empty, if URI-query: empty is provided.
Response Options:
(optional) content-format: A media type describing the semantics and format of payload contained in the response body.
This option will only be present if the response contains a command to be executed by the device which requires input data.
Note that this option will be empty if the media type contained in the command (AMQP) message’s content-type property cannot
be mapped to one of the registered CoAP content-format codes.
(optional) location-query: The hono-command query parameter contains the name of the command to execute.
This option will only be present if the response contains a command to be executed by the device.
In the latter case, the location-path option contains exactly the URI-path that the device must use when sending its
the command is targeted at.
This option will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (Content).
(optional) Error details, if status code is >= 4.00.
Response Codes:
2.04 (Changed): The data in the request body has been accepted for processing. The response may contain a command for a device to execute.
Note that if the message type is NON (at most once semantics), this status code does not mean that the message has been
containing Device Connection data directly using the Infinispan Hotrod
client.
Signed-off-by: Kai Hudalla <kai.hudalla@bosch.io>
sophokles73
force-pushed the
bosch-io:support_deviceconnectioncache_in_quarkus_adapters
branch
from
2559ce4
to
c2ab889
Nov 23, 2020
Hide details
View details
sophokles73
merged commit efae4d9
into
eclipse:master
Nov 23, 2020
4 checks passed
4 checks passed
build (file)
Details
build (jdbc)
no
100
The number of credits to flow to a client connecting to the Device Registration endpoint.
HONO_REGISTRY_SVC_SAVE_TO_FILE--hono.registry.svc.saveToFile
no
false
When set to true the server will periodically write out the registered device information to the file specified by the HONO_REGISTRY_SVC_FILENAME property.
HONO_REGISTRY_SVC_SIGNING_KEY_PATH--hono.registry.svc.signing.keyPath
no
-
The absolute path to the (PKCS8) PEM file containing the private key that the server should use for signing tokens asserting a device’s registration status. When using this variable, other services that need to validate the tokens issued by this service need to be configured with the corresponding certificate/public key. Alternatively, a symmetric key can be used for signing (and validating) by setting the HONO_REGISTRY_SVC_SIGNING_SHARED_SECRET variable. If none of these variables is set, the server falls back to the key indicated by the HONO_REGISTRY_AMP_KEY_PATH variable. If that variable is also not set, startup of the server fails.
HONO_REGISTRY_SVC_SIGNING_SHARED_SECRET--hono.registry.svc.signing.sharedSecret
no
-
A string to derive a symmetric key from that is used for signing tokens asserting a device’s registration status. The key is derived from the string by using the bytes of the String’s UTF8 encoding. When setting the signing key using this variable, other services that need to validate the tokens issued by this service need to be configured with the same key. Alternatively, an asymmetric key pair can be used for signing (and validating) by setting the HONO_REGISTRY_SVC_SIGNING_KEY_PATH variable. If none of these variables is set, startup of the server fails.
HONO_REGISTRY_SVC_SIGNING_TOKEN_EXPIRATION--hono.registry.svc.signing.tokenExpiration
no
10
The expiration period to use for the tokens asserting the registration status of devices.
HONO_REGISTRY_SVC_STARTEMPTY--hono.registry.svc.startEmpty
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
string
MAY contain an identifier that uniquely identifies the message at the sender side. Either this or the correlation-id property MUST be set.
reply-to
yes
properties
string
MUST contain the source address that the client wants to received response messages from. This address MUST be the same as the source address used for establishing the client’s receive link (see Preconditions).
device_id
yes
application-properties
string
MUST contain the ID of the device that is subject to the operation.
Standard Response Properties
The following table provides an overview of the properties shared by all response messages regardless of the particular operation being invoked.
Name
Mandatory
Location
AMQP Type
Description
correlation-id
yes
properties
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
If a non-default max-ttl is set for the tenant, use that value as the effective ttl, otherwise set effective ttl to -1.
If the event published by the device
contains a ttl header and effective ttl is not -1 and the ttl value (in seconds) provided by the device is smaller than the
effective ttl, use the device provided ttl value as the new effective ttl.
does not contain a ttl header but a default ttl value is configured for the device (with the device level taking precedence
over the tenant level) and effective ttl is not -1 and the default value is smaller than the effective ttl,
use the default ttl value as the new effective ttl.
If effective ttl is not -1, set the downstream event message’s ttl header to its value (in milliseconds).
The JSON object MAY contain an arbitrary number of additional members with arbitrary names of either scalar or complex type.
This allows for future well-known additions and also allows to add further information which might be relevant to a custom adapter only.
Connection Duration Configuration Format
The table below contains the properties which are used to configure a tenant’s connection duration limit:
Name
Mandatory
JSON Type
Default Value
Description
effective-since
yes
string
-
The point in time at which the current settings became effective, i.e. the start of the first accounting period based on these settings. The value MUST be an ISO 8601 compliant combined date and time representation in extended format.
max-minutes
Paolo Patierno
Internet of Things : protocols war !
Paolo Patierno
Reactive Internet of Things : the Vert.x way
Paolo Patierno
Telemetry with Windows 10 IoT Core : from Raspberry Pi2 to Event Hubs
Paolo Patierno
Event Hubs : million events per second to the Cloud
Paolo Patierno
Azure IoT Hub
Paolo Patierno
EnMasse : open sourcing the messaging & IoT
Paolo Patierno
Messaging as a service : building a scalable messaging service
Paolo Patierno
Metti il .Net Framework nel Micro !
Paolo Patierno
English
Español
Português
Français
Deutsch
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
# adapter's container filesystem. The files from the secret(s) can
# then be used in e.g. the service client specs.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the adapter has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the adapter's configuration properties
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
# lora contains configuration properties for the adapter's
# exposed HTTP endpoints.
NB The example above does not contain any of the not-before, not-after and enabled properties. The not-before and not-after properties should be omitted if the validity period is the same as the period indicated by the client certificate’s corresponding properties. It is still necessary to provide a (empty) JSON object in the secrets array, though.
Port Configuration
The Device Registry supports configuration of both, an AMQP based endpoint as well as an HTTP based endpoint proving RESTful resources for managing registration information and credentials. Both endpoints can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
See Port Configuration for more information.
Note
The environment variables to use for configuring the REST endpoint are the same as the ones for the AMQP endpoint, substituting _AMQP_ with _HTTP_.
Authentication Service Connection Configuration
See Authentication Service Connection Configuration for more information.
Metrics Configuration
See Monitoring & Tracing Admin Guide for details on how to configure the reporting of metrics.
This comment has been minimized.
Sign in to view
sophokles73
Nov 23, 2020
Member
this doesn't look right
This comment has been minimized.
Sign in to view
calohmn
Nov 23, 2020
Author
Contributor
This is only for debugging the integration test errors (I didn't get them locally). It's in the 2nd commit which won't be merged.
This comment has been minimized.
Sign in to view
calohmn
Nov 23, 2020
Author
Contributor
I now also get the test errors locally (sometimes occurring in CoAP tests). I think it's an issue with the CommandRouter component. I'm looking into it and will see to fix it outside of this PR.
This comment has been minimized.
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-send --hono.client.username=sensor1@DEFAULT_TENANT --hono.client.password=hono-secret
Notice that we only supplied a new value for the message address, leaving the other default values.
Publish some JSON data for device 4711 using a client certificate for authentication:
# in directory: hono/cli/target/
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-send --hono.client.port=5671 --hono.client.certPath=config/hono-demo-certs-jar/device-4711-cert.pem --hono.client.keyPath=config/hono-demo-certs-jar/device-4711-key.pem --hono.client.trustStorePath=config/hono-demo-certs-jar/trusted-certs.pem --hono.client.hostnameVerificationRequired=false
Publish Telemetry Data (unauthenticated Device)
Settlement Mode: presettled (AT MOST ONCE) or unsettled (AT LEAST ONCE)
Authentication: none
Message Body:
(optional) Arbitrary payload
Message properties:
(optional) Arbitrary properties (content-type, correlation-id, …)
Disposition Frames:
Accepted: Message successfully processed by the adapter.
Released: Message cannot be processed and should be redelivered.
Rejected: Adapter rejects the message due to:
(hono:bad-request): A bad client request (e.g invalid content-type).
(amqp:unauthorized-access): The adapter is disabled for tenant.
(amqp:precondition-failed): Request not fulfilling certain requirements.
(amqp:resource-limit-exceeded): Request rejected because the message limit for the given tenant is exceeded.
Note how verbose the address is for unauthenticated devices. This address can be used by devices that have not authenticated to the protocol adapter. This requires the HONO_AMQP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false before starting the protocol adapter.
Examples
Publish some JSON data for device 4711:
The protocol adapter checks the gateway’s authority to publish data on behalf of the device implicitly by means of retrieving a registration assertion for the device from the configured Device Registration service.
Examples
Publish some JSON data for device 4712 via gateway gw-1:
NB The example above assumes that a gateway device with ID gw-1 has been registered with hashed-password credentials with auth-id gw and password gw-secret.
Command & Control
The MQTT adapter enables devices to receive commands that have been sent by business applications by means of sending an MQTT SUBSCRIBE packet containing a device specific topic filter as described below. Devices can subscribe with QoS 1 or QoS 0. The adapter indicates the outcome of the subscription request by sending back a corresponding SUBACK packet. The SUBACK packet will contain Success - QoS 0 (0x00) or Success - QoS 1 (0x01) for a command topic filter indicating QoS 0 or 1 and will contain the Failure (0x80) value for all other filters. When a device no longer wants to receive commands anymore, it can send an MQTT UNSUBSCRIBE packet to the adapter, including the same topic filter that has been used to subscribe.
When a device has successfully subscribed, the adapter sends an empty notification on behalf of the device to the downstream AMQP 1.0 Messaging Network with the ttd header set to -1, indicating that the device will be ready to receive commands until further notice. Analogously, the adapter sends an empty notification with the ttd header set to 0 when a device unsubscribes from commands.
Commands can be sent following a request/response pattern or being one-way.
For Request/Response commands, devices send their responses to commands by means of sending an MQTT PUBLISH message to a topic that is specific to the command that has been executed. The MQTT adapter accepts responses being published using either QoS 0 or QoS 1.
The MQTT adapter checks the configured message limit before accepting any command requests and responses. In case of incoming command requests from business applications, if the message limit is exceeded, the Adapter rejects the message with the reason amqp:resource-limit-exceeded. And for the incoming command responses from devices, the Adapter rejects the message and closes the connection to the client.
The following sections define the topic filters/names to use for subscribing to and responding to commands. The following shorthand versions of topic path segments are supported:
c instead of command
q instead of req
s instead of res
The following variables are used:
Receiving Commands (authenticated Device)
An authenticated device MUST use the topic filter command///req/# to subscribe to commands.
Deprecation
Previous versions of Hono required authenticated devices to use command/+/+/req/# for subscribing to commands.
This old topic filter is deprecated. Devices MAY still use it until support for it will be removed in a future Hono version.
Example
(optional) qos-level: The QoS level for publishing telemetry messages. The adapter supports at most once (0) and at least once (1) QoS levels. The default value of 0 is assumed if this header is omitted.
Request Body:
(required) Arbitrary payload encoded according to the given content type.
Response Headers:
(optional) content-type: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.
(optional) hono-command: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-req-id: An identifier that the device must include in its response to a command. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-target-device: The id of the device that shall execute the command. This header will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.
(optional) Error details, if status code is >= 400.
Status Codes:
200 (OK): The telemetry data has been accepted for processing. The response contains a command for the device to execute.
202 (Accepted): The telemetry data has been accepted for processing. Note that if the qos-level request header is omitted (at most once semantics),
this status code does not mean that the message has been delivered to any potential consumer. However, if the QoS level header is set to 1
(at least once semantics), then the adapter waits for the message to be delivered and accepted by a downstream consumer before responding with
this status code.
400 (Bad Request): The request cannot be processed. Possible reasons for this include:
The content type header is missing.
The request body is empty.
The QoS header value is invalid.
401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
delivered to any potential consumer (yet). However, if the message type is CON (at least once semantics), then the adapter waits
for the message to be delivered and accepted by a downstream consumer before responding with this status code.
4.00 (Bad Request): The request cannot be processed. Possible reasons include:
the request body is empty and the URI-query option doesn’t contain the empty parameter
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The tenant that the gateway belongs to is not allowed to use this protocol adapter.
The device belongs to another tenant than the gateway.
The gateway is not authorized to act on behalf of the device.
The gateway associated with the device is not registered or disabled.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant
connected to Hono.
This resource can be used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter
directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox
or LoRa. In this case the credentials provided by the gateway during connection establishment with the
protocol adapter are used to authenticate the gateway whereas the parameters from the URI are used to identify the device that the gateway
publishes data for.
The protocol adapter checks the gateway’s authority to publish data on behalf of the device implicitly by means of retrieving a registration assertion
for the device from the configured Device Registration service.
Examples
Publish some JSON data for device 4712 using default message type CON (at least once):
Details
build (mongodb)
Details
eclipsefdn/eca
The author(s) of the pull request is covered by necessary legal agreements in order to proceed!
Details
1.5.0
automation
moved this from In progress
to Done
Nov 23, 2020
sophokles73
deleted the
bosch-io:support_deviceconnectioncache_in_quarkus_adapters
branch
Nov 23, 2020
Sign up for free
to join this conversation on GitHub.
Already have an account?
no
false
When set to true the server will not try to load device identities from the file specified by the HONO_REGISTRY_SVC_FILENAME property during startup.
HONO_TENANT_SVC_CACHE_MAX_AGE--hono.tenant.svc.cacheMaxAge
no
180
The maximum period of time (seconds) that information returned by the service’s operations may be cached for.
HONO_TENANT_SVC_FILENAME--hono.tenant.svc.filename
no
/var/lib/hono/device-registry/tenants.json
The path to the file where the server stores tenants. Hono tries to read tenants from this file during start-up and writes out all identities to this file periodically if property HONO_TENANT_SVC_SAVE_TO_FILE is set to true.Please refer to Tenants File Format for details regarding the file’s format.
HONO_TENANT_SVC_MODIFICATION_ENABLED--hono.tenant.svc.modificationEnabled
no
true
When set to false the tenants contained in the registry cannot be updated nor removed.
HONO_TENANT_SVC_RECEIVER_LINK_CREDIT--hono.tenant.svc.receiverLinkCredit
no
100
message-id
Contains the message-id (or the correlation-id, if specified) of the request message that this message is the response to.
status
yes
application-properties
int
Contains the status code indicating the outcome of the operation. Concrete values and their semantics are defined for each particular operation.
cache_control
no
application-properties
string
Contains an RFC 2616 compliant cache directive. The directive contained in the property MUST be obeyed by clients that are caching responses.
Delivery States
Hono uses the following AMQP message delivery states when receiving request messages from clients:
Delivery State
Description
ACCEPTED
Indicates that the request message has been received and accepted for processing.
REJECTED
Indicates that Hono has received the request but was not able to process it. The error field contains information regarding the reason why. Clients should not try to re-send the request using the same message properties in this case.
no
number
-1
The maximum connection duration in minutes allowed for the tenant for each accounting period. MUST be an integer. Minus one indicates that no limit is set.
period
no
object
-
The mode and length of an accounting period, i.e. the resource usage is calculated based on the defined number of days or on a monthly basis. For more information, please refer to the resource limits period.
Protocol adapters that maintain connection state SHOULD use this information to determine if a connection request from a device should be accepted or not. For more information, please refer to the connection duration limit concept.
Data Volume Configuration Format
The table below contains the properties which are used to configure a tenant’s data volume limit:
Name
Mandatory
JSON Type
Default Value
Description
effective-since
yes
string
-
The point in time at which the current settings became effective, i.e. the start of the first accounting period based on these settings. The value MUST be an ISO 8601 compliant combined date and time representation in extended format.
max-bytes
no
About
Dev & API
Blog
Terms
Privacy
Copyright
Support
×
Share Clipboard
×
Facebook
Twitter
LinkedIn
Link
Public clipboards featuring this slide
×
No public clipboards found for this slide
Select another clipboard
×
Looks like you’ve clipped this slide to already.
Create a clipboard
You just clipped your first slide!
# If not set, the adapter by default exposes the secure and insecure ports
# using an example key and certificate.
lora:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the adapter's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the adapter's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
mqtt:
# enabled indicates if Hono's MQTT 3.1.1 adapter should be deployed.
enabled: true
# imageName contains the name (excluding registry)
# of the container image to use for the MQTT adapter
Sign in to view
calohmn
Nov 23, 2020
Author
Contributor
I've removed the above log changes. PR with the fix for the intermittent test failures is in #2323.
calohmn
force-pushed the
bosch-io:PR/use_cmdrouter_in_adapters
branch
2 times, most recently
from
5127242
to
79a6413
Nov 23, 2020
[#2029] Use Command Router in adapters and integration tests.
…
Loading status checks…
4f31d38
This adds a org.eclipse.hono.adapter.client.command.CommandConsumerFactory
implementation that uses the new Command Router component.
For the integration tests, a new maven profile 'command-router' is added to
# in directory: hono/cli/target/
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-send --message.address=t/DEFAULT_TENANT/4711
Publish Telemetry Data (authenticated Gateway)
A device that publishes data on behalf of another device is called a gateway device. The message address is used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. In this case the credentials provided by the gateway during connection establishment with the protocol adapter are used to authenticate the gateway whereas the message address is used to identify the device that the gateway publishes data for.
Examples
A gateway connecting to the adapter using gw@DEFAULT_TENANT as username and gw-secret as password and then publishing some JSON data for device 4711:
# in directory: hono/cli/target/
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-send --hono.client.username=gw@DEFAULT_TENANT --hono.client.password=gw-secret --message.address=t/DEFAULT_TENANT/4711
In this example, we are using message address t/DEFAULT_TENANT/4711 which contains the device that the gateway is publishing the message for.
Publishing Events
The adapter supports AT LEAST ONCE delivery of Event messages only. A client therefore MUST set the settled property to false and the rcv-settle-mode property to first in all transfer frame(s) it uses for uploading events. All other combinations are not supported by the adapter and result in the message being rejected.
Publish an Event (authenticated Device)
Message Address: event or e
Settlement Mode: unsettled (AT LEAST ONCE)
Authentication: SASL PLAIN or SASL EXTERNAL
Message Body:
(optional) Arbitrary payload
Message properties:
(optional) Arbitrary properties (content-type, correlation-id, …)
Disposition Frames:
Accepted: Message successfully processed by the adapter.
Released: Message cannot be processed and should be redelivered.
Rejected: Adapter rejects the message due to:
mosquitto_sub -v -u 'sensor1@DEFAULT_TENANT' -P hono-secret -t command///req/#
For example, a request/response command with name setBrightness from an application might look like this:
command///q/1010f8ab0b53-bd96-4d99-9d9c-56b868474a6a/setBrightness
{
"brightness": 79
}
A corresponding one-way command might look like this:
command///q//setBrightness
{
"brightness": 79
}
Note that the topic in the latter case doesn’t contain a request identifier.
Receiving Commands (unauthenticated Device)
Example
mosquitto_sub -v -t command/DEFAULT_TENANT/4711/req/#
For example, a request/response command with name setBrightness from an application might look like this:
command/DEFAULT_TENANT/4711/q/1010f8ab0b53-bd96-4d99-9d9c-56b868474a6a/setBrightness
{
"brightness": 79
}
A corresponding one-way command might look like this:
command/DEFAULT_TENANT/4711/q//setBrightness
{
"brightness": 79
}
The tenant that the gateway belongs to is not allowed to use this protocol adapter.
The device belongs to another tenant than the gateway.
The gateway is not authorized to act on behalf of the device.
The gateway associated with the device is not registered or disabled.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant connected to Hono.
This resource can be used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. In this case the credentials provided by the gateway during connection establishment with the protocol adapter are used to authenticate the gateway whereas the parameters from the URI are used to identify the device that the gateway publishes data for.
The protocol adapter checks the gateway’s authority to publish data on behalf of the device implicitly by means of retrieving a registration assertion for the device from the configured Device Registration service.
Examples
Publish some JSON data for device 4712:
HTTP/1.1 202 Accepted
content-length: 0
Publish some JSON data for device 4712 using at least once QoS:
HTTP/1.1 202 Accepted
content-length: 0
Publish some JSON data for device 4712, indicating that the gateway will wait for 10 seconds to receive the response:
HTTP/1.1 200 OK
Publish some JSON data for device 4712 using message type NON (at most once):
Publish some JSON data for device 4712, indicating that the gateway will wait for 10 seconds to receive the response:
{
"brightness": 87
}
NB The examples above assume that a gateway device has been registered with psk credentials with auth-id gw and secret gw-secret
Sign in to comment
Reviewers
calohmn
dejanb
Assignees
No one assigned
Labels
Client
Projects
1.5.0
The number of credits to flow to a client connecting to the Tenant endpoint.
HONO_TENANT_SVC_SAVE_TO_FILE--hono.tenant.svc.saveToFile
no
false
When set to true the server will periodically write out the registered tenants to the file specified by the HONO_TENANTS_SVC_TENANT_FILENAME property.
HONO_TENANT_SVC_STARTEMPTY--hono.tenant.svc.startEmpty
no
false
When set to true the server will not try to load tenants from the file specified by the HONO_TENANT_SVC_FILENAME property during startup.
The variables only need to be set if the default value does not match your environment.
Port Configuration
The file based Device Registry supports configuration of both an AMQP based endpoint exposing the Tenant, Device Registration and Credentials
APIs as well as an HTTP based endpoint providing resources for managing tenants, registration information and credentials as defined by the
number
-1
The maximum number of bytes allowed for the tenant for each accounting period. MUST be an integer. A negative value indicates that no limit is set.
period
no
Clipping is a handy way to collect important slides you want to go back to later. Now customize the name of a clipboard to store your clips.
Name*
Description
Visibility
Others can see my Clipboard
Cancel
imageName: eclipse/hono-adapter-mqtt-vertx
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
let the tests run using the Command Router component.
The GitHub action workflow has been adapted to use that profile in the
test-run that uses the jdbc device registry (so that the other test-runs
still use the old command routing mechanism).
Signed-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>
calohmn
(hono:bad-request): A bad client request (e.g invalid content-type).
(amqp:unauthorized-access): The adapter is disabled for tenant.
(amqp:precondition-failed): Request not fulfilling certain requirements.
(amqp:resource-limit-exceeded): Request rejected because the message limit for the given tenant is exceeded.
This is the preferred way for devices to publish events. It is available only if the protocol adapter has been configured to require devices to authenticate (which is the default).
Example
Note that the topic in the latter case doesn’t contain a request identifier.
Receiving Commands (authenticated Gateway)
Gateway components can receive commands for devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. Corresponding devices have to be configured so that they can be used with a gateway. See Configuring Gateway Devices for details.
An authenticated gateway MUST use the topic filter command//+/req/# to subscribe to commands for all devices in whose behalf it acts.
Deprecation
Previous versions of Hono required authenticated gateways to use command/+/+/req/# for subscribing to commands.
This old topic filter is deprecated. Gateways MAY still use it until support for it will be removed in a future Hono version.
When processing an incoming command message, the protocol adapter will give precedence to a device-specific command subscription matching the command target device, whether the subscription comes from a gateway or the device itself. If there are multiple such subscriptions from multiple gateways and/or from the device itself, the subscription initiated last will get the command messages.
If no device-specific command subscription exists for a command target device, but one gateway, that may act on behalf of the device, has subscribed to commands for all its devices, then the command message is sent to that gateway.
If multiple gateways have initiated such generic subscriptions, the protocol adapter may have to decide to which gateway a particular command message will be sent to.
In case the command target device has already sent a telemetry, event or command response message via a gateway and if that gateway has created such a command subscription, that gateway will be chosen. Otherwise one gateway that may act on behalf of the command target device and that has an open subscription will be chosen randomly to receive the command message.
Example
A subscription to commands for all devices that a gateway acts on behalf of looks like this:
mosquitto_sub -v -u 'gw@DEFAULT_TENANT' -P gw-secret -t command//+/req/#
A subscription to commands for a specific device can be done like this:
mosquitto_sub -v -u 'gw@DEFAULT_TENANT' -P gw-secret -t command//4711/req/#
For example, a request/response command for device 4711 with name setBrightness from an application might look like this:
command//4711/q/1010f8ab0b53-bd96-4d99-9d9c-56b868474a6a/setBrightness
{
"brightness": 79
}
hono-command: set
hono-cmd-req-id: 1010a7249aa5-f742-4376-8458-bbfc88c72d92
content-length: 23
{
"brightness": 87
}
NB The example above assumes that a gateway device has been registered with hashed-password credentials with auth-id gw and password gw-secret which is authorized to publish data on behalf of device 4712.
Publish an Event (authenticated Device)
URI: /event
Method: POST
Request Headers:
(optional) authorization: The device’s auth-id and plain text password encoded according to the Basic HTTP authentication scheme. If not set, the adapter expects the device to present a client certificate as part of the TLS handshake during connection establishment.
(required) content-type: The type of payload contained in the request body.
which is authorized to publish data on behalf of device 4712.
Publish an Event (authenticated Device)
Done
Milestone
1.5.0
Linked issues
Successfully merging this pull request may close these issues.
None yet
3 participants
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Add this suggestion to a batch that can be applied as a single commit.
Registry Management API. Both endpoints can be configured to listen for connections on
a secure port only (default) or
an insecure port only or
both a secure and an insecure port (dual port configuration)
object
-
The mode and length of an accounting period, i.e. the data usage can limited based on the defined number of days or on a monthly basis. For more information, please refer to the resource limits period.
Protocol adapters SHOULD use this information to determine if a message originating from or destined to a device should be accepted for processing.
Resource Limits Period Configuration Format
The table below contains the properties that are used to configure a tenant’s resource limits period:
Name
Mandatory
JSON Type
Default Value
Save
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "300Mi"
limits:
cpu: "1"
memory: "512Mi"
svc:
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
force-pushed the
bosch-io:PR/use_cmdrouter_in_adapters
branch
from
79a6413
to
4f31d38
Nov 23, 2020
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Reviewers
sophokles73
dejanb
Assignees
No one assigned
Labels
Upload a JSON string for device 4711:
# in directory: hono/cli/target/
Publish an Event (unauthenticated Device)
Settlement Mode: unsettled (AT LEAST ONCE)
Message Body:
(optional) Arbitrary payload
Message properties:
(optional) Arbitrary properties (content-type, correlation-id, …)
Disposition Frames:
Accepted: Message successfully processed by the adapter.
Released: Message cannot be processed and should be redelivered.
Rejected: Adapter rejects the message due to:
(hono:bad-request): A bad client request (e.g invalid content-type).
(amqp:unauthorized-access): The adapter is disabled for tenant.
(amqp:precondition-failed): Request not fulfilling certain requirements.
(amqp:resource-limit-exceeded): Request rejected because the message limit for the given tenant is exceeded.
This address format is used by devices that have not authenticated to the protocol adapter. Note that this requires the
HONO_AMQP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Publish some JSON data for device 4711:
# in directory: hono/cli/target/
Publish an Event (authenticated Gateway)
A corresponding one-way command might look like this:
command//4711/q//setBrightness
{
"brightness": 79
}
Note that the topic in the latter case doesn’t contain a request identifier.
Sending a Response to a Command (authenticated Device)
Example
Sending a Response to a Command (unauthenticated Device)
Example
Sending a Response to a Command (authenticated Gateway)
Example
Custom Message Mapping
This protocol adapter supports transformation of messages that have been uploaded by devices before they get forwarded to downstream consumers.
Experimental
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) hono-ttl: The time-to-live in number of seconds for event messages.
Request Body:
(required) Arbitrary payload encoded according to the given content type.
Response Headers:
(optional) content-type: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.
(optional) hono-command: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-req-id: An identifier that the device must include in its response to a command. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-target-device: The id of the device that shall execute the command. This header will only be present if the response contains a command to be executed by the device and if the response goes to a gateway that acts on behalf of the target device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.
(optional) Error details, if status code is >= 400.
Status Codes:
200 (OK): The event has been accepted for processing. The response contains a command for the device to execute.
202 (Accepted): The event has been accepted for processing.
The device is authenticated using PSK.
URI: /event
Method: POST
Type:CON
Request Options:
(optional) content-format: The type of payload contained in the request body. Required, if request contains payload.
Query Parameters:
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) empty: Marks the request as an empty notification.
Request Body:
Applying suggestions on deleted lines is not supported.
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
The registry will fail to start if none of the ports is configured properly.
The following sections apply to configuring both the AMQP and the HTTP endpoint. The environment variables to use for configuring
the HTTP endpoint are the same as the ones for the AMQP endpoint, substituting _AMQP_ with _HTTP_, e.g. HONO_REGISTRY_HTTP_KEY_PATH
instead of HONO_REGISTRY_AMQP_KEY_PATH.
Secure Port Only
The server needs to be configured with a private key and certificate in order to open a TLS secured port.
There are two alternative ways for doing so:
Setting the HONO_REGISTRY_AMQP_KEY_STORE_PATH and the HONO_REGISTRY_AMQP_KEY_STORE_PASSWORD variables in order to load the
key & certificate from a password protected key store, or
setting the HONO_REGISTRY_AMQP_KEY_PATH and HONO_REGISTRY_AMQP_CERT_PATH variables in order to load the key and certificate
from two separate PEM files in PKCS8 format.
When starting up, the server will bind a TLS secured socket to the default secure port (5671 for AMQP and 8443 for HTTP).
The port number can also be set explicitly using the HONO_REGISTRY_AMQP_PORT variable.
The HONO_REGISTRY_AMQP_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on.
By default, the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. Setting this
variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally
to the outside world).
Insecure Port Only
The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead,
e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by
explicitly setting HONO_REGISTRY_AMQP_INSECURE_PORT to a valid port number, or by
implicitly configuring the default port (5672 for AMQP and 8080 for HTTP) to be used by setting HONO_REGISTRY_AMQP_INSECURE_PORT_ENABLED
to true.
The server issues a warning on the console if one of the insecure ports is set to the corresponding default secure port.
Description
mode
yes
string
-
The mode of the resource usage calculation. The default implementation supports two modes namely days and monthly.
no-of-days
no
number
-
When the mode is set as days, then this value represents the length of an accounting period , i.e. the number of days over which the resource usage is to be limited. MUST be a positive integer.
Delivery States used by the Tenant API
A Tenant service implementation uses the following AMQP message delivery states when receiving request messages from clients:
Delivery State
Description
ACCEPTED
Indicates that the request message has been received and accepted for processing.
REJECTED
Indicates that the request message has been received but cannot be processed. The disposition frame’s error field contains information regarding the reason why. Clients should not try to re-send the request using the same message properties and payload in this case.
# adapter's container filesystem. The files from the secret(s) can
# then be used in e.g. the service client specs.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the adapter has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the adapter's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/mqtt-adapter-config/
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
# mqtt contains configuration properties for the adapter's
# exposed MQTT endpoints.
# If not set, the adapter by default exposes the secure and insecure ports
# using an example key and certificate.
mqtt:
# insecurePortEnabled: true
C&C
enhancement
Projects
1.5.0
In progress
Milestone
1.5.0
Linked issues
Successfully merging this pull request may close these issues.
None yet
2 participants
Add this suggestion to a batch that can be applied as a single commit.
This suggestion is invalid because no changes were made to the code.
Suggestions cannot be applied while the pull request is closed.
Suggestions cannot be applied while viewing a subset of changes.
Only one suggestion per line can be applied in a batch.
Add this suggestion to a batch that can be applied as a single commit.
Applying suggestions on deleted lines is not supported.
Examples
A gateway connecting to the adapter using gw@DEFAULT_TENANT as username and gw-secret as password and then publishing some JSON data for device 4711:
# in directory: hono/cli/target/
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-send --hono.client.username=gw@DEFAULT_TENANT --hono.client.password=gw-secret --message.address=e/DEFAULT_TENANT/4711
In this example, we are using message address e/DEFAULT_TENANT/4711 which contains the device that the gateway is publishing the message for.
Command & Control
The AMQP adapter enables devices to receive commands that have been sent by business applications by means of opening a receiver link using a device specific source address as described below. When a device no longer wants to receive commands anymore, it can simply close the link.
When a device has successfully opened a receiver link for commands, the adapter sends an empty notification on behalf of the device to the downstream AMQP 1.0 Messaging Network with the ttd header set to -1, indicating that the device will be ready to receive commands until further notice. Analogously, the adapter sends an empty notification with the ttd header set to 0 when a device closes the link or disconnects.
Devices send their responses to commands by means of sending an AMQP message with properties specific to the command that has been executed. The AMQP adapter accepts responses being published using either at most once (QoS 0) or at least once (QoS 1) delivery semantics. The device must send the command response messages using the same (sender) link that it uses for sending telemetry data and events.
The AMQP adapter checks the configured message limit before accepting any command requests and responses. In case of incoming command requests from business applications or the command responses from devices, if the message limit is exceeded, the Adapter rejects the message with the reason amqp:resource-limit-exceeded.
Receiving Commands
A device MUST use the following source address in its attach frame to open a link for receiving commands:
command (authenticated device)
command (authenticated gateway receiving commands for all devices it acts on behalf of)
The adapter supports AT LEAST ONCE delivery of command messages only. A client therefore MUST use unsettled for the snd-settle-mode and first for the rcv-settle-mode fields of its attach frame during link establishment. All other combinations are not supported and result in the termination of the link.
Once the link has been established, the adapter will send command messages having the following properties:
Name
Mandatory
Location
Type
Description
subject
yes
properties
subject to change without prior notice.
This feature is useful in scenarios where devices are connected to the adapter via a gateway but the gateway is not able to include
the device ID in the topic that the gateway publishes data to. The gateway will use the plain telemetry or event topics in this case.
The message payload will usually contain the identifier of the device that the data originates from.
transform binary encoded data into a JSON document which can be consumed more easily by downstream consumers.
The mechanism works as follows:
1. A client uploads a message to the MQTT adapter.
1. The adapter invokes the Device Registration service’s assert Registration operation using either
the authenticated device’s identifier, if the topic does not contain a device ID, or the device ID from the
topic.
1. If the assertion succeeds, the adapter creates the downstream message using the original message’s payload and
the asserted device ID as the origin device.
1. If the response payload contains a value for the mapper property, the adapter tries to find a mapper endpoint configuration
for the given value. If a mapper endpoint with a matching name has been configured for the adapter,
1. the adapter sends an HTTP request to the endpoint which contains the original message’s payload in the request body.
1. If the response body is not empty, it is used as the downstream message’s payload.
1. If the response contains a device_id header and its value is different from the original device ID, then the adapter
invokes the assert Registration operation again, this time using the mapped device ID instead of the original device ID.
If the assertion succeeds, the adapter uses the asserted (mapped) device ID for the downstream message.
1. The adapter forwards the downstream message.
Please refer to the Device Registry Management API
for how to register a mapper for a device.
Please refer to the MQTT Adapter Admin Guide
400 (Bad Request): The request cannot be processed. Possible reasons for this include:
The content type header is missing.
The request body is empty but the event is not of type empty-notification.
401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed because there is no consumer of events for the given tenant connected to Hono.
This is the preferred way for devices to publish events. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default).
Example
Publish some JSON data for device 4711:
HTTP/1.1 202 Accepted
content-length: 0
Publish an Event (unauthenticated Device)
Method: PUT
Request Headers:
(required) content-type: The type of payload contained in the request body.
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) hono-ttl: The time-to-live in number of seconds for event messages.
Request Body:
(required) Arbitrary payload encoded according to the given content type.
Response Headers:
(optional) Arbitrary payload encoded according to the given content type. Maybe empty, if URI-query: empty is provided.
Response Options:
(optional) content-format: A media type describing the semantics and format of payload contained in the response body.
This option will only be present if the response contains a command to be executed by the device which requires input data.
Note that this option will be empty if the media type contained in the command (AMQP) message’s content-type property cannot
be mapped to one of the registered CoAP content-format codes.
(optional) location-query: The hono-command query parameter contains the name of the command to execute.
This option will only be present if the response contains a command to be executed by the device.
(optional) location-path: The location path is command for one-way-commands and
command_response/<command-request-id> for commands expecting a response.
In the latter case, the location-path option contains exactly the URI-path that the device must use when sending its
response to the command.
This option will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (Content).
(optional) Error details, if status code is >= 4.00.
Response Codes:
2.04 (Changed): The data in the request body has been accepted for processing. The response may contain a command for the device to execute.
Note that if the message type is NON (at most once semantics), this status code does not mean that the message has been
delivered to any potential consumer (yet). However, if the message type is CON (at least once semantics), then the adapter waits
for the message to be delivered and accepted by a downstream consumer before responding with this status code.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
The HONO_REGISTRY_AMQP_INSECURE_PORT_BIND_ADDRESS variable can be used to specify the network interface that the port should be exposed on.
By default, the port is bound to the loopback device only, i.e. the port will only be accessible from the local host. This variable might be used
to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring
encrypted communication when accessed from the outside over public network infrastructure.
Setting this variable to 0.0.0.0 will let the port being bound to all network interfaces (be careful not to expose the port unintentionally
to the outside world).
Dual Port
In test setups and some production scenarios Hono server may be configured to open one secure and one insecure port at the same time.
This is achieved by configuring both ports correctly (see above). The server will fail to start if both ports are configured to use the same port number.
Since the secure port may need different visibility in the network setup compared to the secure port, it has it’s own binding address
HONO_REGISTRY_AMQP_INSECURE_PORT_BIND_ADDRESS.
This can be used to narrow the visibility of the insecure port to a local network e.g., while the secure port may be visible worldwide.
Ephemeral Ports
The server may be configured to open both a secure and a non-secure port at the same time simply by configuring both ports as described above.
For this to work, both ports must be configured to use different port numbers, otherwise startup will fail.
Authentication Service Connection Configuration
The Device Registry requires a connection to an implementation of Hono’s Authentication API in order to authenticate and authorize client requests.
The connection is configured according to Hono Client Configuration
can be ignored.
In addition to the standard client configuration properties, following properties may be set for the connection:
Environment VariableCommand Line Option
Mandatory
Default
Description
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the adapter's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the adapter's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
# authServer contains configuration properties for the Auth Server component.
authServer:
# imageName contains the name (excluding registry)
# of the container image to use for the Auth Server
imageName: eclipse/hono-service-auth
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
You must change the existing code in this line in order to create a valid suggestion.
Outdated suggestions cannot be applied.
This suggestion has been applied or marked resolved.
Suggestions cannot be applied from pending reviews.
Suggestions cannot be applied on multi-line comments.
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
string
Contains the name of the command to be executed.
reply-to
no
properties
string
Contains the address to which the command response should be sent. This property will be empty for one-way commands.
correlation-id
no
properties
string
This property will be empty for one-way commands, otherwise it will contain the identifier used to correlate the response with the command request.
device_id
no
application-properties
string
This property will only be set if an authenticated gateway has connected to the adapter. It will contain the id of the device (connected to the gateway) that the command is targeted at.
Authenticated gateways will receive commands for devices which do not connect to a protocol adapter directly but instead are connected to the gateway. Corresponding devices have to be configured so that they can be used with a gateway. See Configuring Gateway Devices for details.
A gateway can open a link to receive commands for all devices it acts on behalf of. An authenticated gateway can also open a receiver link for commands targeted at a specific device.
When processing an incoming command message, the protocol adapter will give precedence to a device-specific command consumer matching the command target device, whether it was created by a gateway or by the device itself. If multiple such consumer links have been created, by multiple gateways and/or from the device itself, the gateway or device that last created the consumer link will get the command messages.
If no device-specific command consumer exists for a command target device, but one gateway, that may act on behalf of the device, has opened a generic, device-unspecific command consumer link, then the command message is sent to that gateway.
If multiple gateways have opened a generic command consumer link, the protocol adapter may have to decide to which gateway a particular command message will be sent to.
In case the command target device has already sent a telemetry, event or command response message via a gateway and if that gateway has opened a command consumer link, that gateway will be chosen. Otherwise one gateway that may act on behalf of the command target device and that has opened a command consumer link will be chosen randomly to receive the command message.
for how to configure custom mapper endpoints.
Downstream Meta Data
The adapter includes the following meta data in messages being sent downstream:
Name
Location
Type
Description
device_id
application
string
The identifier of the device that the message originates from.
orig_adapter
application
string
Contains the adapter’s type name which can be used by downstream consumers to determine the protocol adapter that the message has been received over. The MQTT adapter’s type name is hono-mqtt.
orig_address
application
string
Contains the name of the MQTT topic that the device has originally published the data to.
x-opt-retain
message-annotations
boolean
Contains true if the device has published an event or telemetry message with its retain flag set to 1
The adapter also considers defaults registered for the device at either the tenant
or the device level.
(optional) content-type: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.
(optional) hono-command: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-req-id: An identifier that the device must include in its response to a command. This header will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.
(optional) Error details, if status code is >= 400.
Status Codes:
200 (OK): The event has been accepted and put to a persistent store for delivery to consumers. The response contains a command for the device to execute.
202 (Accepted): The event has been accepted and put to a persistent store for delivery to consumers.
400 (Bad Request): The request cannot be processed. Possible reasons for this include:
The content type header is missing.
The request body is empty but the event is not of type empty-notification.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed because there is no consumer of events for the given tenant connected to Hono.
This resource MUST be used by devices that have not authenticated to the protocol adapter. Note that this requires the HONO_HTTP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
4.00 (Bad Request): The request cannot be processed. Possible reasons include:
the request body is empty and the URI-query option doesn’t contain the empty parameter
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant
connected to Hono.
This is the preferred way for devices to publish events. It is available only if the protocol adapter is configured to require
devices to authenticate (which is the default).
Examples
The examples provided below make use of the coap-client command line tool which is part of the libcoap project.
Precompiled packages should be available for different Linux variants.
Publish some JSON data for device 4711 using default message type CON (at least once):
Note
coap-client only reports error response-codes, so the expected 2.04 response code will not be printed to the terminal.
Publish some JSON data for device 4711, indicating that the device will wait for 10 seconds to receive the response:
{
"brightness": 87
}
Note
In the example above the response actually contains payload that should be used as input to a command to be executed by the device.
This is just for illustrative purposes. You will usually get an empty response because there is no downstream application attached which could
HONO_AUTH_VALIDATION_CERT_PATH--hono.auth.validation.certPath
no
-
The absolute path to the PEM file containing the an X.509 certificate that the service should use for validating tokens issued by the Authentication service. Alternatively, a symmetric key can be used for validating tokens by setting the HONO_AUTH_VALIDATION_SHARED_SECRET variable. If none of these variables is set, startup of the service fails.
HONO_AUTH_VALIDATION_SHARED_SECRET--hono.auth.validation.sharedSecret
no
-
A string to derive a symmetric key from which is used for validating tokens issued by the Authentication service. The key is derived from the string by using the bytes of the String’s UTF8 encoding. When setting the validation key using this variable, the Authentication service must be configured with the same key. Alternatively, an X.509 certificate can be used for validating tokens by setting the HONO_AUTH_VALIDATION_CERT_PATH variable. If none of these variables is set, startup of the service fails.
HONO_AUTH_SUPPORTED_SASL_MECHANISMS--hono.auth.supportedSaslMechanisms
no
EXTERNAL, PLAIN
A (comma separated) list of the SASL mechanisms that the device registry should offer to clients for authentication. This option may be set to specify only one of EXTERNAL or PLAIN, or to use a different order.
Metrics Configuration
See Monitoring & Tracing Admin Guide for details on how to configure the reporting of metrics.
Device Identities File Format
The Device Registry supports persisting the device identities and their registration information to a JSON file in the local file system.
The Getting started Guide includes an example configuration which illustrates the file format used. The configuration file’s location is /deploy/src/main/deploy/example-device-identities.json.
Credentials File Format
The Device Registry supports persisting the devices’ credentials to a JSON file in the local file system.
The Getting started Guide includes an example configuration which illustrates the file format used. The configuration file’s location is /deploy/src/main/deploy/example-credentials.json.
Tenants File Format
The Device Registry supports persisting tenants to a JSON file in the local file system.
The configuration file’s location is /deploy/src/main/deploy/example-tenants.json.
Configuring Gateway Devices
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "196Mi"
limits:
cpu: "1"
memory: "256Mi"
# extraSecretMounts describes additional secrets that should be mounted into the
# Auth Server's' container filesystem. The files from the secret(s) can
# then be used in e.g. the configuration of the server's exposed ports.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the server has been deployed to.
extraSecretMounts: {}
# passwords:
# secretName: "my-passwords"
# mountPath: "/etc/pwd"
# other:
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
Sending a Response to a Command
A device only needs to respond to commands that contain a reply-to address and a correlation-id. However, if the application expects a response, then devices must publish a response back to the application. Devices may use the same anonymous sender link for this purpose that they also use for sending telemetry data and events.
The adapter supports AT LEAST ONCE delivery of command response messages only. A client therefore MUST set the settled property to true and the rcv-settle-mode property to first in all transfer frame(s) it uses for uploading command responses. All other combinations are not supported by the adapter and result in the message being rejected.
The table below provides an overview of the properties that must be set on a command response message:
Name
Mandatory
Location
Type
Description
to
yes
properties
string
MUST contain the value of the reply-to property of the command request message.
correlation-id
yes
properties
string
MUST contain the value of the correlation-id property of the command request message.
status
yes
The values of the default properties are determined as follows:
If the message already contains a non-empty property of the same name, the value if unchanged.
Otherwise, if a default property of the same name is defined in the device’s registration information, that value is used.
Otherwise, if a default property of the same name is defined for the tenant that the device belongs to, that value is used.
Note that of the standard AMQP 1.0 message properties only the content-type and ttl can be set this way to a default value.
Event Message Time-to-live
Events published by devices will usually be persisted by the AMQP Messaging Network in order to support deferred delivery to downstream consumers.
In most cases the AMQP Messaging Network can be configured with a maximum time-to-live to apply to the events so that the events will be removed
from the persistent store if no consumer has attached to receive the event before the message expires.
In order to support environments where the AMQP Messaging Network cannot be configured accordingly, the MQTT protocol adapter supports setting a
downstream event message’s ttl property based on the hono-ttl property set as property-bag at the end of the event topic.
Also the default ttl and max-ttl values can be configured for a tenant/device as described in the Tenant API.
Tenant specific Configuration
The adapter uses the Tenant API to retrieve tenant specific configuration for adapter type hono-mqtt.
The following properties are (currently) supported:
Name
Type
Default Value
Description
enabled
boolean
true
If set to false the adapter will reject all data from devices belonging to the tenant.
Publish some JSON data for device 4711:
HTTP/1.1 202 Accepted
content-length: 0
Publish an Event (authenticated Gateway)
Method: PUT
Request Headers:
(optional) authorization: The gateway’s auth-id and plain text password encoded according to the Basic HTTP authentication scheme. If not set, the adapter expects the gateway to present a client certificate as part of the TLS handshake during connection establishment.
(required) content-type: The type of payload contained in the request body.
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) hono-ttl: The time-to-live in number of seconds for event messages.
Request Body:
(required) Arbitrary payload encoded according to the given content type.
Response Headers:
(optional) content-type: A media type describing the semantics and format of payload contained in the response body. This header will only be present if the response contains a command to be executed by the device which requires input data.
(optional) hono-command: The name of the command to execute. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-req-id: An identifier that the device must include in its response to a command. This header will only be present if the response contains a command to be executed by the device.
(optional) hono-cmd-target-device: The id of the device that shall execute the command. This header will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 200.
(optional) Error details, if status code is >= 400.
Status Codes:
200 (OK): The event has been accepted and put to a persistent store for delivery to consumers. The response contains a command for the device to execute.
202 (Accepted): The event has been accepted and put to a persistent store for delivery to consumers.
400 (Bad Request): The request cannot be processed. Possible reasons for this include:
The content type header is missing.
send any commands to the device.
Publish an Event (unauthenticated Device)
Method: PUT
Type:CON
Request Options:
(optional) content-format: The type of payload contained in the request body. Required, if request contains payload.
Query Parameters:
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) empty: Marks the request as an empty notification.
Request Body:
(optional) Arbitrary payload encoded according to the given content type. Maybe empty, if URI-query: empty is provided.
Response Options:
(optional) content-format: A media type describing the semantics and format of payload contained in the response body.
This option will only be present if the response contains a command to be executed by the device which requires input data.
Note that this option will be empty if the media type contained in the command (AMQP) message’s content-type property cannot
be mapped to one of the registered CoAP content-format codes.
(optional) location-query: The hono-command query parameter contains the name of the command to execute.
This option will only be present if the response contains a command to be executed by the device.
(optional) location-path: The location path is command for one-way-commands and
command_response/<command-request-id> for commands expecting a response.
In the latter case, the location-path option contains exactly the URI-path that the device must use when sending its
response to the command.
This option will only be present if the response contains a command to be executed by the device.
Response Body:
The Device Registry supports devices to act on behalf of other devices. This is particularly useful for cases where a device does not connect directly to a Hono protocol adapter but is connected to a gateway component that is usually specific to the device’s communication protocol. It is the gateway component which then connects to a Hono protocol adapter and publishes data on behalf of the device(s). Examples of such a set up include devices using SigFox or LoRa for communication.
In these cases the protocol adapter will authenticate the gateway component instead of the device for which it wants to publish data. In order to verify that the gateway is authorized to publish data on behalf of the particular device, the protocol adapter should include the gateway’s device identifier (as determined during the authentication process) in its invocation of the Device Registration API’s assert Device Registration operation.
The Device Registry will then do the following:
1. Verify that the device exists and is enabled.
2. Verify that the gateway exists and is enabled.
3. Verify that the device’s registration information contains a property called via and that its value is either the gateway’s device identifier or a JSON array which contains the gateway’s device identifier as one of its values.
Only if all conditions are met, the Device Registry returns an assertion of the device’s registration status. The protocol adapter can then forward the published data to the AMQP Messaging Network in the same way as for any device that connects directly to the adapter.
The example configuration file (located at /deploy/src/main/deploy/example-device-identities.json) includes a device and a corresponding gateway configured in this way.
# secretName: "other-stuff"
# mountPath: "/etc/other"
# hono contains the Auth Server's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/auth-server-config/
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
auth:
# svc contains configuration properties for the server
svc:
permissionsPath: "file:///etc/hono/permissions.json"
supportedSaslMechanisms: "PLAIN"
signing:
# tokenExpiration contains the number of seconds after which tokens issued
# by the Auth server will expire.
tokenExpiration: 3600
# amqp contains configuration properties for the server's
# exposed AMQP endpoints.
# If not set, the sever by default exposes the secure and insecure ports
# using an example key and certificate.
application-properties
integer
MUST contain a status code indicating the outcome of processing the command at the device (see Command & Control API for details).
Examples
The AMQP adapter client can be used to simulate a device which receives commands and sends responses back to the application. The command line client is used to simulate an application sending commands to devices and receiving command responses from devices.
Start the AMQP adapter client, as follows:
# in directory: hono/cli/target/
java -jar hono-cli-*-exec.jar --spring.profiles.active=amqp-command --hono.client.username=sensor1@DEFAULT_TENANT --hono.client.password=hono-secret
After successfully starting the client, a message indicating that the device is ready to receive commands will be printed to standard output. The device is now waiting to receive commands from applications.
To send a command to the device, open a new terminal shell and start the command application, as shown below:
# in directory: hono/cli/
java -jar target/hono-cli-*-exec.jar --hono.client.host=localhost --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=command,ssl
Note
Change into the cli directory before running the command above to start the command application. If you change into the target directory (i.e cli/target), then the client will not be able to locate to certificate needed to connect to the messaging network.
Once the command application starts successfully, enter a command name, payload and content-type of the command to send to the device.
>>>>>>>>> Enter name of command for device [DEFAULT_TENANT:4711] (prefix with 'ow:' to send one-way command):
setBrightness
>>>>>>>>> Enter command payload:
some-payload
>>>>>>>>> Enter content type:
text/plain
After sending the command, the device (i.e. AMQP command client) will print out the command name and payload that it receives and automatically sends a command response to the application.
Received Command Message : [Command name: setBrightness, Command payload: some-payload]
Command response sent [outcome: Accepted{}]
Downstream Meta Data
The request body is empty but the event is not of type empty-notification.
401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
The tenant that the gateway belongs to is not allowed to use this protocol adapter.
The device belongs to another tenant than the gateway.
The gateway is not authorized to act on behalf of the device.
The gateway associated with the device is not registered or disabled.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed because there is no consumer of events for the given tenant connected to Hono.
This resource can be used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. In this case the credentials provided by the gateway during connection establishment with the protocol adapter are used to authenticate the gateway whereas the parameters from the URI are used to identify the device that the gateway publishes data for.
The protocol adapter checks the gateway’s authority to publish data on behalf of the device implicitly by means of retrieving a registration assertion for the device from the configured Device Registration service.
Examples
Publish some JSON data for device 4712:
HTTP/1.1 202 Accepted
content-length: 0
NB The example above assumes that a gateway device has been registered with hashed-password credentials with auth-id gw and password gw-secret which is authorized to publish data on behalf of device 4712.
Command & Control
The HTTP adapter enables devices to receive commands that have been sent by business applications. Commands are delivered to the device by means of an HTTP response message. That means a device first has to send a request, indicating how long it will wait for the response. That request can either be a telemetry or event message, with a hono-ttd header or query parameter (ttd for time till disconnect) specifying the number of seconds the device will wait for the response. The business application can react on that message by sending a command message, targeted at the device. The HTTP adapter will then send the command message as part of the HTTP response message with status 200 (OK) to the device. If the HTTP adapter receives no command message in the given time period, a 202 (Accepted) response will be sent to the device (provided the request was valid).
Specifying the Time a Device will wait for a Response
The adapter lets devices indicate the number of seconds they will wait for a response by setting a header or a query parameter.
Using an HTTP Header
The (optional) hono-ttd header can be set in requests for publishing telemetry data or events.
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (Content).
(optional) Error details, if status code is >= 4.00.
Response Codes:
2.04 (Changed): The data in the request body has been accepted for processing. The response may contain a command for the device to execute.
Note that if the message type is NON (at most once semantics), this status code does not mean that the message has been
delivered to any potential consumer (yet). However, if the message type is CON (at least once semantics), then the adapter waits
for the message to be delivered and accepted by a downstream consumer before responding with this status code.
4.00 (Bad Request): The request cannot be processed. Possible reasons include:
the request body is empty and the URI-query option doesn’t contain the empty parameter
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant
connected to Hono.
This resource MUST be used by devices that have not authenticated to the protocol adapter. Note that this requires the
HONO_COAP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
amqp:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the service's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the service's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
# deviceRegistryExample contains configuration properties for the
# example Device Registry.
deviceRegistryExample:
# enabled indicates whether the example Device Registry
# should be deployed and used.
The adapter includes the following meta data in the application properties of messages being sent downstream:
Name
Type
Description
device_id
string
The identifier of the device that the message originates from.
orig_adapter
string
Contains the adapter’s type name which can be used by downstream consumers to determine the protocol adapter that the message has been received over. The AMQP adapter’s type name is hono-amqp.
orig_address
string
Contains the AMQP target address that the device has used to send the data.
The adapter also considers defaults registered for the device at either the tenant or the device level. The values of the default properties are determined as follows:
If the message already contains a non-empty property of the same name, the value if unchanged.
Otherwise, if a default property of the same name is defined in the device’s registration information, that value is used.
Otherwise, if a default property of the same name is defined for the tenant that the device belongs to, that value is used.
Note that of the standard AMQP 1.0 message properties only the content-type and ttl can be set this way to a default value.
Event Message Time-to-live
Events published by devices will usually be persisted by the AMQP Messaging Network in order to support deferred delivery to downstream consumers.
In most cases the AMQP Messaging Network can be configured with a maximum time-to-live to apply to the events so that the events will be removed
from the persistent store if no consumer has attached to receive the event before the message expires.
In order to support environments where the AMQP Messaging Network cannot be configured accordingly, the protocol adapter supports setting a
downstream event message’s ttl property based on the default ttl and max-ttl values configured for a tenant/device as described in the Tenant API.
Tenant specific Configuration
Example:
HTTP/1.1 202 Accepted
content-length: 0
Using a Query Parameter
Alternatively the hono-ttd query parameter can be used:
HTTP/1.1 202 Accepted
content-length: 0
Commands handled by gateways
Authenticated gateways will receive commands for devices which do not connect to a protocol adapter directly but instead are connected to the gateway. Corresponding devices have to be configured so that they can be used with a gateway. See Configuring Gateway Devices for details.
A gateway can send a request with the hono-ttd header or query parameter on the /event or /telemetry URI, indicating its readiness to receive a command for any device it acts on behalf of. Note that in this case, the business application will be notified with the gateway id in the device_id property of the downstream message.
If there are multiple concurrent requests with a hono-ttd header or query parameter, sent by the command target device and/or one or more of its potential gateways, the HTTP adapter will choose the device or gateway to send the command to as follows:
A request done by the command target device or by a gateway specifically done for that device, has precedence. If there are multiple, concurrent such requests, the last one will get the command message (if received) in its response. Note that the other requests won’t be answered with a command message in their response event if the business application sent multiple command messages. That means commands for a single device can only be requested sequentially, not in parallel.
If the above doesn’t apply, a single hono-ttd request on the /event or /telemetry URI, sent by a gateway that the command target device is configured for, will get the command message in its response.
If there are multiple, concurrent such requests by different gateways, all configured for the command target device, the request by the gateway will be chosen, through which the target device has last sent a telemetry or event message. If the target device hasn’t sent a message yet and it is thereby unknown via which gateway the device communicates, then one of the requests will be chosen randomly to set the command in its response.
Sending a Response to a Command (authenticated Device)
Method: POST
Request Headers:
(optional) authorization: The device’s auth-id and plain text password encoded according to the Basic HTTP authentication scheme. If not set, the adapter expects the device to present a client certificate as part of the TLS handshake during connection establishment.
(optional) content-type: A media type describing the semantics and format of the payload contained in the request body. This header may be set if the result of processing the command on the device is non-empty. In this case the result data is contained in the request body.
(optional) hono-cmd-status: The status of the command execution. If not set, the adapter expects that the URI contains it
as request parameter at the end.
Request Body:
(optional) Arbitrary data representing the result of processing the command on the device.
Status Codes:
Publish some JSON data for device 4711 using default message type CON (at least once):
Publish some JSON data for device 4711, indicating that the device will wait for 10 seconds to receive the response:
{
"brightness": 87
}
Publish an Event (authenticated Gateway)
Method: PUT
Type:CON
Request Options:
(optional) content-format: The type of payload contained in the request body. Required, if request contains payload.
Query Parameters:
(optional) hono-ttd: The number of seconds the device will wait for the response.
(optional) empty: Marks the request as an empty notification.
Request Body:
(optional) Arbitrary payload encoded according to the given content type. Maybe empty, if URI-query: empty is provided.
Response Options:
(optional) content-format: A media type describing the semantics and format of payload contained in the response body.
This option will only be present if the response contains a command to be executed by the device which requires input data.
Note that this option will be empty if the media type contained in the command (AMQP) message’s content-type property cannot
be mapped to one of the registered CoAP content-format codes.
(optional) location-query: The hono-command query parameter contains the name of the command to execute.
This option will only be present if the response contains a command to be executed by the device.
In the latter case, the location-path option contains exactly the URI-path that the device must use when sending its
the command is targeted at.
# If this property is set to false, then the protocol adapters need to be
# explicitly configured for connecting to the Tenant, Device Registration,
# Credentials and Device Connection services using properties
# - "adapters.tenantSpec"
# - "adapters.deviceRegistrationSpec"
# - "adapters.credentialsSpec"
# - "adapters.deviceConnectionSpec"
enabled: true
# Sets the type of the device registry to be deployed. The following types are defined:
# - file: File based device registry. Also refer to the section "fileBasedDeviceRegistry"
# for additional configuration.
# - mongodb: MongoDB based device registry. Also refer to the section "mongoDBBasedDeviceRegistry"
# for additional configuration.
type: file
# addExampleData indicates whether example data is inserted after the device registry is deployed
addExampleData: true
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
The adapter uses the Tenant API to retrieve tenant specific configuration for adapter type hono-amqp.
The following properties are (currently) supported:
Name
Type
Default Value
Description
enabled
boolean
true
If set to false the adapter will reject all data from devices belonging to the tenant and respond with a amqp:unauthorized-access as the error condition value for rejecting the message.
202 (Accepted): The response has been successfully delivered to the application that has sent the command.
400 (Bad Request): The request cannot be processed because the command status is missing.
401 (Unauthorized): The request cannot be processed because the request does not contain valid credentials.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed. Possible reasons for this include:
There is no application listening for a reply to the given commandRequestId.
The application has already given up on waiting for a response.
This is the preferred way for devices to respond to commands. It is available only if the protocol adapter is configured to require devices to authenticate (which is the default).
Example
Send a response to a previously received command with the command-request-id req-id-uuid for device 4711:
HTTP/1.1 202 Accepted
content-length: 0
Sending a Response to a Command (unauthenticated Device)
Method: PUT
Request Headers:
(optional) content-type: A media type describing the semantics and format of the payload contained in the request body (the outcome of processing the command).
(optional) hono-cmd-status: The status of the command execution. If not set, the adapter expects that the URI contains it
as request parameter at the end.
Request Body:
(optional) Arbitrary data representing the result of processing the command on the device.
Status Codes:
This option will only be present if the response contains a command to be executed by the device.
Response Body:
(optional) Arbitrary data serving as input to a command to be executed by the device, if status code is 2.05 (Content).
(optional) Error details, if status code is >= 4.00.
Response Codes:
2.04 (Changed): The data in the request body has been accepted for processing. The response may contain a command for a device to execute.
Note that if the message type is NON (at most once semantics), this status code does not mean that the message has been
delivered to any potential consumer (yet). However, if the message type is CON (at least once semantics), then the adapter waits
for the message to be delivered and accepted by a downstream consumer before responding with this status code.
4.00 (Bad Request): The request cannot be processed. Possible reasons include:
the request body is empty and the URI-query option doesn’t contain the empty parameter
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The tenant that the gateway belongs to is not allowed to use this protocol adapter.
The device belongs to another tenant than the gateway.
The gateway is not authorized to act on behalf of the device.
The gateway associated with the device is not registered or disabled.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed because there is no consumer of telemetry data for the given tenant
connected to Hono.
This resource can be used by gateway components to publish data on behalf of other devices which do not connect to a protocol adapter
directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox
or LoRa. In this case the credentials provided by the gateway during connection establishment with the
resources:
requests:
cpu: "100m"
memory: "300Mi"
limits:
cpu: "1"
memory: "300Mi"
svc:
annotations: {}
loadBalancerIP:
# extraSecretMounts describes additional secrets that should be mounted into the
# Device Registry's' container filesystem. The files from the secret(s) can
# then be used in e.g. the configuration of the server's exposed ports.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the server has been deployed to.
extraSecretMounts: {}
# tls:
# secretName: "key-material"
# mountPath: "/etc/tls"
# data:
# secretName: "example-data"
# mountPath: "/etc/data"
# hono contains the Device Registry's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/device-registry-config/
202 (Accepted): The response has been successfully delivered to the application that has sent the command.
400 (Bad Request): The request cannot be processed because the command status is missing.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this might be:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed. Possible reasons for this include:
There is no application listening for a reply to the given commandRequestId.
The application has already given up on waiting for a response.
This resource MUST be used by devices that have not authenticated to the protocol adapter. Note that this requires the HONO_HTTP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Send a response to a previously received command with the command-request-id req-id-uuid for the unauthenticated device 4711:
HTTP/1.1 202 Accepted
content-length: 0
Sending a Response to a Command (authenticated Gateway)
Method: PUT
Request Headers:
(optional) authorization: The gateway’s auth-id and plain text password encoded according to the Basic HTTP authentication scheme. If not set, the adapter expects the gateway to present a client certificate as part of the TLS handshake during connection establishment.
(optional) content-type: A media type describing the semantics and format of the payload contained in the request body (the outcome of processing the command).
(optional) hono-cmd-status: The status of the command execution. If not set, the adapter expects that the URI contains it
as request parameter at the end.
Request Body:
(optional) Arbitrary data representing the result of processing the command on the device.
protocol adapter are used to authenticate the gateway whereas the parameters from the URI are used to identify the device that the gateway
publishes data for.
The protocol adapter checks the gateway’s authority to publish data on behalf of the device implicitly by means of retrieving a registration assertion
for the device from the configured Device Registration service.
Examples
Publish some JSON data for device 4712 using default message type CON (at least once):
Publish some JSON data for device 4712, indicating that the gateway will wait for 10 seconds to receive the response:
{
"brightness": 87
}
NB The examples above assume that a gateway device has been registered with psk credentials with auth-id gw and secret gw-secret
which is authorized to publish data on behalf of device 4712.
Command & Control
The CoAP adapter enables devices to receive commands that have been sent by business applications. Commands are delivered to the device by means of a response message. That means a device first has to send a request, indicating how long it will wait for the response. That request can either be a telemetry or event message, with a hono-ttd query parameter (ttd for time till disconnect) specifying the number of seconds the device will wait for the response. The business application can react on that message by sending a command message, targeted at the device. The CoAP adapter will then send the command message as part of the response message to the device.
Commands handled by gateways
Authenticated gateways will receive commands for devices which do not connect to a protocol adapter directly but instead are connected to the gateway. Corresponding devices have to be configured so that they can be used with a gateway. See Configuring Gateway Devices for details.
A gateway can send a request with the hono-ttd query parameter on the /event or /telemetry URI, indicating its readiness to receive a command for any device it acts on behalf of. Note that in this case, the business application will be notified with the gateway id in the device_id property of the downstream message.
If there are multiple concurrent requests with a hono-ttd query parameter, sent by the command target device and/or one or more of its potential gateways, the CoAP adapter will choose the device or gateway to send the command to as follows:
A request done by the command target device or by a gateway specifically done for that device, has precedence. If there are multiple, concurrent such requests, the last one will get the command message (if received) in its response. Note that the other requests won’t be answered with a command message in their response event if the business application sent multiple command messages. That means commands for a single device can only be requested sequentially, not in parallel.
hono:
# auth contains Hono client properties used by the example registry for
# connecting to the Authentication service.
# If not set, the registry by default uses the Auth Server component to
# authenticate clients.
auth:
registry:
# amqp contains configuration properties for the server's
# exposed AMQP endpoints.
# If not set, the registry by default exposes the secure port
# using an example key and certificate.
amqp:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# rest contains configuration properties for the server's
# exposed HTTP endpoints.
# If not set, the registry by default exposes the insecure and secure ports
# using an example key and certificate.
# NOTE: For MongoDB based device registry use "http" instead of "rest".
rest:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# healthCheck contains configuration properties for the service's
# health check server as defined by
Status Codes:
202 (Accepted): The response has been successfully delivered to the application that has sent the command.
400 (Bad Request): The request cannot be processed because the command status is missing.
403 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted. Possible reasons for this might be:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
The gateway is not authorized to act on behalf of the device.
The gateway associated with the device is not registered or disabled.
404 (Not Found): The request cannot be processed because the device is disabled or does not exist.
413 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
429 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
503 (Service Unavailable): The request cannot be processed. Possible reasons for this include:
There is no application listening for a reply to the given commandRequestId.
The application has already given up on waiting for a response.
This resource can be used by gateway components to send the response to a command on behalf of other devices which do not connect to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like SigFox or LoRa. In this case the credentials provided by the gateway during connection establishment with the protocol adapter are used to authenticate the gateway whereas the parameters from the URI are used to identify the device that the gateway publishes data for.
The protocol adapter checks the gateway’s authority to send responses to a command on behalf of the device implicitly by means of retrieving a registration assertion for the device from the configured Device Registration service.
Examples
Send a response to a previously received command with the command-request-id req-id-uuid for device 4712:
HTTP/1.1 202 Accepted
content-length: 0
NB The example above assumes that a gateway device has been registered with hashed-password credentials with auth-id gw and password gw-secret which is authorized to publish data on behalf of device 4712.
Downstream Meta Data
The adapter includes the following meta data in the application properties of messages being sent downstream:
Name
Type
If the above doesn’t apply, a single hono-ttd request on the /event or /telemetry URI, sent by a gateway that the command target device is configured for, will get the command message in its response.
If there are multiple, concurrent such requests by different gateways, all configured for the command target device, the request by the gateway will be chosen, through which the target device has last sent a telemetry or event message. If the target device hasn’t sent a message yet and it is thereby unknown via which gateway the device communicates, then one of the requests will be chosen randomly to set the command in its response.
Sending a Response to a Command (authenticated Device)
The device is authenticated using PSK.
Method: POST
Type: CON
Request Options:
(optional) content-type: A media type describing the semantics and format of the payload contained in the request body.
This option must be set if the result of processing the command on the device is non-empty. In this case the result data is
contained in the request body.
Query Parameters:
(required) hono-cmd-status: An HTTP status code indicating the outcome of processing the command.
Request Body:
(optional) Arbitrary data representing the result of processing the command on the device.
Response Codes:
2.04 (Changed): The response has been successfully delivered to the application that has sent the command.
4.00 (Bad Request): The request cannot be processed because the command status or command request ID are missing/malformed.
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed. Possible reasons for this include:
There is no application listening for a reply to the given commandRequestId.
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the service's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
# fileBasedDeviceRegistry contains configuration properties specific to the
# file based device registry.
fileBasedDeviceRegistry:
# imageName contains the name (excluding registry)
# of the container image for the example file based device registry.
imageName: eclipse/hono-service-device-registry-file
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
Description
device_id
string
The identifier of the device that the message originates from.
orig_adapter
string
Contains the adapter’s type name which can be used by downstream consumers to determine the protocol adapter that the message has been received over. The HTTP adapter’s type name is hono-http.
orig_address
string
Contains the (relative) URI that the device has originally posted the data to.
ttd
integer
Contains the effective number of seconds that the device will wait for a response. This property is only set if the HTTP request contains the hono-ttd header or request parameter.
The adapter also considers defaults registered for the device at either the tenant or the device level. The values of the default properties are determined as follows:
If the message already contains a non-empty property of the same name, the value if unchanged.
Otherwise, if a default property of the same name is defined in the device’s registration information, that value is used.
Otherwise, if a default property of the same name is defined for the tenant that the device belongs to, that value is used.
Note that of the standard AMQP 1.0 message properties only the content-type and ttl can be set this way to a default value.
Event Message Time-to-live
Events published by devices will usually be persisted by the AMQP Messaging Network in order to support deferred delivery to downstream consumers.
In most cases the AMQP Messaging Network can be configured with a maximum time-to-live to apply to the events so that the events will be removed
from the persistent store if no consumer has attached to receive the event before the message expires.
In order to support environments where the AMQP Messaging Network cannot be configured accordingly, the protocol adapter supports setting a
downstream event message’s ttl property based on the hono-ttl property set as a header or a query parameter in the event requests by the devices.
The application has already given up on waiting for a response.
This is the preferred way for devices to respond to commands. It is available only if the protocol adapter is configured to require devices to
authenticate (which is the default).
Example
Send a response to a previously received command with the command-request-id req-id-uuid for device 4711:
coap-client -u sensor1@DEFAULT_TENANT -k hono-secret coaps://hono.eclipseprojects.io/command_response/req-id-uuid?hono-cmd-status=200
Sending a Response to a Command (unauthenticated Device)
Method: PUT
Type: CON
Request Options:
(optional) content-type: A media type describing the semantics and format of the payload contained in the request body.
This option must be set if the result of processing the command on the device is non-empty. In this case the result data is
contained in the request body.
Query Parameters:
(required) hono-cmd-status: An HTTP status code indicating the outcome of processing the command.
Request Body:
(optional) Arbitrary data representing the result of processing the command on the device.
Response Codes:
2.04 (Changed): The response has been successfully delivered to the application that has sent the command.
4.00 (Bad Request): The request cannot be processed because the command status or command request ID are missing/malformed.
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
# containerRegistry:
# storageClass indicates the name of the kubernetes StorageClass that
# should be used for the example registry's persistent volume claim.
# If not set, the cluster's default storage class is used.
storageClass:
# mongoDBBasedDeviceRegistry contains configuration properties specific to the
# MongoDB based device registry.
mongoDBBasedDeviceRegistry:
# imageName contains the name (excluding registry)
# of the container image for the example MongoDB based device registry.
imageName: eclipse/hono-service-device-registry-mongodb
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# mongodb contains the configuration properties to connect to the MongoDB database instance.
# If you would like to use an already existing MongoDB database instance, then configure
# the below section accordingly.
mongodb:
# The host name or IP address of the MongoDB instance.
# host:
Also the default ttl and max-ttl values can be configured for a tenant/device as described in the Tenant API.
Tenant specific Configuration
The adapter uses the Tenant API to retrieve tenant specific configuration for adapter type hono-http.
The following properties are (currently) supported:
Name
Type
Default Value
Description
enabled
boolean
true
If set to false the adapter will reject all data from devices belonging to the tenant.
max-ttd
integer
60
Defines a tenant specific upper limit for the time until disconnect property that devices may include in requests for uploading telemetry data or events. Please refer to the Command & Control concept page for a discussion of this parameter’s purpose and usage.This property can be set for the hono-http adapter type as an extension property in the adapter section of the tenant configuration.If it is not set, then the default value of 60 seconds is used.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed. Possible reasons for this include:
There is no application listening for a reply to the given commandRequestId.
The application has already given up on waiting for a response.
This resource MUST be used by devices that have not authenticated to the protocol adapter. Note that this requires the
HONO_HTTP_AUTHENTICATION_REQUIRED configuration property to be explicitly set to false.
Examples
Send a response to a previously received command with the command-request-id req-id-uuid for the unauthenticated device 4711:
Sending a Response to a Command (authenticated Gateway)
Method: PUT
Type: CON
Request Options:
(optional) content-type: A media type describing the semantics and format of the payload contained in the request body.
This option must be set if the result of processing the command on the device is non-empty. In this case the result data is
contained in the request body.
Query Parameters:
(required) hono-cmd-status: An HTTP status code indicating the outcome of processing the command.
Request Body:
(optional) Arbitrary data representing the result of processing the command on the device.
Response Codes:
2.04 (Changed): The response has been successfully delivered to the application that has sent the command.
4.00 (Bad Request): The request cannot be processed because the command status or command request ID are missing/malformed.
4.03 (Forbidden): The request cannot be processed because the device’s registration status cannot be asserted.
Possible reasons for this include:
# The port that the MongoDB instance is listening on.
# port:
# The name of the MongoDB database to be used by the device registry application.
# dbName:
# The user name to use for authenticating to the MongoDB instance.
# username:
# The password to use for authenticating to the MongoDB instance.
# password:
mongodb:
# createInstance indicates whether a MongoDB database instance should be created,
# which is to be used by the example MongoDB based device registry.
# Instead, if you want to use an already existing MongoDB instance, set this property to false.
# By default, it is configured to use a StatefulSet and to deploy as a standalone instance.
# In order to use it for production purposes and to horizontally scale,
# refer https://github.com/bitnami/charts/tree/master/bitnami/mongodb#production-configuration-and-horizontal-scaling
createInstance: false
# If authentication to be enabled or not.
# ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
usePassword: true
# Configure a custom MongoDB database with a user name and password.
The given tenant is not allowed to use this protocol adapter.
The given device does not belong to the given tenant.
The gateway is not authorized to act on behalf of the device.
The gateway associated with the device is not registered or disabled.
4.04 (Not Found): The request cannot be processed because the device is disabled or does not exist.
4.13 (Request Entity Too Large): The request cannot be processed because the request body exceeds the maximum supported size.
4.29 (Too Many Requests): The request cannot be processed because the tenant’s message limit for the current period is exceeded.
5.03 (Service Unavailable): The request cannot be processed. Possible reasons for this include:
There is no application listening for a reply to the given commandRequestId.
The application has already given up on waiting for a response.
This resource can be used by gateway components to send the response to a command on behalf of other devices which do not connect
to a protocol adapter directly but instead are connected to the gateway, e.g. using some low-bandwidth radio based technology like
SigFox or LoRa. In this case the credentials provided by the gateway during
connection establishment with the protocol adapter are used to authenticate the gateway whereas the parameters from the URI are used
to identify the device that the gateway publishes data for.
The protocol adapter checks the gateway’s authority to send responses to a command on behalf of the device implicitly by means of
retrieving a registration assertion for the device from the configured Device Registration service.
Examples
Send a response to a previously received command with the command-request-id req-id-uuid for device 4712:
NB The example above assumes that a gateway device has been registered with psk credentials with auth-id gw and secret gw-secret which is
authorized to publish data on behalf of device 4712.
Downstream Meta Data
The adapter includes the following meta data in the application properties of messages being sent downstream:
Name
# And also set a root password for the MongoDB instance.
# ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#creating-a-user-and-database-on-first-run
mongodbRootPassword: root-secret
mongodbUsername: device-registry@HONO
mongodbPassword: hono-secret
mongodbDatabase: honodb
# Expose the MongoDB service to be accessed from outside the cluster (LoadBalancer service).
# or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
# ref: http://kubernetes.io/docs/user-guide/services/
service:
type: ClusterIP
port: 27017
targetPort: 27017
annotations: {}
# Use StatefulSet instead of Deployment when deploying standalone
useStatefulSet: false
# Setting up replication
# ref: https://github.com/bitnami/bitnami-docker-mongodb#setting-up-a-replication
# Whether to create a MongoDB replica set for high availability or not
replicaSet:
enabled: false
# do not use the default name ("mongodb") because it will lead to a config
# property name clash in the device registry pod when using "hono" as the release name
nameOverride: monogodb-server
Type
Description
device_id
string
The identifier of the device that the message originates from.
orig_adapter
string
Contains the adapter’s type name which can be used by downstream consumers to determine the protocol adapter that the message has been received over. The CoAP adapter’s type name is hono-coap.
orig_address
string
Contains the (relative) URI that the device has originally posted the data to.
ttd
integer
Contains the effective number of seconds that the device will wait for a response. This property is only set if the request contains the hono-ttd URI-query option.
The adapter also considers defaults registered for the device at either the tenant or the device level. The values of the default properties are determined as follows:
If the message already contains a non-empty property of the same name, the value if unchanged.
Otherwise, if a default property of the same name is defined in the device’s registration information, that value is used.
Otherwise, if a default property of the same name is defined for the tenant that the device belongs to, that value is used.
Note that of the standard AMQP 1.0 message properties only the content-type and ttl can be set this way to a default value.
Event Message Time-to-live
Events published by devices will usually be persisted by the AMQP Messaging Network in order to support deferred delivery to downstream consumers.
In most cases the AMQP Messaging Network can be configured with a maximum time-to-live to apply to the events so that the events will be removed
from the persistent store if no consumer has attached to receive the event before the message expires.
In order to support environments where the AMQP Messaging Network cannot be configured accordingly, the protocol adapter supports setting a
downstream event message’s ttl property based on the hono-ttl property set as a query parameter in the event requests by the devices.
Also the default ttl and max-ttl values can be configured for a tenant/device as described in the Tenant API.
# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:
# enabled indicates if the data grid based Device Connection service implementation
# should be deployed and used.
# If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
# the in-memory implementation that is part of the example Device Registry is used.
# If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
# then the "adapters.deviceConnectionSpec" is expected to contain the required
# Hono client config properties to connect to an already existing Device Connection service.
enabled: false
# imageName contains the name (excluding registry)
# of the container image to use for the Device Connection service
imageName: eclipse/hono-service-device-connection
# imageTag contains the tag of the container image to deploy.
# If not specified, the value of the honoImagesTag property is used.
# imageTag:
# containerRegistry contains the name of the container registry to pull
# the image from.
# If not specified, the value of the "honoContainerRegistry" property is used.
# containerRegistry:
# javaOptions contains options to pass to the JVM when starting
# up the service
javaOptions: -XX:MinRAMPercentage=80 -XX:MaxRAMPercentage=80
Tenant specific Configuration
The adapter uses the Tenant API to retrieve tenant specific configuration for adapter type hono-coap.
The following properties are (currently) supported:
Name
Type
Default Value
Description
enabled
boolean
true
If set to false the adapter will reject all data from devices belonging to the tenant.
max-ttd
integer
60
Defines a tenant specific upper limit for the time until disconnect property that devices may include in requests for uploading telemetry data or events. Please refer to the Command & Control concept page for a discussion of this parameter’s purpose and usage.This property can be set for the hono-coap adapter type as an extension property in the adapter section of the tenant configuration.If it is not set, then the default value of 60 seconds is used.
timeoutToAck
integer
-
This property has the same semantics as the corresponding property at the adapter level. However, any (non-null) value configured for a tenant takes precedence over the adapter level value for all devices of the particular tenant.
# resources contains the container's 'requests and limits for CPU and memory
# as defined by the Kubernetes API.
# Refer to https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# for a description of the properties' semantics.
resources:
requests:
cpu: "100m"
memory: "256Mi"
limits:
cpu: "1"
memory: "256Mi"
svc:
annotations: {}
# extraSecretMounts describes additional secrets that should be mounted into the
# service's' container filesystem. The files from the secret(s) can
# then be used in e.g. the configuration of the service's exposed ports.
# The secrets are expected to exist in the same Kubernetes namespace
# as the one that the service has been deployed to.
extraSecretMounts: {}
# tls:
# secretName: "key-material"
# mountPath: "/etc/tls"
# hono contains the service's configuration properties as defined in
# https://www.eclipse.org/hono/docs/admin-guide/device-connection-config/
hono:
app:
# maxInstances defines the number of adapter Verticle instances to deploy
# to the vert.x runtime during start-up.
maxInstances: 1
startupTimeout: 180
# auth contains Hono client properties used by the service for
# connecting to the Authentication service.
# If not set, the service by default uses the Auth Server component to
# authenticate clients.
auth:
deviceConnection:
# amqp contains configuration properties for the server's
# exposed AMQP endpoints.
# If not set, the registry by default exposes the secure port
# using an example key and certificate.
amqp:
# insecurePortEnabled: true
# insecurePortBindAddress: "0.0.0.0"
# DEPRECATED use the dataGridSpec property instead
# remote contains properties for configuring the Infinispan Hotrod connection
# to the data grid that should be used for storing the device connection data.
# This property MUST be set if "deviceConnectionService.enabled" is set to true
# and "dataGridExample.enabled" is set to false (the default).
# Please refer to https://docs.jboss.org/infinispan/9.4/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html#package.description
# for a list of configuration properties.
remote:
# serverList: hono-data-grid:11222
# authServerName: hono-data-grid
# authUsername: hono
# authPassword: hono-secret
# healthCheck contains configuration properties for the service's
# health check server as defined by
# https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
# If not set, a TLS secured health check server is configured listening on
# all network interfaces on port 8088 using the service's
# example key and cert.'
healthCheck:
# bindAddress: 0.0.0.0
# port: 12000
# keyPath: "/etc/config/key.pem"
# certPath: "/etc/config/cert.pem"
prometheus:
# createInstance indicates whether a Prometheus server should be created
# using the Prometheus chart.
# Set this property to false if you want to use an already existing server
# instead. In that case, set the "name" and "port" properties to the
# existing server's host name and port.
createInstance: true
# host contains the host name of an existing Prometheus server.
# This property is used to configure a corresponding datasource in Grafana
# if createInstance is set to false.
host:
# post contains the port number of an existing Prometheus server.
# This property is used to configure a corresponding datasource in Grafana
# if createInstance is set to false.
port:
## Define serviceAccount names for components. Defaults to component's fully qualified name.
##
serviceAccounts:
alertmanager:
create: false
name:
kubeStateMetrics:
create: false
name:
nodeExporter:
create: false
name:
pushgateway:
create: false
name:
server:
create: true
name:
server:
configMapOverrideName: prometheus-config
global:
scrape_interval: 10s
service:
servicePort: 9090
alertmanager:
enabled: false
kubeStateMetrics:
enabled: false
nodeExporter:
enabled: false
pushgateway:
enabled: false
grafana:
enabled: true
adminPassword: admin
# labels to be added to the Grafana Deployment
labels:
app.kubernetes.io/name: eclipse-hono
app.kubernetes.io/component: dashboard
# labels to be added to the Grafana Pod(s)
podLabels:
app.kubernetes.io/name: eclipse-hono
app.kubernetes.io/component: dashboard
## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
type: ClusterIP
port: 3000
targetPort: 3000
annotations: {}
labels:
app.kubernetes.io/name: eclipse-hono
app.kubernetes.io/component: dashboard
## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
sidecar:
dashboards:
enabled: true
# label that the configmaps with dashboards are marked with
label: grafana_dashboard
datasources:
enabled: true
# label that the configmaps with datasources are marked with
label: grafana_datasource
rbac:
namespaced: true
Copy lines
Copy permalink
View git blame
Reference in new issue
Go
© 2020 GitHub, Inc.
Terms
Privacy
Cookie Preferences
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
Learn more.
Accept
Reject
We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
You can always update your selection by clicking Cookie Preferences at the bottom of the page.
For more information, see our Privacy Statement.
Essential cookies
Learn more
Always active
Analytics cookies
We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.
Learn more
Accept
Reject
Save preferences
