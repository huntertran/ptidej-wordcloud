Welcome :: Eclipse Hono™
Welcome - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Connect. Command. Control.
Eclipse Hono™ provides remote service interfaces for connecting large numbers of IoT devices to a back end and interacting with them in a uniform way regardless of the device communication protocol.
Millions of Devices
Hono is designed for connecting large numbers of IoT devices. Its micro service based architecture and use of a reactive programming model allow for scaling out horizontally.
Uniform API
Connect a multitude of different types of devices to your (cloud) back end. Communicate with all of them via the same simple API regardless of the device protocol.
IoT Protocols
Hono supports devices communicating via common IoT protocols like HTTP, MQTT and AMQP out of the box.
Messaging Patterns
Hono provides APIs for important IoT communication patterns:
Telemetry
and
Event
messages can be used by devices to report sensor readings whereas applications can use
Command & Control
to invoke operations on devices.
Secure
Hono is designed for security by default. It supports common authentication mechanisms like username/password and X.509 client certificates to verify a device’s identity and uses transport layer security (TLS) when communicating with devices.
Extensible
Your device uses a custom protocol? Hono provides a simple mechanism to add custom protocol adapters.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Eclipse Public License 2.0 | The Eclipse Foundation
.featured-story-block-content:before {background-image:url(//www.eclipse.org/home/images/ece2019-register-today.jpg);}
var eclipse_org_common = {"settings":{"cookies_class":{"name":"eclipse_settings","enabled":1}}}
Skip to main content
Log in
Manage Cookies
Download
Members
Working Groups
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
Resources :: Eclipse Hono™
Resources - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Resources
Get in Touch
Road Map
Resources
On this page you can find links to arbitrary resources covering Eclipse Hono™ which have been presented at events, conferences and meet-ups or are available online.
“X.509 based device authentication in Eclipse Hono” (Blog post February 2019)
Author: Kai Hudalla (Bosch Software Innovations)
Article
“Eclipse Hono: Command and Control” (Talk at eclipsecon Europe October 2018)
Talk description
(October 23, 2018)
Speaker : Karsten Frank (Bosch Software Innovations)
Slides
“Using multi-tenancy in Eclipse Hono” (Blog post April 2018)
Author : Kai Hudalla (Bosch Software Innovations)
Article
“Eclipse Hono: Connecting large numbers of IoT devices” (Blog post January 2018)
Authors :
Dejan Bosanac
(Red Hat), Karsten Frank (Bosch Software Innovations),
Paolo Patierno
(Red Hat)
Article
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Toggle navigation
Breadcrumbs
Home
Legal
Eclipse Public License 2.0
#midcolumn h2{ font-size:18px; } #midcolumn ul, #midcolumn ol{ list-style-type:none; }
Get in Touch :: Eclipse Hono™
Get in Touch - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Get in Touch
Wanna tell us what you think about Eclipse Hono™? What we can improve? Which feature is missing? Or just discuss architectural issues?
Ask a Question
Enabling Open Innovation & Collaboration | The Eclipse Foundation
.featured-story-block-content:before {background-image:url(//www.eclipse.org/home/images/ece2019-register-today.jpg);}
.featured-story-block-content:before {background-image:url(//www.eclipse.org/home/images/ece2019-register-today.jpg);}
var eclipse_org_common = {"settings":{"cookies_class":{"name":"eclipse_settings","enabled":1}}}
Skip to main content
Log in
Manage Cookies
Download
Members
Working Groups
“Eclipse Hono: Connect. Command. Control.” at Virtual IoT Meetup
Virtual IoT Meetup
hosted by Eclipse Foundation (October 11, 2017)
Speakers : Kai Hudalla (Bosch Software Innovations),
Paolo Patierno
(Red Hat)
Video
and
slides
“Eclipse Hono: Connect. Command. Control.” at Eclipse Day Milan 2017
Eclipse Day Milan 2017
(September 22, 2017)
Speaker :
Paolo Patierno
(Red Hat)
Slides
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License - v 2.0
THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (“AGREEMENT”). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.
1. DEFINITIONS
“Contribution” means:
a) in the case of the initial Contributor, the initial content Distributed under this Agreement, and
b) in the case of each subsequent Contributor:
i) changes to the Program, and
ii) additions to the Program;
where such changes and/or additions to the Program originate from and are Distributed by that particular Contributor. A Contribution “originates” from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include changes or additions to the Program that are not Modified Works.
“Contributor” means any person or entity that Distributes the Program.
“Licensed Patents” mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.
“Program” means the Contributions Distributed in accordance with this Agreement.
“Recipient” means anyone who receives the Program under this Agreement or any Secondary License (as applicable), including Contributors.
“Derivative Works” shall mean any work, whether in Source Code or other form, that is based on (or derived from) the Program and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship.
“Modified Works” shall mean any work in Source Code or other form that results from an addition to, deletion from, or modification of the contents of the Program, including, for purposes of clarity any new file in Source Code form that contains any contents of the Program. Modified Works shall not include works that contain only declarations, interfaces, types, classes, structures, or files of the Program solely in each case in order to link to, bind by name, or subclass the Program or Modified Works thereof.
“Distribute” means the acts of a) distributing or b) making available in any manner that enables the transfer of a copy.
“Source Code” means the form of a Program preferred for making modifications, including but not limited to software source code, documentation source, and configuration files.
“Secondary License” means either the GNU General Public License, Version 2.0, or any later versions of that license, including any exceptions or additional permissions as identified by the initial Contributor.
2. GRANT OF RIGHTS
Road Map :: Eclipse Hono™
Road Map - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Road Map
We are trying our best to anticipate the needs and requirements of users based on the feedback we get from users. From this information we maintain a
Contributing :: Eclipse Hono™
Contributing - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Contributing
We would be delighted to answer your questions regarding the usage of Hono on
StackOverflow
. Make sure to add the
eclipse-hono
tag to your question so that we can easily find (and answer) it.
Report an Issue
The easiest way to tell us about a problem you experience with Hono is by
opening an issue on our GitHub page
.
Please make sure to search the existing issues for similar symptoms before you open a new issue.
Chat
The most direct way of interacting with the Hono developers is by means of
joining our room on Gitter
.
Keep in mind, though, that our Gitter room is mainly used by committers and contributors for discussing issues related to development of new features and organizational stuff. The preferred way of posting questions regarding usage of Hono is via
StackOverflow
.
Mailing List
An excellent way to get the latest news and announcements around Hono is to
join the mailing list
. This is the place where we announce new releases and discuss architectural issues of greater impact.
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Frequently Asked Questions :: Eclipse Hono™
Frequently Asked Questions - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Frequently Asked Questions
a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, Distribute and sublicense the Contribution of such Contributor, if any, and such Derivative Works.
b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in Source Code or other form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.
c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to Distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.
d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.
e) Notwithstanding the terms of any Secondary License, no Contributor makes additional grants to any Recipient (other than those set forth in this Agreement) as a result of such Recipient's receipt of the Program under the terms of a Secondary License (if permitted under the terms of Section 3).
3. REQUIREMENTS
3.1 If a Contributor Distributes the Program in any form, then:
a) the Program must also be made available as Source Code, in accordance with section 3.2, and the Contributor must accompany the Program with a statement that the Source Code for the Program is available under this Agreement, and informs Recipients how to obtain it in a reasonable manner on or through a medium customarily used for software exchange; and
b) the Contributor may Distribute the Program under a license different than this Agreement, provided that such license:
i) effectively disclaims on behalf of all other Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;
ii) effectively excludes on behalf of all other Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;
iii) does not attempt to limit or alter the recipients' rights in the Source Code under section 3.2; and
iv) requires any subsequent distribution of the Program by any party to be under a license that satisfies the requirements of this section 3.
3.2 When the Program is Distributed as Source Code:
a) it must be made available under this Agreement, or if the Program (i) is combined with other material in a separate file or files made available under a Secondary License, and (ii) the initial Contributor attached to the Source Code the notice described in Exhibit A of this Agreement, then the Program may be made available under the terms of such Secondary Licenses, and
b) a copy of this Agreement must be included with each copy of the Program.
3.3 Contributors may not remove or alter any copyright, patent, trademark, attribution notices, disclaimers of warranty, or limitations of liability (‘notices’) contained within the Program from any copy of the Program which they Distribute, provided that Contributors may add their own appropriate notices.
4. COMMERCIAL DISTRIBUTION
Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (“Commercial Contributor”) hereby agrees to defend and indemnify every other Contributor (“Indemnified Contributor”) against any losses, damages and costs (collectively “Losses”) arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.
For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.
5. NO WARRANTY
Road Map
for the next several releases.
We try to maintain a steady pace of releases every three months with milestones in between. However, due to changes in requirements over time and because we all have only limited time to spend on Hono, the scope of the releases may change over time as well. The best way to make sure that a certain feature that you anticipate or need the most actually makes it into a release, is by
becoming a contributor
and/or committer to Hono yourself.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Thank you for considering to contribute to Eclipse Hono™. We really appreciate the time and effort you want to spend helping to improve things around here. And help we can use :-)
Here is a (non-exclusive, non-prioritized) list of things you might be able to help us with:
bug reports
bug fixes
improvements regarding code quality e.g. improving readability, performance, modularity etc.
documentation (Getting Started guide, Examples, Deployment instructions for cloud environments)
features (both ideas and code are welcome)
You might also want to take a look at our GitHub Issues page (see drawer on the left) and see if you can help out with any of the issues listed. We have put a
help wanted
label on those issues that we are particularly keen on receiving contributions for.
Legal Requirements
In order to get you started as fast as possible we need to go through some organizational issues first, though.
Hono is an
Eclipse IoT
project and as such is governed by the Eclipse Development process. This process helps us in creating great open source software within a safe legal framework.
For you as a contributor, the following preliminary steps are required in order for us to be able to accept your contribution:
Sign the
Eclipse Foundation Contributor License Agreement
. In order to do so:
Obtain an Eclipse Foundation user ID. Anyone who currently uses Eclipse Bugzilla or Gerrit systems already has one of those. If you don’t already have an account simply
register on the Eclipse web site
.
Once you have your account, log in to the
Project Call
There is a bi-weekly community call which is open to everyone interested in the development of Hono. You can join by using the following link:
https://bluejeans.com/494114785
You can also import the calendar file
project-call.ics
which contains more information about joining by computer or telephone.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Sandbox :: Eclipse Hono™
Thank you :: Eclipse Hono™
Thank you - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Thank you
YourKit is kindly supporting this open source project with its full-featured Java Profiler. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit’s leading software products:
YourKit Java Profiler
Downloads :: Eclipse Hono™
Downloads - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Downloads
Binaries
Eclipse Hono’s service components are provided by means of pre-built Docker images available from
Getting started with Eclipse Hono :: Eclipse Hono™
Getting started with Eclipse Hono - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Toggle navigation
Documentation :: Eclipse Hono™
:root #header + #content > #left > #rlblock_left{ display:none !important; } :not(pre) > code + span.copy-to-clipboard { display: none; }
var baseurl = "https:\/\/www.eclipse.org\/hono\/docs\/";
Concepts
Device Identity
Multi-Tenancy
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
Device Registry
HTTP Adapter
Technical Questions
Why do I get
HTTP/1.1 503 Service Unavailable
when sending messages to the HTTP protocol adapter?
Please check if you have a
consumer connected
and that your consumer is for the same type of message (telemetry or event) that you are sending.
Why do I get the exception
io.vertx.core.VertxException: OpenSSL is not available
during startup of a protocol adapter?
Please check if you have set the property
nativeTlsRequired
in the protocol adapter’s configuration to
true
. The default Hono containers do not contain
netty-tcnative
. To enable this option, please follow the explanation in the
Admin Guide
or build your own container images.
Why do I see
ConnectionLimitManager - Connection limit (<VALUE>) exceeded
in the logs of a protocol adapter?
The configured maximum number of concurrent connections is exceeded and the protocol adapter refuses to accept more connections to prevent running out of resources. This limit is either configured on the protocol adapter (
MQTT
EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE PROGRAM IS PROVIDED ON AN “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.
6. DISCLAIMER OF LIABILITY
EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT PERMITTED BY APPLICABLE LAW, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
7. GENERAL
If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.
If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.
All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.
Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be Distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to Distribute the Program (including its Contributions) under the new version.
Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. Nothing in this Agreement is intended to be enforceable by any entity that is not a Contributor or Recipient. No third-party beneficiary rights are created under this Agreement.
Exhibit A – Form of Secondary Licenses Notice
“This Source Code may also be made available under the following Secondary Licenses when the conditions for such availability set forth in the Eclipse Public License, v. 2.0 are satisfied: {name license(s), version(s), and exceptions or additional permissions here}.”
Simply including a copy of this Agreement, including this Exhibit A is not sufficient to license the Source Code under Secondary Licenses.
If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.
You may add additional accurate notices of copyright ownership.
Eclipse Projects that Use EPL 2.0
Eclipse Cloud Development
Eclipse Che4z
Eclipse Codewind
Eclipse EMF Cloud
Eclipse GLSP
Eclipse Sprotty
Eclipse Theia
Eclipse Project Portal
, select
My Account
and then the
Contributor License Agreement
tab.
Add your GiHub username to your Eclipse Foundation account. Log in to Eclipse and go to
Edit my account
.
The easiest way to contribute code/patches/whatever is by creating a GitHub pull request (PR). When you do, make sure that you
Sign-off
your commit records using the same email address used for your Eclipse account.
You do this by adding the
-s
flag when you make the commit(s), e.g.
You can find all the details in the
Contributing via Git
document on the Eclipse web site.
Conventions
The
groupId
of all Hono modules is
org.eclipse.hono
,
artifactId
Sandbox - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Sandbox
We are providing a publicly accessible Eclipse Hono™
sandbox
environment at
hono.eclipse.org
. The main purpose of the system is to provide an environment for experimenting with devices and how to connect them to Hono without the need for setting up a local instance.
The sandbox hosts a Hono instance consisting of the same components as described in the
Getting started Guide
. All services are exposed via the same ports as used in the guide.
Take note
and
YourKit .NET Profiler
.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Docker Hub
. These container images can be deployed to popular container orchestration platforms like Kubernetes and OpenShift.
The release archive contains all files necessary to deploy Hono to a Kubernetes cluster using the
Helm package manager
.
Eclipse Hono 1.0-M7 Archive
Download and extract the archive and follow the
deployment guide
.
A Java based command line client for consuming telemetry data and events from Hono is available for download as well:
Eclipse Hono 1.0-M7 Command Line Client
The client requires a Java 11 runtime environment to run.
Please refer to the
Admin Guide
for details regarding the command line options that the client supports.
Source Code
The source code can be cloned (using
Git
) or downloaded from the
Eclipse Hono GitHub repository
. The
Building from Source
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Getting started with Eclipse Hono
This guide will walk you through an interactive example usage scenario of Eclipse Hono. You will learn how devices can use Hono’s protocol adapters to publish telemetry data and events using both HTTP and/or MQTT. You will also see how a downstream application can consume this data using Hono’s north bound API without requiring the application to know anything about the specifics of the communication protocols used by the devices.
Prerequisites for the Getting started Guide
This guide requires several tools to be installed on your computer. During the course of this guide, the devices publishing data will be represented by means of running some command line tools for posting HTTP requests and for publishing MQTT packets.
Curl HTTP Command Line Client
The
curl
command is used in this guide for registering devices with Hono and for simulating a device publishing data using HTTP. On most *nix like systems
curl
will probably already be installed. Otherwise, please refer to the
Curl project page
for installation instructions.
Mosquitto MQTT Command Line Client
The
mosquitto_pub
command is used in this guide for simulating a device publishing data using the MQTT protocol. Please refer to the
Mosquitto project page
The Platform for Open
Innovation and Collaboration
The Eclipse Foundation provides our global community of individuals and organizations with a mature, scalable and commercially-friendly environment for open source software collaboration and innovation.
Members
Working Groups
Discover Projects
Business Value
Register for EclipseCon Europe 2019 today!
Register now and save! Early Bird pricing ends October 1.
Register
CEA
Sponsored Ad
Announcements
2019/09/17
The Eclipse Foundation Wins Duke's Choice Award for Open Source Contributions to the Java Ecosystem
The Eclipse Foundation was awarded a Duke's Choice Award yesterday in recognition for outstanding open source contributi...
2019/09/17
The Eclipse Foundation Releases Eclipse Che 7, the First Kubernetes-Native IDE, to Make Creating Cloud Native Applications Easier, Faster, and More Secure
The Eclipse Foundation today announced at the Oracle Code One conference and tradeshow the release of Eclipse Che 7, the...
2019/09/17
Eclipse Community Continues to Deliver on Open Source Commitment
Community is key. And the Eclipse Foundation's community is on a roll.
2019/09/17
EclipseCon Europe 2019 Keynotes Announced - Register Now!
We are excited to announce the keynote speaker lineup for our community's biggest event of the year.
MQTT Adapter
AMQP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
AMQP Adapter Configuration
MQTT Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
,
AMQP
) or if not set, the protocol adapter determines a reasonable value based on the available resources like memory and CPU.
Why do I see
MemoryBasedConnectionLimitStrategy - Not enough memory
in the logs of a protocol adapter?
The protocol adapter can not allocate enough memory for handle even a small number of connections reliably. Please provide more memory. To try it anyways, configure the maximum number of concurrent connections, as documented in the Admin Guides of the protocol adapter (
MQTT
,
AMQP
).
How do I use client certificates for authentication?
Make sure that you are able to connect to the respective protocol adapter with TLS (see the
Admin Guide
for configuration).
Here
is an article, that provides a complete walk-through guide for all required steps. Additionally you can use and adapt the script for the creation of demo certificates in the Hono repository. More information can be found in the User Guide of the protocol adapter (
MQTT
,
HTTP
).
Organizational Questions
Will you add feature
x
to Hono?
Eclipse Project
Eclipse Equinox
Eclipse Java development tools
Eclipse Plug-in Development Environment
Eclipse Platform
Eclipse Enterprise for Java
Jakarta Annotations
Jakarta Concurrency
EclipseLink
Jakarta Enterprise Beans
Jakarta Expression Language
Jakarta Security
Jakarta Server Faces
Eclipse GlassFish
Eclipse Grizzly
Jakarta Interceptors
Jakarta Authorization
Jakarta Activation
Jakarta EE Platform
Jakarta Stable APIs
Eclipse Jakarta EE TCK
Jakarta Authentication
Jakarta RESTful Web Services
Jakarta Connectors
Eclipse Jersey
Jakarta Messaging
Jakarta Persistence
always starts with
hono-
.
Modules producing a Docker image generally use
eclipse/${artifactId}
as the image’s repository name.
All code complies with the formatting rules defined by the settings files in the
eclipse
folder.
Modules implementing one of the Hono APIs are sub-modules of
services
.
Making your Changes
Fork the repository on GitHub
.
Create a new
feature branch
for your changes.
Make your changes.
Make sure your code complies with the formatting rules defined by the settings files in the
eclipse
folder.
If you are creating new class files, make sure that they include a
proper copyright header
at the top. Any new file created should contain a header based on the following template:
Do not forget to add yourself or your organization to the copyright holder list in the NOTICE file in the parent folder if you haven’t already done so in a previous contribution.
Make sure you include test cases for non-trivial features.
Make sure the test suite passes after your changes.
The sandbox is intended for
testing purposes only
. Under no circumstances should it be used for any production use case. It is also
not allowed
to register with nor publish any personally identifiable information to any of the sandbox’s services.
You can use the sandbox without revealing who you are or any information about yourself. The APIs of the Device Registry running on the sandbox can be used anonymously for creating tenants, register devices and add credentials. However, data can only be added but
cannot be updated or removed
using the corresponding APIs. This is to prevent others from tampering with your tenants/devices/credentials. In order to minimize the risk of dissemination of data, all tenants, devices and credentials are
deleted periodically
.
We do not collect nor share with third parties any of the data you provide when registering tenants, devices and credentials. We also do not inspect nor collect nor share with third parties any of the data your devices publish to the sandbox.
Play fair!
The sandbox’s computing resources are (quite) limited. The number of devices that can be registered per tenant is therefore limited to 100.
The sandbox will be running the latest Hono release or milestone (if available). However, we may also deploy a more recent nightly build without further notice.
In order to minimize the risk of collisions of device identities and credentials and to reduce the risk of others
guessing
your identifiers, you are advised to use
non-trivial, hard-to-guess
tenant and device identifiers (e.g. a UUID).
The Apache Artemis instance we use for brokering events is configured with a maximum queue size of 1MB, i.e. you can only buffer up to 1 MB of events (per tenant) without having any consumer connected that actually processes the events. Once that limit is reached, no more events will be accepted by the protocol adapters for the corresponding tenant. In addition to that, events that are not consumed will automatically be removed from the queue(s) after five minutes.
The sandbox exposes its API endpoints on both a TLS secured as well as an unsecured port. The secure ports use a Let’s Encrypt certificate so you should not need to configure a specific trust store on your client in order to interact with them. Please note that when using the unsecured ports, the information you exchange with the sandbox might be exposed to eavesdroppers. We therefore
strongly suggest
that you use the secure ports only, if possible! When using the
Hono client
guide provides instructions on how to build Hono locally.
Release Notes
For a list of the changes in this release, take a look at the
release notes
.
Older versions
These versions are no longer supported and are listed here for reference purposes only.
Eclipse Hono 0.9 Archive
Eclipse Hono 0.9 Command Line Client
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
for installation instructions, if you do not have it installed already.
NB
The installation of the Mosquitto command line client is optional. If you do not install it then you will not be able to simulate an MQTT based device but otherwise will be able to get the same results described in this guide.
Hono Command Line Client
The Hono command line client is used in this guide for simulating an application that consumes telemetry data and events published by devices. The client is available from
Hono’s download page
. Note that running the command line client requires a Java 11 runtime environment being installed locally.
Hono Sandbox
The most important prerequisite is, of course, a Hono instance that you can work with.
The most straightforward option to use for this guide is the
Hono Sandbox
which is running on infrastructure provided by the Eclipse Foundation and which is publicly accessible from the internet.
Using the Sandbox, there is no need to set up your own Hono instance locally. However, it requires several non-standard ports being accessible from your computer which may not be the case, e.g. if you are behind a firewall restricting internet access to a few standard ports only.
You can verify if you can access the relevant ports of the Sandbox by running the following command and comparing the output:
If you get output like this
you can use the Sandbox. Run the following commands to set some environment variables which will be used during the guide
and then proceed to the
Overview of Hono Components
.
However, if the
curl
command yielded different output, you will need to set up Hono locally as described in the next section.
Setting up a local Hono Instance
In case you cannot access the Hono Sandbox as described above, you will need to set up an instance of Hono running on your local computer. For evaluation purposes a single node
View all
Subscribe to our RSS-feed
Community News
2019/09/17
Eclipse Che 7 is now available!
Che 7 is the biggest release in Eclipse Che history - focused on simplifying writing, building and collaborating on clou...
2019/09/11
From building blocks to IoT solutions
The Eclipse IoT ecosystem consists of around 40 different projects, ranging from embedded devices, to IoT gateways and u...
2019/09/11
Jakarta EE 8 Specifications Released by The Eclipse Foundation, Payara Platform Compatibility Coming Soon
The Jakarta EE 8 Full Platform, Web Profile specifications and related TCKs have been officially released today (Septemb...
2019/09/11
Open Liberty is Jakarta EE 8 compatible
Today is a big day in the enterprise Java world. Two years ago, Oracle announced their intention to move Java EE to the ...
View all
Subscribe to our RSS-feed
Eclipse Foundation by the Numbers
360+
Projects
1550+
Committers
275+
Members
10
Working Groups
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.0-M7)
dev
© 2019
To find out about the future development you can have a look at the
Roadmap
or
get in touch
with the Hono developers.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Jakarta JSON Binding
Jakarta JSON Processing
Jakarta Server Pages
Jakarta Standard Tag Library
Jakarta Transactions
Jakarta Mail
Eclipse Mojarra
Jakarta NoSQL
Eclipse OpenMQ
Eclipse ORB
Jakarta Servlet
Eclipse Soteria
Eclipse Tyrus
Jakarta WebSocket
Eclipse IoT
Eclipse Cyclone DDS
Eclipse Ditto
Eclipse fog05
Eclipse project_hip [archived]
Eclipse Hono
Eclipse ioFog
Eclipse Keyple
Eclipse Kiso
Eclipse Kuksa
Eclipse Mita
Commit your changes into your
feature branch
.
Use descriptive and meaningful commit messages.
Squash multiple commits related to the same feature/issue into a single one, if reasonable.
Make sure you use the
-s
flag when committing as explained above.
Push your changes to your branch in your forked repository.
Submitting the Changes
Submit a pull request via the normal GitHub UI.
After Submitting
Do not use your
feature branch
for any other development, otherwise further changes that you make will be visible in the PR.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
to access the sandbox’ Telemetry and/or Event APIs, make sure to not set a trust store explicitly but instead set the
tlsEnabled
property to
true
. The command line client binary is available from the
downloads page
and can be used to consume telemetry/event messages from the sandbox as below:
Note that only the
receiver
profile is activated but not the
ssl
profile.
Warning
Everybody who knows your tenant identifier will be able to consume data published by your devices and everybody who also knows the device identifier can read the registration information of that device.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
Minikube
cluster is sufficient to deploy Hono to.
Please refer to the
installation instructions
for setting up a local Minikube cluster, then
follow the
Deployment Guide
in order to install Hono to your local Minikube cluster.
Once Hono has been deployed to your local cluster, run the following commands to set some environment variables which will be used during the guide
Overview of Hono Components
Hono consists of a set of microservices which are deployed as Docker containers. The diagram below provides an overview of the containers that are part of the example deployment of Hono on the Sandbox or a local Minikube cluster.
Components of the example Hono deployment
Hono Instance
An
HTTP Adapter
instance that exposes Hono’s Telemetry and Event APIs as URI resources.
An
MQTT Adapter
instance that exposes Hono’s Telemetry and Event APIs as a generic MQTT topic hierarchy.
An
AMQP Adapter
instance that exposes Hono’s Telemetry and Event APIs as a set of AMQP 1.0 addresses.
A
Device Registry
instance that manages registration information and issues device registration assertions to protocol adapters.
An
Back to the top
Register for EclipseCon Europe 2019 today!
Register now and save! Early Bird pricing ends October 1.
Register
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn
theme.
navigation
Documentation
Learn about Hono™ and look-up details.
hljs.initHighlightingOnLoad();
mermaid.initialize({ startOnLoad: true });
Eclipse Packages
Eclipse SmartHome
Eclipse Tahu
Eclipse Thingweb
Eclipse Wakaama
LocationTech
Eclipse Modeling Project
Eclipse Agile UML
Eclipse Avsys
Eclipse Capra
Eclipse EMF
Eclipse Epsilon
Eclipse Hawk
Eclipse eTrice
Eclipse OCL
Eclipse Papyrus
Eclipse UML2
Eclipse XSD
Eclipse QVT-OML
Eclipse QVTd
Eclipse VIATRA
Eclipse Mylyn Docs
PolarSys B612
Eclipse Safety Framework
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Auth Server
instance that authenticates Hono components and issues tokens asserting identity and authorities.
AMQP Network
An
Apache Qpid Dispatch Router
instance that downstream applications connect to in order to consume telemetry data and events from devices.
An
Apache ActiveMQ Artemis
instance serving as the persistence store for events.
Monitoring Infrastructure
A
Prometheus
instance for storing metrics data from services and protocol adapters.
A
Grafana
instance providing a dash board visualizing the collected metrics data.
In the example scenario used in the remainder of this guide, the devices will connect to the HTTP and MQTT adapters in order to publish telemetry data and events. The devices will be authenticated using information stored in the Device Registry. The data is then forwarded downstream to the example application via the AMQP Messaging Network.
Registering Devices
When a device tries to connect to one of Hono’s protocol adapters, the protocol adapter first tries to authenticate the device using information kept in the Device Registry. The information maintained in the registry includes the
tenant
(a logical scope) that the device belongs to, the device’s unique
identity
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
PolarSys LibIMS
PolarSys OpenCert
PolarSys Time4Sys
Eclipse Runtime Project
Eclipse Vert.x
Eclipse Science
Eclipse StatET
Eclipse SWTChart
Eclipse Service Oriented Architecture
Eclipse Winery
Eclipse Technology
Eclipse APP4MC
Eclipse Basyx
Eclipse Bridge.IoT
Eclipse CogniCrypt
Eclipse Dynamic Languages Toolkit
Eclipse Git Team Provider
Eclipse Golo
Eclipse Handly
Eclipse Jemo
Eclipse LSP4J
Eclipse MDM|BL
Eclipse OMR
Eclipse OpenJ9
Eclipse openK User Modules
within the tenant and the
credentials
used by the device for authentication.
Before a device can connect to Hono and publish any data, the corresponding information needs to be added to the Device Registry.
Creating a new Tenant
Register a tenant using Hono’s Device Registry’s management HTTP API (a random tenant identifier will be generated):
Random tenant ID value
You will receive a randomly generated tenantId value. It will probably be different than the value given in this example. Make sure to export it to an environment variable to make the following steps easier:
Adding a Device to the Tenant
Register a device using Hono’s Device Registry’s management HTTP API (a random device identifier will be assigned):
Random device ID value
You will receive a randomly generated deviceId value. It will probably be different than the value given in this example. Make sure to export it to an environment variable to make the following steps easier:
Setting a Password for the Device
Choose a (random) password and register it using Hono’s Device Registry’s management HTTP API (replace
my-pwd
with your password):
Starting the example Application
Telemetry
and
Event API
s using the AMQP 1.0 transport protocol, subscribe to all telemetry and event messages and log the messages to the console.
Eclipse Packager
Eclipse Marketplace Client Project
Eclipse Passage
Eclipse RedDeer
Eclipse Repairnator
Eclipse SCAVA
Eclipse Signalling Engineering Toolbox
Eclipse sim@openPASS
Eclipse Sumo
Eclipse SW360antenna
Eclipse SystemFOCUS
Eclipse Tools Project
Eclipse C/C++ Development Tools
Eclipse Corrosion
Eclipse Dartboard
Eclipse Linux Tools
Eclipse LSPHub
Eclipse PHP Development Tools
Eclipse Parallel Tools Platform
Eclipse Photran
Eclipse Shellwax
Eclipse Wild Web Developer
Eclipse Web Tools Platform Project
Open a new terminal window and set the
AMQP_NETWORK_IP
environment variable. If you are using the Sandbox server:
Otherwise, if you are using a local Minikube cluster:
The client can then be started from the command line as follows (make sure to replace
my-tenant
with your tenant identifier):
Publishing Telemetry Data to the HTTP Adapter
Now that the downstream application is running, devices can start publishing telemetry data and events using Hono’s protocol adapters. First, you will simulate a device publishing data to Hono using the HTTP protocol. Go back to the original terminal and run:
If you have started the downstream application as described above, you should now see the telemetry message being logged to the application’s console in the other terminal. The output should look something like this:
You can publish more data simply by re-running the
curl
command above with arbitrary payload.
Service Unavailable
When you invoke the command above for the first time, you may get the following response:
This is because the first request to publish data for a given tenant is used as the trigger to establish a tenant specific sender link with the AMQP 1.0 Messaging Network to forward the data over. However, the HTTP adapter may not receive credits quickly enough for the request to be served immediately. You can simply ignore this response and re-submit the command.
If you haven’t started the application you will always get
503 Resource Unavailable
responses because Hono does not accept any telemetry data from devices if there aren’t any consumers connected that are interested in the data. The reason for this is that Hono
never
persists Telemetry data and thus it doesn’t make any sense to accept and process telemetry data if there is no consumer to deliver it to.
The HTTP Adapter also supports publishing telemetry messages using
at least once
Eclipse GlassFish Tools
About Us
Annual Report
Foundation
Governance
Legal Resources
Contact Us
ECA
Sign
Validation Tool
EPL-2.0
Plain HTML
Plain Text
PDF
FAQ
EPL-1.0
Plain HTML
Plain Text
FAQ
Licenses
Approved 3rd Party
Non Approved
Docs & examples
Back to the top
Register for EclipseCon Europe 2019 today!
delivery semantics. For information on how that works and additional examples for interacting with Hono via HTTP, please refer to the
HTTP Adapter’s User Guide
.
Publishing Events to the HTTP Adapter
In a similar way you can upload events:
Again, you should see the event being logged to the console of the downstream application.
Publishing Telemetry Data to the MQTT Adapter
Devices can also publish data to Hono using the MQTT protocol. If you have installed the
mosquitto_pub
command line client, you can run the following command to publish arbitrary telemetry data to Hono’s MQTT adapter using QoS 0:
Again, you should now see the telemetry message being logged to console of the downstream application.
The MQTT Adapter also supports publishing telemetry messages using QoS 1. For information on how that works and additional examples for interacting with Hono via MQTT, please refer to the
MQTT Adapter’s User Guide
.
Publishing Events to the MQTT Adapter
In a similar way you can upload events:
Again, you should now see the telemetry message being logged to console of the downstream application.
Congratulations
You have successfully connected a device to Hono and published sensor data for consumption by an application connected to Hono’s north bound API. The application used the AMQP 1.0 protocol to receive messages regardless of the transport protocol used by the device to publish the data.
What to try next?
Continue with the next sections to learn how applications can send commands to devices by means of the
Command & Control API
.
Take a look at some of the metrics collected by Hono’s components by opening the Hono dashboard. On the Sandbox server the dashboard is available at
Register now and save! Early Bird pricing ends October 1.
Register
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
https://hono.eclipse.org:3000
. When running a local Minikube cluster, please refer to
Opening the Dashboard
for instructions.
Check out the
User Guides
to explore more options for devices to connect to Hono using different transport protocols.
Learn more about the managing tenants, devices and credentials using the
Device Registry’s HTTP API
.
Sending Commands to a Device
Starting the example application
Hono comes with an example application (located in the
example
module) that is as small as possible but still covers the main message communication patterns. This application also supports Command & Control.
Please start (and potentially configure) the application as described
here
. The application writes the payload of incoming messages to standard output and will serve to view how messages are received and sent by Hono.
After the application has been successfully connected to the AMQP 1.0 network, it is time to send an appropriate downstream message to the HTTP protocol adapter to trigger the sending of a command.
Note that it is the responsibility of the application to send a command - to illustrate how this is done, the example application sends a command
setBrightness
when it receives a downstream message that has a valid
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
time until disconnect
parameter set. Refer to the usage of the helper class
MessageTap
in the example code as a blueprint for writing your own application.
Uploading Data and receiving a Command
To simulate an HTTP device, we use the standard tool
curl
to publish some JSON data for the device
4711
. To signal that the device is willing to receive and process a command, the device uploads a telemetry or event message and includes the
hono-ttd
request parameter to indicate the number of seconds it will wait for the response:
Watch the example application that receives the message - on the console you will find a line looking similar to the following:
and some lines below
The response to the
curl
command contains the command from the example application and looks like the following:
The example application sets the
brightness
to a random value between 0 and 100 on each invocation. It also generates a unique correlation identifier for each new command to be sent to the device. The device will need to include this identifier in its response to the command so that the application can properly correlate the response with the request.
NB:
If the application would send a
one-way command
instead (see
Command and Control Concepts
), the
hono-cmd-req-id
response header would be missing.
Note
If you are running Hono on another node than the application, e.g. using
Minikube
or
Minishift
, and the clock of that node is not in sync with the node that your (example) application is running on, then the application might consider the
time til disconnect
indicated by the device in its
hono-ttd
parameter to already have expired. This will happen if the application node’s clock is ahead of the clock on the HTTP protocol adapter node. Consequently, this will result in the application
not
sending any command to the device.
Thus, you need to make sure that the clocks of the node running the application and the node running the HTTP protocol adapter are synchronized (you may want to search the internet for several solutions to this problem).
Uploading the Response to the Command
If the received command was
not
a
one-way command
, and the device has received the command and has processed it, it needs to inform the application about the outcome. For this purpose the device uploads the result to the HTTP adapter using a new HTTP request. The following command simulates the device uploading some JSON payload indicating a successful result:
NB
Make sure to issue the command above before the application gives up on waiting for the response. By default, the example application will wait for as long as indicated in the
hono-ttd
parameter of the uploaded telemetry message. Also make sure to use the actual value of the
hono-cmd-req-id
header from the HTTP response that contained the command.
Using CLI (command line interface) to send Commands and receive Command responses
The command line client from the
cli
module supports the interactive sending of commands to connected devices. In order to do so, the client needs to be run with the
command
profile as follows:
The client will prompt the user to enter the command’s name, the payload to send and the payload’s content type. For more information about command and payload refer to
Command and Control Concepts
.
The example below illustrates how a command to set the volume with a JSON payload is sent to device
4711
.
In the above example, the client waits up to 60 seconds for the response from the device before giving up. For more information on how to connect devices, receive commands and send responses refer to
Commands using HTTP
and
Commands using MQTT
.
The received command response
{"result":"success"}
is displayed as shown in the below example.
Note
The command line client also supports sending of
one-way
commands to a device, i.e. commands for which no response is expected from the device. In order to send a one-way command, the command name needs to be prefixed with
ow:
, e.g.
ow:setVolume
. The client will then not wait for a response from the device but will consider the sending of the command successful as soon as the command message has been accepted by Hono.
The command line argument
command.timeoutInSeconds
can be used to set the timeout period (default is 60 seconds). The command line arguments
device.id
and
tenant.id
provide the device and tenant ID of the device that you want to send commands to.
Summary
The following parts of Hono are involved in the upper scenario:
HTTP protocol adapter: detects the
hono-ttd
parameter in the request and opens an AMQP 1.0 receiver link with the AMQP 1.0 Messaging Network in order to receive commands for the device
example application: receives a telemetry message with
hono-ttd
which invokes an application internal callback that sends a command to the HTTP adapter via the opened receiver link. Additionally it opens a receiver link for any responses.
HTTP protocol adapter: receives the command and forwards it to the device in the HTTP response body
Device sends result of processing the command to HTTP adapter which then forwards it to the application
The
Command and Control Concepts
page contains sequence diagrams that explain this in more detail.
More
GitHub Repository
Twitter
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Development Resources/Process Guidelines/What is Incubation - Eclipsepedia
document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );
a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
Skip to main content
Download
Members
Working Groups
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Eclipse IDE
Download
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Eclipse IDE
Download
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Toggle navigation
Breadcrumbs
Home
Eclipse Wiki
Development Resources/Process Guidelines/What is Incubation
Log in
Jump to:
navigation
,
search
---Navigation---
Main Page
Community portal
Current events
Recent changes
Random page
Help
Navigation
Main Page
Community portal
Current events
Recent changes
Random page
Help
---Toolbox---
Page information
Permanent link
Printable version
Special pages
Related changes
What links here
Toolbox
Page information
Permanent link
Printable version
Special pages
Related changes
What links here
Page
Discussion
View source
History
Development Resources/Process Guidelines/What is Incubation
<
Development Resources
Project committers are invited to join the
Incubation mailing list
to discuss issues related to incubation, ask questions of project mentors, and just generally connect with other members of the community involved with projects in the incubation phase.
What is Incubation?
See "
6.2.3 Incubation Phase
" in the Eclipse Development Process.
The web page you were last at belongs to an Eclipse Project that is in the Incubation Phase. Incubation indicates that the Eclipse community is helping this project "learn the ropes" about being a full open source project producing high quality extensible frameworks and exemplary tools. Projects typically stay in the incubation phase for a year or two before graduating to the Mature Phase.
The classification of a project in the Incubation Phase is not a statement about the quality of the project's code - it may be good (in fact, Eclipse Projects are often excellent), it may not - as with all open-source projects, that is for you to decide. Rather, Incubation Phase is more about the project team's progress in practicing the open and public processes necessary to establish the three communities (developers, adopters, and users) around the project.
For more information about Incubation Phase, read the
Eclipse Development Process
and/or the
Guidelines for Incubation Phase
.
This page is moderated by the EMO
Category
:
Development Resources
Retrieved from "
http://wiki.eclipse.org/index.php?title=Development_Resources/Process_Guidelines/What_is_Incubation&oldid=394589
"
This page was last modified 11:24, 7 December 2015 by
Wayne Beaton
. Based on work by
Bjorn Freeman-Benson
.
Back to the top
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
