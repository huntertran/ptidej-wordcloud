Welcome :: Eclipse Hono™
Welcome - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Connect. Command. Control.
Eclipse Hono™ provides remote service interfaces for connecting large numbers of IoT devices to a back end and interacting with them in a uniform way regardless of the device communication protocol.
Millions of Devices
Hono is designed for connecting large numbers of IoT devices. Its micro service based architecture and use of a reactive programming model allow for scaling out horizontally.
Uniform API
Connect a multitude of different types of devices to your (cloud) back end. Communicate with all of them via the same simple API regardless of the device protocol.
IoT Protocols
Hono supports devices communicating via common IoT protocols like HTTP, MQTT and AMQP out of the box.
Messaging Patterns
Hono provides APIs for important IoT communication patterns:
Telemetry
and
Event
messages can be used by devices to report sensor readings whereas applications can use
Command & Control
to invoke operations on devices.
Secure
Hono is designed for security by default. It supports common authentication mechanisms like username/password and X.509 client certificates to verify a device’s identity and uses transport layer security (TLS) when communicating with devices.
Extensible
Your device uses a custom protocol? Hono provides a simple mechanism to add custom protocol adapters.
Who uses Eclipse Hono?
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Thank you :: Eclipse Hono™
Thank you - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Thank you
YourKit is kindly supporting this open source project with its full-featured Java Profiler. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit’s leading software products:
YourKit Java Profiler
and
YourKit .NET Profiler
.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Documentation :: Eclipse Hono™
var baseurl = "https:\/\/www.eclipse.org\/hono\/docs\/";
Concepts
Device Identity
Multi-Tenancy
Device Notifications
Command & Control
Resource limits
Connection Events
User Guide
Device Registry
HTTP Adapter
MQTT Adapter
AMQP Adapter
Kura Adapter
Sigfox Adapter
Load Tests with JMeter
Admin Guide
Common Configuration
Auth Server Configuration
Device Registry Configuration
Device Connection Service Configuration
HTTP Adapter Configuration
AMQP Adapter Configuration
MQTT Adapter Configuration
Kura Adapter Configuration
Hono Client Configuration
AMQP 1.0 Messaging Network Configuration
Secure Communication
Monitoring & Tracing
Developer Guide
Building from Source
Consuming Messages from Java
Implement a Custom Hono HTTP Protocol Adapter
API
Telemetry API
Event API
Command & Control API
Tenant API
Device Connection API
Device Registration API
Credentials API
Authentication API
Device Registry Management API
Metrics
Deployment
Helm based Deployment
OpenShift / OKD
Setting up a Kubernetes Cluster
Limiting Resource Usage
Architecture
Component View
Authentication/Authorization
Hono Home
Getting Started
Version:
stable (1.0)
dev
© 2020
The Eclipse Hono Project
Documentation built with
Hugo
using the
Learn
theme.
navigation
Documentation
Learn about Eclipse Hono™ and look up details.
hljs.initHighlightingOnLoad();
Getting started with Eclipse Hono :: Eclipse Hono™
Getting started with Eclipse Hono - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch :: Eclipse Hono™
Get in Touch - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Get in Touch
Wanna tell us what you think about Eclipse Hono™? What we can improve? Which feature is missing? Or just discuss architectural issues?
Ask a Question
We would be delighted to answer your questions regarding the usage of Hono on
StackOverflow
. Make sure to add the
eclipse-hono
tag to your question so that we can easily find (and answer) it.
Report an Issue
The easiest way to tell us about a problem you experience with Hono is by
opening an issue on our GitHub page
.
Please make sure to search the existing issues for similar symptoms before you open a new issue.
Chat
The most direct way of interacting with the Hono developers is by means of
joining our room on Gitter
.
Keep in mind, though, that our Gitter room is mainly used by committers and contributors for discussing issues related to development of new features and organizational stuff. The preferred way of posting questions regarding usage of Hono is via
StackOverflow
.
Downloads :: Eclipse Hono™
Downloads - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Downloads
Binaries
Eclipse Hono’s service components are provided by means of pre-built Docker images available from
Docker Hub
. These container images can be deployed to popular container orchestration platforms like Kubernetes and OpenShift.
The release archive contains all files necessary to deploy Hono to a Kubernetes cluster using the
Helm package manager
.
Eclipse Hono 1.0.3 Helm Chart
Download and extract the archive and follow the
deployment guide
.
A Java based command line client for consuming telemetry data and events from Hono is available for download as well:
Eclipse Hono 1.0.3 Command Line Client
The client requires a Java 11 runtime environment to run.
Please refer to the
Admin Guide
for details regarding the command line options that the client supports.
Milestones
Road Map :: Eclipse Hono™
Road Map - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Road Map
We are trying our best to anticipate the needs and requirements of users based on the feedback we get from users. From this information we maintain a
Road Map
for the next several releases.
We try to maintain a steady pace of releases every three months with milestones in between. However, due to changes in requirements over time and because we all have only limited time to spend on Hono, the scope of the releases may change over time as well. The best way to make sure that a certain feature that you anticipate or need the most actually makes it into a release, is by
becoming a contributor
and/or committer to Hono yourself.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
Get in Touch
Road Map
Getting started with Eclipse Hono
This guide will walk you through an interactive example usage scenario of Eclipse Hono. You will learn how devices can use Hono’s protocol adapters to publish telemetry data and events using both HTTP and/or MQTT. You will also see how a downstream application can consume this data using Hono’s north bound API without requiring the application to know anything about the specifics of the communication protocols used by the devices.
Prerequisites for the Getting started Guide
This guide requires several tools to be installed on your computer. During the course of this guide, the devices publishing data will be represented by means of running some command line tools for posting HTTP requests and for publishing MQTT packets.
Curl HTTP Command Line Client
The
curl
command is used in this guide for registering devices with Hono and for simulating a device publishing data using HTTP. On most *nix like systems
curl
will probably already be installed. Otherwise, please refer to the
Curl project page
for installation instructions.
Mosquitto MQTT Command Line Client
The
mosquitto_pub
command is used in this guide for simulating a device publishing data using the MQTT protocol. Please refer to the
Mosquitto project page
for installation instructions, if you do not have it installed already.
NB
The installation of the Mosquitto command line client is optional. If you do not install it then you will not be able to simulate an MQTT based device but otherwise will be able to get the same results described in this guide.
Hono Command Line Client
The Hono command line client is used in this guide for simulating an application that consumes telemetry data and events published by devices. The client is available from
Hono’s download page
. Note that running the command line client requires a Java 11 runtime environment being installed locally.
Hono Sandbox
The most important prerequisite is, of course, a Hono instance that you can work with.
The most straightforward option to use for this guide is the
Hono Sandbox
which is running on infrastructure provided by the Eclipse Foundation and which is publicly accessible from the internet.
Using the Sandbox, there is no need to set up your own Hono instance locally. However, it requires several non-standard ports being accessible from your computer which may not be the case, e.g. if you are behind a firewall restricting internet access to a few standard ports only.
You can verify if you can access the relevant ports of the Sandbox by running the following command and comparing the output:
If you get output like this
you can use the Sandbox. Run the following commands to set some environment variables which will be used during the guide
and then proceed to the
Overview of Hono Components
.
However, if the
curl
command yielded different output, you will need to set up Hono locally as described in the next section.
Setting up a local Hono Instance
In case you cannot access the Hono Sandbox as described above, you will need to set up an instance of Hono running on your local computer. For evaluation purposes a single node
Minikube
cluster is sufficient to deploy Hono to.
Mailing List
An excellent way to get the latest news and announcements around Hono is to
join the mailing list
. This is the place where we announce new releases and discuss architectural issues of greater impact.
Project Call
There is a bi-weekly community call which is open to everyone interested in the development of Hono. You can join by using the following link:
https://bluejeans.com/494114785
You can also import the calendar file
project-call.ics
which contains more information about joining by computer or telephone.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
The newest features and bug fixes are available in
milestones
that are published every 4 -6 weeks. Please note that these milestones represent the latest
state of development
which also means that APIs or features may change from one milestone to the other. Milestones are mainly intended for testing purposes and should generally not be used in a production environment.
Installation works the same way as for the latest stable release.
Eclipse Hono 1.1.0-M2 Helm Chart
Eclipse Hono 1.1.0-M2 Command Line Client
Eclipse Hono 1.1.0-M1 Helm Chart
Eclipse Hono 1.1.0-M1 Command Line Client
Source Code
The source code can be cloned (using
Git
) or downloaded from the
Eclipse Hono GitHub repository
. The
Building from Source
guide provides instructions on how to build Hono locally.
Release Notes
For a list of the changes in this release, take a look at the
release notes
.
Previous versions
Eclipse Hono 1.0.2 Helm Chart
Eclipse Hono 1.0.2 Command Line Client
Eclipse Hono 1.0.1 Helm Chart
Eclipse Hono 1.0.1 Command Line Client
Eclipse Hono 1.0.0 Archive
Eclipse Hono 1.0.0 Command Line Client
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
. Ported to Hugo by
DevCows
Please refer to the
installation instructions
for setting up a local Minikube cluster, then
follow the
Deployment Guide
in order to install Hono to your local Minikube cluster.
Once Hono has been deployed to your local cluster, run the following commands to set some environment variables which will be used during the guide
Verify the last step with
If this does not print an IP address, check that
minikube tunnel
is running.
Overview of Hono Components
Hono consists of a set of microservices which are deployed as Docker containers. The diagram below provides an overview of the containers that are part of the example deployment of Hono on the Sandbox or a local Minikube cluster.
Components of the example Hono deployment
Hono Instance
An
HTTP Adapter
instance that exposes Hono’s Telemetry and Event APIs as URI resources.
An
MQTT Adapter
instance that exposes Hono’s Telemetry and Event APIs as a generic MQTT topic hierarchy.
An
AMQP Adapter
instance that exposes Hono’s Telemetry and Event APIs as a set of AMQP 1.0 addresses.
A
Device Registry
instance that manages registration information and issues device registration assertions to protocol adapters.
An
Auth Server
instance that authenticates Hono components and issues tokens asserting identity and authorities.
AMQP Network
An
Apache Qpid Dispatch Router
instance that downstream applications connect to in order to consume telemetry data and events from devices.
An
Apache ActiveMQ Artemis
instance serving as the persistence store for events.
Monitoring Infrastructure
A
Prometheus
instance for storing metrics data from services and protocol adapters.
A
Grafana
instance providing a dash board visualizing the collected metrics data.
Frequently Asked Questions :: Eclipse Hono™
Frequently Asked Questions - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Frequently Asked Questions
FAQ is moving to Stack Overflow
The preferred support channel on which the Hono community would like to receive questions from users and answer them is
Stackoverflow
. There is the special tag
[eclipse-hono]
, that the Hono developers keep watching. This FAQ page here will be removed soon.
Why do I get
HTTP/1.1 503 Service Unavailable
when sending messages to the HTTP protocol adapter?
See the accepted answer on
Stackoverflow
.
Why do I get the exception
io.vertx.core.VertxException: OpenSSL is not available
during startup of a protocol adapter?
See the accepted answer on
Stackoverflow
.
Why do I see
ConnectionLimitManager - Connection limit (<VALUE>) exceeded
in the logs of a protocol adapter?
See the accepted answer on
Resources :: Eclipse Hono™
Resources - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Resources
On this page you can find links to arbitrary resources covering Eclipse Hono™ which have been presented at events, conferences and meet-ups or are available online.
“X.509 based device authentication in Eclipse Hono” (Blog post February 2019)
Author: Kai Hudalla (Bosch Software Innovations)
Article
“Eclipse Hono: Command and Control” (Talk at eclipsecon Europe October 2018)
Talk description
(October 23, 2018)
Speaker : Karsten Frank (Bosch Software Innovations)
Slides
“Using multi-tenancy in Eclipse Hono” (Blog post April 2018)
Author : Kai Hudalla (Bosch Software Innovations)
Article
“Eclipse Hono: Connecting large numbers of IoT devices” (Blog post January 2018)
Authors :
Dejan Bosanac
Sandbox :: Eclipse Hono™
Sandbox - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Sandbox
We are providing a publicly accessible Eclipse Hono™
sandbox
environment at
hono.eclipseprojects.io
. The main purpose of the system is to provide an environment for experimenting with devices and how to connect them to Hono without the need for setting up a local instance.
Deprecated domain name
The sandbox used to be available at
hono.eclipse.org
. That domain name will still work for some time but will eventually be disabled. Please update your URLs accordingly.
The sandbox hosts a Hono instance consisting of the same components as described in the
Getting started Guide
. All services are exposed via the same ports as used in the guide.
Take note
The sandbox is intended for
testing purposes only
. Under no circumstances should it be used for any production use case. It is also
Contributing :: Eclipse Hono™
Contributing - go to homepage
Toggle Navigation
Getting started
Documentation
Download
Sandbox
FAQ
Community
Contributing
Resources
Get in Touch
Road Map
Contributing
Thank you for considering to contribute to Eclipse Hono™. We really appreciate the time and effort you want to spend helping to improve things around here. And help we can use :-)
Here is a (non-exclusive, non-prioritized) list of things you might be able to help us with:
bug reports
bug fixes
improvements regarding code quality e.g. improving readability, performance, modularity etc.
documentation (Getting Started guide, Examples, Deployment instructions for cloud environments)
features (both ideas and code are welcome)
You might also want to take a look at our
GitHub Issues
page and see if you can help out with any of the issues listed. We have put a
help wanted
label on those issues that we are particularly keen on receiving contributions for.
Eclipse Contributor Agreement
Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).
http://www.eclipse.org/legal/ECA.php
Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.
In the example scenario used in the remainder of this guide, the devices will connect to the HTTP and MQTT adapters in order to publish telemetry data and events. The devices will be authenticated using information stored in the Device Registry. The data is then forwarded downstream to the example application via the AMQP Messaging Network.
Registering Devices
When a device tries to connect to one of Hono’s protocol adapters, the protocol adapter first tries to authenticate the device using information kept in the Device Registry. The information maintained in the registry includes the
tenant
(a logical scope) that the device belongs to, the device’s unique
identity
within the tenant and the
credentials
used by the device for authentication.
Before a device can connect to Hono and publish any data, the corresponding information needs to be added to the Device Registry.
Creating a new Tenant
Register a tenant using Hono’s Device Registry’s management HTTP API (a random tenant identifier will be generated):
Random tenant ID value
You will receive a randomly generated tenantId value. It will probably be different than the value given in this example. Make sure to export it to an environment variable to make the following steps easier:
Adding a Device to the Tenant
Register a device using Hono’s Device Registry’s management HTTP API (a random device identifier will be assigned):
Random device ID value
You will receive a randomly generated deviceId value. It will probably be different than the value given in this example. Make sure to export it to an environment variable to make the following steps easier:
Setting a Password for the Device
Choose a (random) password and register it using Hono’s Device Registry’s management HTTP API (replace
my-pwd
with your password):
Starting the example Application
Telemetry
and
Event API
s using the AMQP 1.0 transport protocol, subscribe to all telemetry and event messages and log the messages to the console.
Open a new terminal window and set the
AMQP_NETWORK_IP
environment variable. If you are using the Sandbox server:
Otherwise, if you are using a local Minikube cluster:
The client can then be started from the command line as follows (make sure to replace
my-tenant
with your tenant identifier):
Publishing Telemetry Data to the HTTP Adapter
Now that the downstream application is running, devices can start publishing telemetry data and events using Hono’s protocol adapters. First, you will simulate a device publishing data to Hono using the HTTP protocol. Go back to the original terminal and run:
If you have started the downstream application as described above, you should now see the telemetry message being logged to the application’s console in the other terminal. The output should look something like this:
You can publish more data simply by re-running the
curl
command above with arbitrary payload.
Service Unavailable
When you invoke the command above for the first time, you may get the following response:
This is because the first request to publish data for a given tenant is used as the trigger to establish a tenant specific sender link with the AMQP 1.0 Messaging Network to forward the data over. However, the HTTP adapter may not receive credits quickly enough for the request to be served immediately. You can simply ignore this response and re-submit the command.
Stackoverflow
.
Why do I see
MemoryBasedConnectionLimitStrategy - Not enough memory
in the logs of a protocol adapter?
See the accepted answer on
Stackoverflow
.
How do I use client certificates for authentication?
See the accepted answer on
Stackoverflow
.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
(Red Hat), Karsten Frank (Bosch Software Innovations),
Paolo Patierno
(Red Hat)
Article
“Eclipse Hono: Connect. Command. Control.” at Virtual IoT Meetup
Virtual IoT Meetup
hosted by Eclipse Foundation (October 11, 2017)
Speakers : Kai Hudalla (Bosch Software Innovations),
Paolo Patierno
(Red Hat)
Video
and
slides
“Eclipse Hono: Connect. Command. Control.” at Eclipse Day Milan 2017
Eclipse Day Milan 2017
(September 22, 2017)
Speaker :
Paolo Patierno
(Red Hat)
Slides
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
not allowed
to register with nor publish any personally identifiable information to any of the sandbox’s services.
You can use the sandbox without revealing who you are or any information about yourself. The APIs of the Device Registry running on the sandbox can be used anonymously for creating tenants, register devices and add credentials. However, data can only be added but
cannot be updated or removed
using the corresponding APIs. This is to prevent others from tampering with your tenants/devices/credentials. In order to minimize the risk of dissemination of data, all tenants, devices and credentials are
deleted periodically
.
We do not collect nor share with third parties any of the data you provide when registering tenants, devices and credentials. We also do not inspect nor collect nor share with third parties any of the data your devices publish to the sandbox.
Play fair!
The sandbox’s computing resources are (quite) limited. The number of devices that can be registered per tenant is therefore limited to 100.
The sandbox will be running the latest Hono release or milestone (if available). However, we may also deploy a more recent nightly build without further notice.
In order to minimize the risk of collisions of device identities and credentials and to reduce the risk of others
guessing
your identifiers, you are advised to use
non-trivial, hard-to-guess
tenant and device identifiers (e.g. a UUID).
The Apache Artemis instance we use for brokering events is configured with a maximum queue size of 1MB, i.e. you can only buffer up to 1 MB of events (per tenant) without having any consumer connected that actually processes the events. Once that limit is reached, no more events will be accepted by the protocol adapters for the corresponding tenant. In addition to that, events that are not consumed will automatically be removed from the queue(s) after five minutes.
The sandbox exposes its API endpoints on both a TLS secured as well as an unsecured port. The secure ports use a Let’s Encrypt certificate so you should not need to configure a specific trust store on your client in order to interact with them. Please note that when using the unsecured ports, the information you exchange with the sandbox might be exposed to eavesdroppers. We therefore
strongly suggest
that you use the secure ports only, if possible! When using the
Hono client
to access the sandbox’ Telemetry and/or Event APIs, make sure to not set a trust store explicitly but instead set the
tlsEnabled
property to
true
. The command line client binary is available from the
downloads page
and can be used to consume telemetry/event messages from the sandbox as below:
Note that only the
receiver
profile is activated but not the
ssl
profile.
Warning
Everybody who knows your tenant identifier will be able to consume data published by your devices and everybody who also knows the device identifier can read the registration information of that device.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
For more information, please see the Eclipse Committer Handbook:
https://www.eclipse.org/projects/handbook/#resources-commit
Conventions
The
groupId
of all Hono modules is
org.eclipse.hono
,
artifactId
always starts with
hono-
.
Modules producing a Docker image generally use
as the image’s repository name.
All code complies with the formatting rules defined by the settings files in the
eclipse
folder.
Modules implementing one of the Hono APIs are sub-modules of
services
.
Making your Changes
Fork the repository on GitHub
.
Create a new
feature branch
for your changes.
Make your changes.
Make sure your code complies with the formatting rules defined by the settings files in the
eclipse
folder.
If you are creating new class files, make sure that they include a
proper copyright header
at the top. Any new file created should contain a header based on the following template:
Do not forget to add yourself or your organization to the copyright holder list in the NOTICE file in the parent folder if you haven’t already done so in a previous contribution.
Make sure you include test cases for non-trivial features.
Make sure the test suite passes after your changes.
Commit your changes into your
feature branch
.
Use descriptive and meaningful commit messages.
Squash multiple commits related to the same feature/issue into a single one, if reasonable.
Make sure you use the
-s
flag when committing in order to add a
Signed-off-by
footer as mentioned above.
Push your changes to your branch in your forked repository.
If you haven’t started the application you will always get
503 Resource Unavailable
responses because Hono does not accept any telemetry data from devices if there aren’t any consumers connected that are interested in the data. The reason for this is that Hono
never
persists Telemetry data and thus it doesn’t make any sense to accept and process telemetry data if there is no consumer to deliver it to.
The HTTP Adapter also supports publishing telemetry messages using
at least once
delivery semantics. For information on how that works and additional examples for interacting with Hono via HTTP, please refer to the
HTTP Adapter’s User Guide
.
Publishing Events to the HTTP Adapter
In a similar way you can upload events:
Again, you should see the event being logged to the console of the downstream application.
Publishing Telemetry Data to the MQTT Adapter
Devices can also publish data to Hono using the MQTT protocol. If you have installed the
mosquitto_pub
command line client, you can run the following command to publish arbitrary telemetry data to Hono’s MQTT adapter using QoS 0:
Again, you should now see the telemetry message being logged to console of the downstream application.
The MQTT Adapter also supports publishing telemetry messages using QoS 1. For information on how that works and additional examples for interacting with Hono via MQTT, please refer to the
MQTT Adapter’s User Guide
.
Publishing Events to the MQTT Adapter
In a similar way you can upload events:
Again, you should now see the telemetry message being logged to console of the downstream application.
Congratulations
You have successfully connected a device to Hono and published sensor data for consumption by an application connected to Hono’s north bound API. The application used the AMQP 1.0 protocol to receive messages regardless of the transport protocol used by the device to publish the data.
What to try next?
Continue with the next sections to learn how applications can send commands to devices by means of the
Command & Control API
.
Take a look at some of the metrics collected by Hono’s components by opening the Hono dashboard. On the Sandbox server the dashboard is available at
https://hono.eclipseprojects.io:3000
. When running a local Minikube cluster, please refer to
Opening the Dashboard
for instructions.
Check out the
User Guides
to explore more options for devices to connect to Hono using different transport protocols.
Learn more about the managing tenants, devices and credentials using the
Device Registry’s HTTP API
.
Advanced: Sending Commands to a Device
The following example will guide you through an advanced feature of Hono. You will see how an application can send a command to a device and receive a response with the result of processing the command on the device. The communication direction here is exactly the other way round than with telemetry and events.
The following assumes that the steps in the
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Submitting the Changes
Submit a pull request via the GitHub UI.
After Submitting
Do not use your
feature branch
for any other development, otherwise further changes that you make will be visible in the PR.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Prerequisites for the Getting started Guide
and
Registering Devices
sections above have been completed. To simulate the device, you can use the Mosquitto tools again while the Hono Command Line Client simulates the application as before.
Receiving a Command
With the
mosquitto_sub
command you simulate an MQTT device that receives a command. Create a subscription to the command topic in the terminal for the simulated device (don’t forget to set the environment variables
MQTT_ADAPTER_IP
,
MY_TENANT
and
MY_DEVICE
)
Now that the device is waiting to receive commands, the application can start sending them. Start the Command Line Client in the terminal for the application side (don’t forget to set the environment variables
AMQP_NETWORK_IP
,
MY_TENANT
and
MY_DEVICE
)
Note that this time the profile is
command
instead of
receiver
, which enables a different mode of the Command Line Client.
The client will prompt you to enter the command’s name, the payload to send and the payload’s content type. The example below illustrates how a one-way command to set the volume with a JSON payload is sent to the device.
In the terminal for the simulated device you should see the received command as follows
Sending a Response to a Command
Now that you have sent a one-way command to the device, you may get to know
request/response
commands where the device sends a response to the application. A
request/response
command received from an application contains an identifier that is unique to each new command. The device must include this identifier in its response so that the application can correctly correlate the response with the request.
If you send a
request/response
command like this
the application will wait up to 60 seconds for the device’s response.
In the terminal for the simulated device you should see the received command that looks like this
The element between
req
and
setBrightness
is the request identifier that must be included in the response.
You can cancel the command
mosquitto_sub
in the terminal of the device (press the key combination
Ctrl + C
) to reuse the configuration with the environment variables for sending the response. The following example shows how an answer can be sent with MQTT. Note that the actual identifier from the received command must be used.
The
eclipse/hono - Gitter
200
at the end of the topic is an HTTP status code that reports the result of processing the command to the application.
If the Command Line Client has successfully received the response in time, it will print it to the console. This looks like this:
If the 60 seconds have already expired, an error message is logged. In this case you can send a new command or restart the Command Line Client with a higher timeout (append
--command.timeoutInSeconds=120
).
Congratulations. Now you have successfully sent commands to a device and responded to them. For more information on Command & Control refer to
Commands using HTTP
and
Commands using MQTT
. The
Command and Control Concepts
page contains sequence diagrams that explain this in more detail.
More
GitHub Repository
Twitter
Chat with us
Thank you
Eclipse Legal
Privacy Policy
Terms of Use
Copyright Agent
Legal
License
Report a Vulnerability
© 2019 The Eclipse Hono Project
Template by
Bootstrapious
. Ported to Hugo by
DevCows
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community
Explore more communities
eclipse/hono
Connect. Command. Control.
People
Repo info
Activity
Feb 03 22:00
codecov[bot]
commented
#1683
Feb 03 22:00
eriksven
synchronize
#1683
Feb 03 18:51
sophokles73
on master
Migrate assertions to AssertJ …
Migrate assertions to AssertJ …
Migrate assertions to AssertJ …
and 2 more
(compare)
Feb 03 16:43
sophokles73
on master
Use JUnit 5 assertions Signed-…
Upgrade to latest checkstyle Ma…
(compare)
Feb 03 16:39
sophokles73
on master
Migrate unit tests to JUnit 5 …
(compare)
Feb 03 14:38
sophokles73
on 1.0.x
Fix environment variable names …
(compare)
Feb 03 14:34
sophokles73
on master
Fix environment variable names …
(compare)
Feb 03 14:31
calohmn
closed
#1739
Feb 03 14:30
calohmn
commented
#1739
Feb 03 14:30
calohmn
milestoned
#1739
Feb 03 14:30
calohmn
assigned
#1739
Feb 03 14:29
calohmn
on master
[#1739] Update to Swagger UI 3.…
(compare)
Feb 03 14:26
calohmn
edited
#1739
Feb 03 14:06
sophokles73
commented
#1711
Feb 03 13:58
sophokles73
on master
Migrate unit tests to JUnit 5 …
Migrate unit tests to Junit 5 …
(compare)
Feb 03 13:47
calohmn
labeled
#1739
Feb 03 13:47
calohmn
opened
#1739
Feb 03 13:44
calohmn
commented
#1736
Feb 03 12:29
calohmn
commented
#1737
Feb 03 12:28
calohmn
on master
[#1328] Add release notes entry…
(compare)
Dejan Bosanac
@dejanb
@sophokles73
absolutely ... currently tied in some enmasse stuff, but will be coming back to it soon ... I'll review Carsten's trace PR today as we definitely want to have alignment there
Kai Hudalla
@sophokles73
@dejanb
@ctron
@calohmn
WDYT regarding the release/milestone?
Dejan Bosanac
@dejanb
@sophokles73
I'm fine with postponing it
Jens Reimann
@ctron
Regarding the current documentation links, I just found that we have:
stable ->
https://www.eclipse.org/hono/docs/api/metrics/
dev ->
https://www.eclipse.org/hono/docs/dev/api/metrics/
But we do not have:
1.0 ->
https://www.eclipse.org/hono/docs/1.0/api/metrics/
1.0.0 ->
https://www.eclipse.org/hono/docs/1.0.0/api/metrics/
My understanding is, that currently you can only link to "stable" when you want to target 1.0, and when we switch to 1.1.x, all those links will automatically link to 1.1 instead of 1.0.
Abel Büchner-Mihaljević
@b-abel
My understanding is, that currently you can only link to "stable" when you want to target 1.0, and when we switch to 1.1.x, all those links will automatically link to 1.1 instead of 1.0.
@ctron
That's correct. Do you think we need the documentation to be available under 1.0 (in addition to the path for the stable version)? At first, I thought so too, but I don't see an example where this would be necessary. The link to stable
could
eventually become obsolete (if the content changes), but a link to a specific version will definitely disappear when that version is no longer supported. So normally I would link to stable.
With the release of 1.1.0 we will have:
stable (1.1)
1.0
dev
Jens Reimann
@ctron
Well the problem with tath approach is, I cannot link to 1.0 … So, when I do point to e.g. the metrics sections, then a future version (1.1) might provide more metrics than 1.0 …
Kai Hudalla
@sophokles73
@all
I have posted a proposal for a definition of what constitutes Hono's public API on the mailing list. Would be great if you could provide some feedback so that we can settle on and use it for the 1.1.0 release ...
Abel Büchner-Mihaljević
@b-abel
@ctron
Yes, normally I do not know if anything will change for future versions. Therefore I would set external links to
stable
so that readers would at least find something similar, rather than linking to a (minor) version, which could lead to a 404 after a few months. As a user, I would rather have to find out which property might have changed instead of having to search the whole site (and possibly end up elsewhere).
Abel Büchner-Mihaljević
@b-abel
But if you feel that we need this, I could add it easily...
Jens Reimann
@ctron
I think we should keep the 1.0 documentation
why should we want to delete it?
Abel Büchner-Mihaljević
@b-abel
I would keep the documentation for all supported versions online. So, as soon as 1.0 is no longer supported, it will disappear. However, as far as I know, there hasn't yet been a discussion about how long the versions will be maintained...
Jens Reimann
@ctron
But why would we want to delete them? e.g. bootstrap (
https://getbootstrap.com/docs/versions/
) … they also host all old versions, with a marker that they are no longer supported. But a) you have links which never 404s b) you can link to a known set of features.
And even if we do only link to "stable" … we might change the structure of the documentation in the future, and then we again would have the issue of broken links.
So I would strongly advise to a) introduce at least "1.0.x" as a link target, b) keep documentation forever … we can still keep the "stable" link as well
Kai Hudalla
@sophokles73
I don't think that there is any imminent danger of loosing any documentation since that documentation is kept in the repository on corresponding branches. So as long as we don't delete these branches, we have the docs for all versions. Another question is if we want to actively support all versions forever and want to publish documentation for all versions on the website. We haven't had a discussion yet regarding how many major/minor versions we want to support, so for the time being, we simply publish everything we have, right? In our case that is 1.0 and as soon 1.1.0 is released, we'll also have 1.1. On the documentation page these versions will then show up in the drop own box. If so, I think that we will also be able to "deep link" into the "1.0" version docs, right
@b-abel
?
Abel Büchner-Mihaljević
@b-abel
@sophokles73
Yes, you are right. However, as
@ctron
pointed out, you can only link explicitly to version 1.0 docs once 1.1 is released. In other words: the current stable version is not additionally available under its version number.
Kai Hudalla
@sophokles73
Ah, I see. Can you add that capability?
Abel Büchner-Mihaljević
@b-abel
Sure
Carsten Lohmann
@calohmn
We would like to do a 1.0.3 release today or tomorrow.
@ctron
@dejanb
@sophokles73
Do you have anything that is not on the 1.0.3 board yet that you would like to have in that release?
Kai Hudalla
@sophokles73
@calohmn
what about
#1690
? That might be useful ...
Carsten Lohmann
@calohmn
yes, I've added that to the board.
Kai Hudalla
@sophokles73
@calohmn
maybe
#1515
?
Carsten Lohmann
@calohmn
@sophokles73
that is already in 1.0.2
Kai Hudalla
@sophokles73
Ah, even better ...
Carsten Lohmann
@calohmn
I've just added
#1689
as well. That would be all from my side.
Dejan Bosanac
@dejanb
@calohmn
nothing from my side
Kai Hudalla
@sophokles73
@all
I am currently looking at our build process and have been wondering if anybody of you has ever considered any of the code coverage data generated by the JaCoCo maven plugin.
Dejan Bosanac
@dejanb
@sophokles73
I don't find it too useful tbh
Kai Hudalla
@sophokles73
Neither do I. In fact, I have never even bothered to even take a look at the result on codecov, not the least because it requires me to register for yet another system ...
Carsten Lohmann
@calohmn
I haven't gotten useful information from the codecov check results in the PRs yet. The results are usually very confusing and sometimes checks fail although they shouldn't.
See
#1536
for example - no code changes here at all and still the 'codecov/project' check has failed and some coverage changes are found (why?).
Maybe the integration test results make the coverage results too varied because the tests behave a bit different each time.
So, I would rather have the checks removed or maybe just the integration test results can be removed to make results more reliable.
johnMinelli
@johnMinelli
the credential registration for client works in the same way as for the devices? i'm not able to connect a consumer using notdefault credential in plain conn (default is
consumer@HONO
:verysecret)
johnMinelli
@johnMinelli
another thing: a chat for the support would be nice, to not over-disturb you devs. (or shuld i use git to let my problem be on records for others?)
Kai Hudalla
@sophokles73
@johnMinelli
in general, and if the answer to the question would be helpful to others as well, you should post questions on stackoverflow using the eclipse-hono tag
johnMinelli
@johnMinelli
oks, can you answer me on the auth problem?
Kai Hudalla
@sophokles73
@johnMinelli
downstream applications that use Hono's north bound APIs to consume data and send commands connect to the AMQP Messaging Network, not to the protocol adapters. Thus, applications are authenticated by the AMQP Messaging Network. If you are using the example deployment that comes with Hono, then the Qpid Dispatch Router (which is part of the AMQP Messaging Network implementation) delegates to the Auth Server component for authenticating applications. In order to add another user you need to edit the
eclipse-hono/example/example-permissions.json
. At the bottom of that file is the definition of the
consumer@HONO
user which you can use as a template. After you have made the changes you need to redeploy Hono for the change to take effect ...
@all
I would like to do the 1.1.0-M2 today. Any specific pending PRs that you need to be included?
Dejan Bosanac
@dejanb
@sophokles73
go for it ... nothing from my side
Kai Hudalla
@sophokles73
@all
I am now starting the 1.1.0-M2 release build ...
Karthees Kalidass
@kaniyan
:+1:
johnMinelli
@johnMinelli
@sophokles73
i was aware of the first part of your message, but thanks a lot to point that out. I'll try to modify the json file as you said.
Kai Hudalla
@sophokles73
@all
So far, nobody seems to care about the coverage stats gathered by JaCoCo. So I suggest to remove it from our build process altogether. Any objections?
Kai Hudalla
@sophokles73
@all
GitHub has started to automatically create pull requests for our dependencies which it believes to be subject to vulnerabilities:
#1715
Personally, I think that this could be useful as an early warning system and would therefore tend to let GitHub continue doing it. WDYT?
Kai Hudalla
@sophokles73
@ctron
@dejanb
@calohmn
any opinion regarding these two issues?
Carsten Lohmann
@calohmn
@sophokles73
yes, the dependency update PRs look useful, cool feature
Jens Reimann
@ctron
@sophokles73
:+1 jacoco … I agree, no one really used it. … About github security issues, I like the warning system. I am not so fond of the automatic PR creation …
Kai Hudalla
@sophokles73
Ok, then I'll remove the JaCoCo stuff ...
Kai Hudalla
@sophokles73
@ctron
@dejanb
@calohmn
we
really
need to come to a conclusion regarding the scope of Hono's public API. Please add your comments/opinion to the thread on the mailing list. We will have a very hard time making any reasonable changes to Hono if we are not clear about which classes we can change without affecting compatibility and which classes we can't.
Kai Hudalla
@sophokles73
@ctron
@dejanb
@calohmn
I have posted a proposal regarding the Hono Helm chart on the mailing list which I hope finds your approval. Can you please review and cast your vote?
_
Sign in to start talking
window.webpackPublicPath = '//cdn02.gitter.im/_s/b4fd4d026/js/';
Eclipse Hono™ (@EclipseHono) | Twitter
document.body.className=document.body.className+" "+document.body.getAttribute("data-fouc-class-names");
We've detected that JavaScript is disabled in your browser. Would you like to proceed to legacy Twitter?
Yes
Skip to content
Home
Home
Home, current page.
Moments
Moments
Moments, current page.
Search query
Search Twitter
Saved searches
Remove
In this conversation
Verified account
Protected Tweets
@
Suggested users
Verified account
Protected Tweets
@
Verified account
Protected Tweets
@
Language:
English
Bahasa Indonesia
Bahasa Melayu
Català
Čeština
Dansk
Deutsch
English UK
Español
Filipino
Français
Hrvatski
Italiano
Magyar
Nederlands
Norsk
Polski
Português
Română
Slovenčina
Suomi
Svenska
Tiếng Việt
Türkçe
Ελληνικά
Български език
Русский
Српски
Українська мова
עִבְרִית
العربية
فارسی
मराठी
हिन्दी
বাংলা
ગુજરાતી
தமிழ்
ಕನ್ನಡ
ภาษาไทย
한국어
日本語
简体中文
繁體中文
Have an account?
Log in
Have an account?
Remember me
·
Forgot password?
New to Twitter?
Sign up
Eclipse Hono™
@
EclipseHono
Tweets
Tweets, current page.
9
Followers
Followers
97
Likes
Likes
1
More
Likes
Unmute
@
EclipseHono
Mute
@
EclipseHono
Follow
Follow
@
EclipseHono
Following
Following
@
EclipseHono
Unfollow
Unfollow
@
EclipseHono
Blocked
Blocked
@
EclipseHono
Unblock
Unblock
@
EclipseHono
Pending
Pending follow request from
@
EclipseHono
Cancel
Cancel your follow request to
@
EclipseHono
Eclipse Hono™
@
EclipseHono
Connect. Command. Control.
eclipse.org/hono
Joined March 2019
0 Photos and videos
Photos and videos
Tweets
Tweets
Tweets, current page.
Tweets & replies
You blocked
@
EclipseHono
Are you sure you want to view these Tweets? Viewing Tweets won't unblock
@
EclipseHono
Yes, view profile
Close
Eclipse Hono™ followed
Pinned Tweet
Eclipse Hono™
‏
@
EclipseHono
18 Oct 2019
More
Copy link to Tweet
Embed Tweet
We did it! Version 1.0.0 of
#
EclipseHono
is released. After almost 4 years, Hono has graduated from incubation
@
EclipseFdn
. Let's celebrate!
https://www.
eclipse.org/hono/
1 reply
18 retweets
67 likes
Reply
1
Retweet
18
Retweeted
18
Like
67
Liked
67
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
Retweeted
Jens Reimann
‏
@
ctron
10 Dec 2019
More
Copy link to Tweet
Embed Tweet
Remember our
#
LoRaWAN
demo
@
EclipseCon
#
Europe
… here is a blog post on how we did it. And how you can replicate it with
@
enmasse
@
EclipseHono
@
strimziio
https://
developers.redhat.com/blog/2019/12/1
0/lorawan-setup-at-the-eclipsecon-iot-playground/
…
0 replies
9 retweets
10 likes
Reply
Retweet
9
Retweeted
9
Like
10
Liked
10
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
‏
@
EclipseHono
28 Aug 2019
More
Copy link to Tweet
Embed Tweet
Eclipse Hono 1.0-M7 has been released:
https://www.
eclipse.org/hono/release-n
otes/
…
Test out our final milestone release before graduation!
#
EclipseHono
#
IoT
0 replies
3 retweets
8 likes
Reply
Retweet
3
Retweeted
3
Like
8
Liked
8
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
‏
@
EclipseHono
23 Aug 2019
More
Copy link to Tweet
Embed Tweet
Eclipse Hono can be easily deployed to
@
Azure
Kubernetes Service (AKS). Learn how to setup a
#
Kubernetes
Cluster using AKS in this deployment guide:
https://www.
eclipse.org/hono/docs/depl
oyment/create-kubernetes-cluster/#setting-up-a-cluster-using-azure-kubernetes-service
…
#
EclipseHono
#
EclipseIoT
#
Azure
#
Kubernetes
0 replies
5 retweets
8 likes
Reply
Retweet
5
Retweeted
5
Like
8
Liked
8
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
Retweeted
Jens Reimann
‏
@
ctron
20 Aug 2019
More
Copy link to Tweet
Embed Tweet
Amazing! It only takes a few YAML files, and you have a deployment consuming
#
LoRaWAN
, with
@
EclipseHono
, processing with
@
ApacheCamel
into
@
apachekafka
… thanks to
@
enmasseio
and
@
strimziio
https://
github.com/ctron/ece2019-
iot-playground/
…
0 replies
7 retweets
15 likes
Reply
Retweet
7
Retweeted
7
Like
15
Liked
15
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
‏
@
EclipseHono
25 Jul 2019
More
Copy link to Tweet
Embed Tweet
EclipseHono 1.0-M6 has been released:
https://www.
eclipse.org/hono/release-n
otes/
…
Check out our new device registry management API:
…
https://v1-hono-device-registry-
api.apps.wonderful.iot-playground.org
#
EclipseHono
#
IoT
0 replies
6 retweets
12 likes
Reply
Retweet
6
Retweeted
6
Like
12
Liked
12
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
‏
@
EclipseHono
16 Jul 2019
More
Copy link to Tweet
Embed Tweet
Want to try out Eclipse Hono? You can do that easily using either 1. Hono Sandbox:
https://www.
eclipse.org/hono/sandbox/
or 2. Local single node
#
Minikube
cluster Check out the new Getting Started guide:
https://www.
eclipse.org/hono/getting-s
tarted/
…
0 replies
16 retweets
19 likes
Reply
Retweet
16
Retweeted
16
Like
19
Liked
19
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
‏
@
EclipseHono
2 Jul 2019
More
Copy link to Tweet
Embed Tweet
Eclipse Hono 1.0-M5 has been released with a better support for sending commands to devices connected via gateways
https://www.
eclipse.org/lists/hono-dev
/msg01224.html
…
#
EclipseHono
#
IoT
0 replies
7 retweets
8 likes
Reply
Retweet
7
Retweeted
7
Like
8
Liked
8
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
Eclipse Hono™
‏
@
EclipseHono
24 Jun 2019
More
Copy link to Tweet
Embed Tweet
We have given our website a new look, improved the structuring of content, and implemented a new search feature in the documentation! Check it out:
https://www.
eclipse.org/hono/
#
EclipseHono
#
IoT
1 reply
12 retweets
15 likes
Reply
1
Retweet
12
Retweeted
12
Like
15
Liked
15
Thanks. Twitter will use this to make your timeline better.
Undo
Undo
@EclipseHono hasn't Tweeted yet.
Back to top ↑
Loading seems to be taking a while.
Twitter may be over capacity or experiencing a momentary hiccup.
Try again
or visit
Twitter Status
for more information.
New to Twitter?
Sign up now to get your own personalized timeline!
Sign up
You may also like
·
Refresh
false
© 2020 Twitter
About
Help Center
Terms
Privacy policy
Cookies
Ads info
Close
Choose a trend location
Dismiss
Close
Previous
Next
Close
Go to a person's profile
Saved searches
Remove
In this conversation
Verified account
Protected Tweets
@
Suggested users
Verified account
Protected Tweets
@
Verified account
Protected Tweets
@
Close
Promote this Tweet
Close
Block
Cancel
Block
Tweet with a location
You can add location information to your Tweets, such as your city or precise location, from the web and via third-party applications. You always have the option to delete your Tweet location history.
Learn more
Turn on
Not now
Close
Your lists
Close
Create a new list
List name
Description
Under 100 characters, optional
Privacy
Public
· Anyone can follow this list
Private
· Only you can access this list
Save list
Close
Close
Copy link to Tweet
Here's the URL for this Tweet. Copy it to easily share with friends.
Close
Embed this Tweet
Embed this Video
Add this Tweet to your website by copying the code below.
Learn more
Add this video to your website by copying the code below.
Learn more
Hmm, there was a problem reaching the server.
Try again?
Include parent Tweet
Include media
By embedding Twitter content in your website or app, you are agreeing to the Twitter
Developer Agreement
and
Developer Policy
.
Preview
Close
Why you're seeing this ad
Close
Log in to Twitter
Remember me
·
Forgot password?
Don't have an account?
Sign up »
Close
Sign up for Twitter
Not on Twitter? Sign up, tune into the things you care about, and get updates as they happen.
Sign up
Have an account?
Log in »
Close
Two-way (sending and receiving) short codes:
Country
Code
For customers of
United States
40404
(any)
Canada
21212
(any)
United Kingdom
86444
Vodafone, Orange, 3, O2
Brazil
40404
Nextel, TIM
Haiti
40404
Digicel, Voila
Ireland
51210
Vodafone, O2
India
53000
Bharti Airtel, Videocon, Reliance
Indonesia
89887
AXIS, 3, Telkomsel, Indosat, XL Axiata
Italy
4880804
Wind
3424486444
Vodafone
»
See SMS short codes for other countries
Close
Confirmation
Close
Close
Skip all
Welcome home!
This timeline is where you’ll spend most of your time, getting instant updates about what matters to you.
Tweets not working for you?
Hover over the profile pic and click the Following button to unfollow any account.
Say a lot with a little
When you see a Tweet you love, tap the heart — it lets the person who wrote it know you shared the love.
Spread the word
The fastest way to share someone else’s Tweet with your followers is with a Retweet. Tap the icon to send it instantly.
Join the conversation
Add your thoughts about any Tweet with a Reply. Find a topic you’re passionate about, and jump right in.
Learn the latest
Get instant insight into what people are talking about now.
Get more of what you love
Follow more accounts to get instant updates about topics you care about.
Find what's happening
See the latest conversations about any topic instantly.
Never miss a Moment
Catch up instantly on the best stories happening as they unfold.
Back
Next
Next Tweet from user
