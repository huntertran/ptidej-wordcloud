Eclipse Ditto • open source framework for digital twins in the IoT
{ "@context": "http://schema.org", "@type": "Organization", "url": "https://eclipse.org/ditto/", "logo": "https://eclipse.org/ditto/images/ditto.svg" }
Toggle navigation
Blog
Documentation
HTTP API
Sandbox
GitHub
GitHub examples
Links
Eclipse Ditto Project
Forum
Jenkins
Mailing list archives
Gitter.im chat
… where IoT devices and their digital twins get together
Device-as-a-Service
Provide a higher abstraction level in form of an API used to work with individual devices.
State management for digital twins
Differ between reported (last known), desired (target) and current state (live) of devices, including support for synchronization and publishing of state changes.
Organize your set of digital twins
Who's using Eclipse Ditto?
©2020 Eclipse Ditto. Site last generated: Jan 31, 2020
> Privacy Policy
> Terms of Use
> Copyright Agent
> Legal
> License
> Report a Vulnerability
Dashboard [Jenkins]
var isRunAsTest=false; var rootURL="/ditto"; var resURL="/ditto/static/27718d45";
crumb.init("Jenkins-Crumb", "7e87d1d8f2528fc8def15dc9aec3605016afda0192dbd2c8b340eb8c16d4a528");
var Q=jQuery.noConflict()
Skip to content
log in
createSearchBox("/ditto/search/");
ENABLE AUTO REFRESH
Jenkins
People
Build History
Project Relationship
Check File Fingerprint
Build Queue
No builds in the queue.
refreshPart('buildQueue',"/ditto/ajaxBuildQueue");
Build Executor Status
refreshPart('executors',"/ditto/ajaxExecutors");
All
S
W
Name
Last Success
Last Failure
Last Duration
W
Description
%
Build stability: 1 out of the last 5 builds failed.
80
Test Result: 0 tests failing out of a total of 7,371 tests.
100
ditto
-ci
13 hr -
#517
3 days 11 hr -
#515
38 min
W
Description
%
Build stability: 4 out of the last 5 builds failed.
20
ditto
-client
-java
-ci
13 days -
#44
12 hr -
#46
2 min 49 sec
W
Description
%
Build stability: 1 out of the last 5 builds failed.
80
Test Result: 0 tests failing out of a total of 210 tests.
100
ditto
-client
-java
-release
1 mo 23 days -
1.0.0
3 mo 1 day -
1.0.0-M2
4 min 55 sec
W
Description
%
Build stability: 3 out of the last 5 builds failed.
40
ditto
-client
-javascript
-ci
11 days -
#886
12 days -
#884
7 min 25 sec
W
Description
%
Build stability: 2 out of the last 5 builds failed.
60
ditto
-client
-javascript
-release
1 mo 23 days -
1.0_1.0.0
1 mo 23 days -
1.0_1.0.0
4 min 57 sec
W
Description
%
Test Result: 0 tests failing out of a total of 7,221 tests.
100
Build stability: No recent builds failed.
100
ditto
-release
1 mo 23 days -
1.0.0
4 mo 19 days -
1.0.0-M1 ​- ​Maven ​Central ​publishing
1 hr 11 min
W
Description
%
Build stability: No recent builds failed.
100
ditto
-website
-build
-and
-deploy
3 days 11 hr -
#12
11 days -
#4
6 min 5 sec
W
Description
%
Build stability: No recent builds failed.
100
update
-github
-ssh
-key
1 yr 4 mo -
Index of ditto-dev for January 2020
Skip to main content
Edit my account
Manage Cookies
Donate
Members
Working Groups
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
#2
N/A
0.24 sec
Icon:
S
M
L
Legend
RSS for all
RSS for failures
RSS for just latest builds
Page generated: Feb 3, 2020 9:36:39 PM EST
REST API
Jenkins ver. 2.190.1
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Search
Toggle navigation
Breadcrumbs
Home
Contribute
Source code
Index of ditto-dev for January 2020
Index by Thread
Index by Year
[
First Page
] [
Prev Page
][Next Page] [
Last Page
]
January 14, 2020
[ditto-dev] Small Example of a digital twin of a Siemens S7 using PLC4X and Ditto
Posted 12:30 by Julian Feinauer
Mail converted by
MHonArc
Back to the top
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
Eclipse Ditto - Sandbox
- Sandbox
Welcome to the Eclipse Ditto sandbox.
You can use this sandbox to gather first experiences with the Eclipse Ditto
HTTP API
.
The Swagger UI for exploring the API will require authentication.
Visit the Eclipse Ditto
documentation
in order to learn more about the project.
Please consider that this sandbox has (very) limited resources - so don't expect a high performance setup.
Authentication
When using the
HTTP API
you can authenticate with your Google account in order to use an user ID belonging to only you.
WARNING
: This currently won't work due to a missing feature in swagger-ui 3.x:
swagger-ui #4084
and due to a missing feature in Ditto that Google 'accept_token' are not supported:
Ditto #114
.
Alternatively (also in order to connect to the WebSocket API) you can use one of the pre-defined user/password combinations (which may be used by anyone) and provide them via "basic auth"
Authorization
header:
demo1:demo
demo2:demo
...
demo9:demo
If you create any entity, either your Google user ID or some of the "basic auth" user's ID will be added to that entity in order to authorize you work with it.
Health
Statistics
persisted
Things
in the Ditto sandbox
currently "hot"
Things
(accessed within the last 2 hours) in the Ditto sandbox
eclipse/ditto - Gitter
Where communities thrive
Join over
1.5M+ people
Join over
100K+ communities
Free
without limits
Create
your own community
Explore more communities
eclipse/ditto
Eclipse Ditto - Digital Twins for Eclipse IoT
People
Repo info
Activity
Julian
@JulianFeinauer
I have another question... Are there reasons why the number of features should be limited? Or should it be fine to have a huge amount of features?
Thomas Jaeckle
@thjaeckle
Hi. I don't see any reason to limit the amount. The only limitation (which is also configurable) is the total size of a thing being 100kB.
Other IoT platforms like AWS or Azure IoT limit the digital twin size even to 8kB.
Julian
@JulianFeinauer
Hey
@thjaeckle
thanks for the fast reply. We have an application where we calculate hourly metrics like produced amount, downtime ratio, … for large machines. How would you store that in ditto (as this would be a good gateway, I guess)
Thomas Jaeckle
@thjaeckle
I would think about putting them in separate features only if e.g. different authorizations (via policies) should be applied. So eg some users or other systems may see the produced amount, other may see more metrics. Or split by components of the complete machine delivering the data, each being one feature. I guess there is no right or wrong here. If you think about using Eclipse Vorto, you might want to think about reusability of models, so that you can have machines of different vendors having features following the same Vorto Functionblock (Ditto features can be modeled
Julian
@JulianFeinauer
Thanks... Indeed I am considering that and make myself comfortable with vorto a bit :)
But it could lead to an explosion of properties if we just store hourly stats basically forever
Atul Kumar
@writetoatul_twitter
can anyone share the default username and password for ditto devops
i tried
ditto:foobar
devops:devopsPw1!
But none of them worked
Julian
@JulianFeinauer
If I remember correctly it's devops:foobar
But
@writetoatul_twitter
I would advice you to have a look at the Bosch iot things managed service. I think this could fit you better than running ditto yourself
Atul Kumar
@writetoatul_twitter
Sorry but business requirement is a local solution
@JulianFeinauer
that could run without internet
ottlukas
@ottlukas
ok default is indeed devops:foobar and works for me in my test installation ;)
Julian
@JulianFeinauer
:+1:
Atul Kumar
@writetoatul_twitter
https://stackoverflow.com/questions/59817541/connecting-eclipse-hono-and-eclipse-ditto-on-same-local-machine
Thomas Jaeckle
@thjaeckle
I'll quote what
@ottlukas
said once again, when you read carefully you should find the credentials in his answer:
ok default is indeed devops:foobar and works for me in my test installation ;)
Atul Kumar
@writetoatul_twitter
what is the minimm system requirement for ditto?
Julian
@JulianFeinauer
I guess a System to run it on?
Thomas Jaeckle
@thjaeckle
I would recommend 4 CPUs and min. 4GB of RAM
Thomas Jaeckle
@thjaeckle
ah, that is for single instances of course - if you need a high available cluster (meaning 3 instances for each of the 6 Ditto services = 18 containers) I would recommend at least 10-12 CPUs and 12GB of RAM
best in a Kubernetes cluster with several masters and e.g. using at least 3 worker nodes
Florian Fendt
@ffendt
should we add that information to the official docs?
Thomas Jaeckle
@thjaeckle
well, I just "guessed" - best would of course to try it out and get as low as possible :D
Julian
@JulianFeinauer
Do you see any possibility to have an alternative backend other than Mongo db in the near future? Ideally even pluggable?
Thomas Jaeckle
@thjaeckle
@JulianFeinauer
yes and no ;)
for the EventSourcing persistence Cassandra should be quite easy to add by additionally making use of the Akka persistence cassandra plugin:
https://github.com/akka/akka-persistence-cassandra
a few time ago we did a PoC and got that running
so for the persistence we could easily have a pluggable option of MongoDB vs Cassandra
however - the "no" part - for the search-index replacing MongoDB with Cassandra will not work (at least I'm quite sure that Cassandra is not built for doing JSON document based search queries)
so for that part of Ditto another option to MongoDB would be Elasticsearch (which we also already positively evaluated)
however that would be quite an effort of supporting using Elasticsearch - nothing we have on our mid-term agenda
Julian
@JulianFeinauer
@thjaeckle
thansk for the response… woudl you think that postgres could be an option with their JSON / JSONB Support (
). My point is that Mongo and Cassandra scale well and are nice as a Service but self hosted mostly a pain in the ass
and Good old Postgres is just simple and easy to administrate and rock solid : )
Thomas Jaeckle
@thjaeckle
that could work when using persistence plugins:
https://github.com/akka/akka-persistence-jdbc
or
https://github.com/WegenenVerkeer/akka-persistence-postgresql
we as maintainers however have no interest in adding support for those, so that would have to be lead by the community and only in a way which does not break the existing persistence ;)
Julian
@JulianFeinauer
So what you say is, a PR should be raather „mediocre“ amount of work and you would generally accept it, is that right
@thjaeckle
? :P
Thomas Jaeckle
@thjaeckle
"mediocore" amount of work: yes and no :D
for the Akka persistence it should be easy, yes (although we also have some "special queries" against MongoDB in our own codebase which would also have to get an alternative for Postgres)
for the Search index it should be quite complex
if you manage to get that all working w/o breaking existing stuff, we would accept a PR - but to be honest that is a big "IF" ;)
Kai Hudalla
@sophokles73
Julian
@JulianFeinauer
@sophokles73
thanks for the hint. I am not very used in how this is handled at eclipse or in these projects specific. But, if we would implement that then we would also use it and thus, of course maintain it. Thats way to big of a feature to do it „just for fun“. So indeed I would also welcome to be invited as a contributor in that case. And, I generally agree, that it is important to keep an eye on these things!
Thomas Jaeckle
@thjaeckle
yes, thanks for the input on that
I guees I implicitly assumed that when going through the work of such a major contribution, the contributing side already brings in some commitment to maintain "its baby" ;)
Julian
@JulianFeinauer
Perhaps MongoDB is not that baaad … :D
Yannic Klem
@Yannic92
:D
Thomas Jaeckle
@thjaeckle
btw: Ditto can totally run with MongoDB 3.6 - if it is the new MongoDB license you are concerned about
Julian
@JulianFeinauer
No its more the management. Without their Atlas service its hard administrate (backups are not easy to make) and those things
Patrick Sernetz
@patrickse
I am looking for a way to list all of the configured connections from ditto. I´ve tried to look through the code and documentation but haven´t found a suitable devops command. Is there a way to list connections?
Thomas Jaeckle
@thjaeckle
hi
@patrickse
unfortunately there is no way to do this via an API yet - it currently only is possible by doing a query against MongoDB
We got the same question earlier in the chat and this was my answer:
hi
@BobClaerhout
- that should be possible by doing a Mongo query against the
connectivity
database, e.g.:
db.connection_journal.disctinct('pid')
you could create a GitHub issue for that, I think it's a totally valid use case
Patrick Sernetz
@patrickse
@thjaeckle
great.. thanks for the feedback. I will create an issue for that request
Patrick Sernetz
@patrickse
I got another question on javascript payload mapping. I´ve got a thing with 3 features and I retrieve a mqtt message which can contain 2..3 fields. I´ve tried to setup a single javascript payload mapping to just update 2 features of the 3 thing features. But I got no clue. I´ve already tried a few things:
Return an array of ditto protocol messages from the mapper to do iterative updates on the thing, where every feature is treated as a single ditto protocol message. But it looks its not possible to return an array (would be quite handy).
Retrieve the current state of the thing, update the fields and push the changed thing back to ditto, but I think that is not possible due to sandboxing inside the javascript mapper.
To sum up... I just want to do a partial upgrade of a thing inside a javascript mapper.
Thomas Jaeckle
@thjaeckle
hm, returning a JavaScript array with several DittoProtocol message should work, we added that prior to the Ditto 1.0.0 release
https://www.eclipse.org/ditto/connectivity-mapping.html#mapping-incoming-messages
does that not work for you?
Patrick Sernetz
@patrickse
I will have another look.. I had something in my mind... that this should work.. but I had failure on the mapping... I will test that out..
Thanks for the reply
@thjaeckle
Patrick Sernetz
@patrickse
@thjaeckle
stupid me... it´s working. Got another problem with initializing headers as an array and not as an object while create the response message... Thanks a lot ;)
now everything is fixed and working as intended
Thomas Jaeckle
@thjaeckle
cool :+1:
_
Sign in to start talking
window.webpackPublicPath = '//cdn02.gitter.im/_s/b4fd4d026/js/';
Eclipse Ditto | projects.eclipse.org
Google Tag Manager
Skip to main content
Log in
Manage Cookies
projects.eclipse.org
Download
Members
Working Groups
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Toggle navigation
Home
Projects
Eclipse IoT
Eclipse Ditto
Eclipse Ditto
Primary tabs
Overview
(active tab)
Downloads
Who's Involved
Developer Resources
Governance
Contact Us
Eclipse Ditto is a framework for providing the "Digital Twin" pattern for IoT applications in order to interact with IoT devices.
That means that Ditto mirrors physical devices as digital representations in the cloud.
As a web or mobile app developer you can interact with those digital twins as if they were any other web service, that's why Ditto enables a "device as a service" paradigm.
A few of the main features are access control, a search over all twin data and push notifications.
There are various APIs in order to interact with the devices: an HTTP and WebSocket API, additionally the capability to integrate with other systems via AMQP, MQTT and Apache Kafka.
Ditto scales horizontally, so managing millions of twins is what it is designed for.
The benefit when developing IoT applications or solutions is that no own backend must be implemented, the focus can be set on the use case: for example device integration and app or web UI implementation.
Device-as-a-Service
IoT solutions have to interact with a heterogeneous set of device types, device protocols and communication patterns.
To bring back simplicity to IoT developers, Eclipse Ditto exposes a unified resource-based API that can be used to interact with devices, abstracting from the complexity of different device types and how devices are connected. It helps to structure the devices
As devices are equipped with a public API (potentially public on the Internet), it is crucial to define on a device level which individuals are allowed interact with the devices. Ditto ensures that access to the device API is only granted for authorized individuals. Authentication is not scope of Ditto and delegated to existing identity providers.
With this approach your devices are turned into services with a hosted, always accessible and available API.
Devices managed by Ditto are usable as easy as any of the other services (like weather, maps, ...) within your application.
State management for Digital Twins
A digital representation of physical devices consists at its heart of the state these devices.
For IoT solutions the following information regarding state is most relevant:
Device and sensor properties like temperature, location, level, fault information, etc.
Configuration properties of sensors and actors like thresholds, intervals, ranges, toggles and limits, etc.
A good representation of this state in a Digital Twin should support different perspectives for these properties:
Reported property values based on the last transmission to the back end
Desired target property value for configuration properties
Live perspective reflecting the properties values at the current point of time
The state management provides access to all three different perspectives and helps in synchronizing between them.
Organize your set of Digital Twins
When interacting with huge amounts of devices, it can get difficult to keep track of which devices and devices types are there and how they are related (e.g. spatially).
It is wise to add meta data like e.g. manufacturer, model information, static geographic location, serial number or software version to devices in order to find them again later.
That meta data as well as the state data is automatically indexed by Ditto which leads to fast search responses provided by the search API, even when there are millions of devices to search in.
When working with sets of devices authorization information is used to determine the visibility of devices to individuals and control who can change device data.
Features at a glance
Unified resource-based HTTP JSON API representing devices
Definition of a simple "Digital Twin State Management Protocol" using JSON for command- and events-based interaction with devices
Websocket API based on this protocol in addition to the resource-based HTTP API
Establishing and maintaining connections to AMQP 0.9.1, AMQP 1.0, MQTT and Apache Kafka endpoints
Managing device meta data via APIs
Optionally configure and enforce a schema for device state (via Eclipse Vorto)
Schema evolution support for schema based device state
Accessing and setting different state perspectives
Live
Reported
Desired
Notification about changes of device resources via HTTP Server-sent events (SSE)
Authorization/Access control at device API enforcing that only allowed individuals may read/write
Search HTTP API accepting predicate-based query language
Emit events resulting from state changes of devices which can be used
for building up a "transaction log" (e.g. using Apache Kafka)
as source for stream processing (e.g. via Apache Spark Streaming)
for building up additional persistence representations (e.g. into an InfluxDB providing optimized access to the history of a device's state properties)
for transmitting data into data analytic tools (e.g. into an Apache Hadoop HDFS)
Out-of-box integration with Eclipse Hono for communication with devices using standard or custom device protocols
Integrate Ditto in a IoT landscape
Ditto is especially useful in the context of a larger IoT landscape. In this landscape the other important aspects of a IoT solution like device communication or data analytics are covered by distinct components.
The most important integration aspect is the device communication. This is essential for the Digital Twins to really be twins of real-world physical devices.
In addition to provide a custom device communication layer Ditto will provide an out-of-the-box integration with Eclipse Hono to support device communication.
In this scenario Ditto uses Eclipse Hono in order to receive messages (e.g. state changes) from devices and to send messages (e.g. configuration changes) to devices.
Licenses:
Eclipse Public License 2.0
Latest Releases:
From November 29th, 2018 to March 26th, 2020
Name
Date
Review
1.1.0
2020-03-26
1.0.0
2019-12-12
0.9.0
2019-07-10
0.8.0
2018-11-29
Active Member Companies:
Member companies supporting this project over the last three months.
Contribution Activity:
Commits on this project (last 12 months).
Project Links
Website
Documentation
Related Projects
Related Projects:
Eclipse IoT
Eclipse Hono
Eclipse Vorto
Eclipse Technology
Eclipse OpenJ9
Project Hierarchy:
Eclipse IoT
Eclipse Ditto
Tags
Technology Types
Internet of Things
Other Tags
twin
iot
Build Enterprise Java on Kubernetes!
A co-located event with KubeCon + CloudNativeCon EU on March 30, 2020
Register Today
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
