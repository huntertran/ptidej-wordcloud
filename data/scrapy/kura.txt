Eclipse Kura | The Eclipse Foundation
Skip to main content
Download
Documentation
Marketplace
Community
Mailing List
Issue Tracker
Discussion Forum
Contributing
Benefactors
More
Community
Mailing List
Issue Tracker
Discussion Forum
Contributing
Benefactors
Toggle navigation
The extensible open source Java/OSGi IoT Edge Framework
Eclipse Kura™ is an extensible open source IoT Edge Framework based on Java/OSGi. Kura offers API access to the hardware interfaces of IoT Gateways (serial ports, GPS, watchdog, GPIOs, I2C, etc.). It features ready-to-use field protocols (including Modbus, OPC-UA, S7), an application container, and a web-based visual data flow programming to acquire data from the field, process it at the edge, and publish it to leading IoT Cloud Platforms through MQTT connectivity.
Project News
Kura 4.1.0 Release
Eclipse Kura 4.1.0 is now available for download!
Kura 4.1.0 M1
Eclipse Kura 4.1.0 M1 is available for developers!
IoT Meetup
Building IoT Mashups for Industry 4.0 with Eclipse Kura and Kura Wires
Twitter Feed
1
Install
Download Kura for your Raspberry Pi 2 or 3 from here:
Download
To install, follow these instructions:
Install Instructions
Docker
run:
docker run -d -p 8080:8080 -t eclipse/kura
Documentation
For other platforms, please refer to the Documentation Page.
Documentation
2
Connect
Use
Wires
to visually connect your sensors and PLCs using a friendly web UI for data capture, processing and publishing.
Learn More
3
Extend
Develop new Components and Application, Drag-and-Drop new modules from the Eclipse IoT Marketplace.
Get Started with the
Framework Functionalities
Get Started with
Java development
Access the
Marketplace
Participate & Contribute
We would love to hear from you!
There are many ways to join the Kura Community:
How to Contribute
Help Wanted Issues
Testbeds
Mailing List
document.querySelector(".eclipse-more .dropdown-toggle").innerHTML = "Community<b class=caret></b>" document.querySelector(".wrapper-logo-default a").setAttribute("href", "https://www.eclipse.org/kura/") document.querySelector(".wrapper-logo-mobile a").setAttribute("href", "https://www.eclipse.org/kura/")
Back to the top
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
Getting Started
Toggle navigation
Eclipse Kura™ Documentation
Introduction
Overview
Raspberry Pi Quick Start
Docker Quick Start
Configuration
Administration Console
Gateway Status
Network Configuration
Ethernet Configuration
Wi-Fi Configuration
Firewall Configuration
Cloud Services
Cloud Service Configuration
Data Service Configuration
Connection Monitors in DataService
Message Publishing Backoff Delay
MqttData Transport Service Configuration
SSL Configuration
Gateway Administration Console Authentication
Built-in Services
Introduction
Simple Artemis MQTT Broker Service
ActiveMQ Artemis Broker Service
Clock Service
Deployment Service
Cloudcat
Command Service
H2 Database: Features and Usage
H2 database: Connecting external applications
Position Service
REST Service
Watchdog Service
Administration
Directory Layout
Snapshot Management
Application Management
Remote Management with Everyware Cloud
Remote Management with Eclipse Kapua
Cloud Connection API and Usage
Overview
User guide
Application developer guide
Cloud connection developer guide
Built-in Cloud Services
Cloud Platforms Connection
Eurotech Everyware Cloud™ platform
Amazon AWS IoT™ platform
Azure IoT Hub™ platform
Eclipse Kapua™ platform
Eclipse Hono™ platform
Apache Camel Integration
Apache Camel™ integration
Apache Camel™ as application
Apache Camel™ Cloud Service
Connect Field Devices
Drivers, Assets and Channels
Field Protocols
Introduction
Toggle navigation
Eclipse Kura™ Documentation
Introduction
Overview
Raspberry Pi Quick Start
Docker Quick Start
Configuration
Administration Console
Gateway Status
Network Configuration
Ethernet Configuration
Wi-Fi Configuration
Firewall Configuration
Cloud Services
Cloud Service Configuration
Data Service Configuration
Connection Monitors in DataService
Message Publishing Backoff Delay
MqttData Transport Service Configuration
SSL Configuration
Gateway Administration Console Authentication
Built-in Services
Introduction
Simple Artemis MQTT Broker Service
ActiveMQ Artemis Broker Service
Clock Service
Deployment Service
Cloudcat
Command Service
Eclipse Kura™ Documentation
Toggle navigation
Eclipse Kura™ Documentation
Introduction
Overview
Raspberry Pi Quick Start
Docker Quick Start
Configuration
Administration Console
Gateway Status
Network Configuration
Ethernet Configuration
Wi-Fi Configuration
Firewall Configuration
Cloud Services
Cloud Service Configuration
Data Service Configuration
Connection Monitors in DataService
Message Publishing Backoff Delay
MqttData Transport Service Configuration
SSL Configuration
Gateway Administration Console Authentication
Raspberry Pi Quick Start
Toggle navigation
Eclipse Kura™ Documentation
Introduction
Overview
Raspberry Pi Quick Start
Docker Quick Start
Configuration
Administration Console
Gateway Status
Network Configuration
Ethernet Configuration
Wi-Fi Configuration
Firewall Configuration
Cloud Services
Cloud Service Configuration
Data Service Configuration
Connection Monitors in DataService
Message Publishing Backoff Delay
MqttData Transport Service Configuration
SSL Configuration
Gateway Administration Console Authentication
Built-in Services
Introduction
Asset implementation
Driver implementation
I/O APIs
S7comm Driver
OPC UA Driver
GPIO Driver
BLE Beacon Drivers
TI SensorTag Driver
RaspberryPi SenseHat driver
Xdk Driver
Kura Wires
Kura Wires overview
How to use DB Store and Filter components in Kura Wires
FIFO Wire Component
OPC/UA application in Kura Wires
TI SensorTag driver in Kura Wires
Kura Wires MQTT namespace
Script Filter Wire component
GPIO driver in Kura Wires
Multiport wire components
Conditional component
Join component
Mathematical components example
Statistical components examples
Connect to a RuuviTag+ using the Eddystone™ Driver
iBeacon™ driver in Kura Wires
Development
Getting Started
Hello World Example
Deploying Bundles
Remote debugging on target platform
Configurable Application
Publishing Application
Serial Example
Device I/O
Modbus Protocol
How to Use Watchdog
How to Manage Network Settings
Legacy Bluetooth LE Example
Legacy BLE Beacon Example
Legacy BLE Beacon Scanner Example
Kura Bluetooth LE APIs
Kura Beacon APIs
Reference
Kura Remote Device Management
API Reference
Hardware Targets
ASSET-V1 MQTT Namespace
Quality Assurance
Introduction
Unit Testing
H2 Database: Features and Usage
H2 database: Connecting external applications
Position Service
REST Service
Watchdog Service
Administration
Directory Layout
Snapshot Management
Application Management
Remote Management with Everyware Cloud
Remote Management with Eclipse Kapua
Cloud Connection API and Usage
Overview
User guide
Application developer guide
Cloud connection developer guide
Built-in Cloud Services
Cloud Platforms Connection
Eurotech Everyware Cloud™ platform
Amazon AWS IoT™ platform
Azure IoT Hub™ platform
Eclipse Kapua™ platform
Eclipse Hono™ platform
Apache Camel Integration
Apache Camel™ integration
Apache Camel™ as application
Apache Camel™ Cloud Service
Connect Field Devices
Drivers, Assets and Channels
Field Protocols
Asset implementation
Driver implementation
I/O APIs
S7comm Driver
OPC UA Driver
GPIO Driver
BLE Beacon Drivers
TI SensorTag Driver
RaspberryPi SenseHat driver
Xdk Driver
Kura Wires
Kura Wires overview
How to use DB Store and Filter components in Kura Wires
FIFO Wire Component
OPC/UA application in Kura Wires
TI SensorTag driver in Kura Wires
Kura Wires MQTT namespace
Script Filter Wire component
GPIO driver in Kura Wires
Multiport wire components
Conditional component
Built-in Services
Introduction
Simple Artemis MQTT Broker Service
ActiveMQ Artemis Broker Service
Clock Service
Deployment Service
Cloudcat
Command Service
H2 Database: Features and Usage
H2 database: Connecting external applications
Position Service
REST Service
Watchdog Service
Administration
Directory Layout
Snapshot Management
Application Management
Remote Management with Everyware Cloud
Remote Management with Eclipse Kapua
Cloud Connection API and Usage
Overview
User guide
Application developer guide
Cloud connection developer guide
Built-in Cloud Services
Cloud Platforms Connection
Eurotech Everyware Cloud™ platform
Amazon AWS IoT™ platform
Azure IoT Hub™ platform
Eclipse Kapua™ platform
Eclipse Hono™ platform
Apache Camel Integration
Apache Camel™ integration
Apache Camel™ as application
Apache Camel™ Cloud Service
Connect Field Devices
Drivers, Assets and Channels
Field Protocols
Asset implementation
Driver implementation
I/O APIs
S7comm Driver
OPC UA Driver
GPIO Driver
BLE Beacon Drivers
TI SensorTag Driver
RaspberryPi SenseHat driver
Xdk Driver
Kura Wires
Simple Artemis MQTT Broker Service
ActiveMQ Artemis Broker Service
Clock Service
Deployment Service
Cloudcat
Command Service
H2 Database: Features and Usage
H2 database: Connecting external applications
Position Service
REST Service
Watchdog Service
Administration
Directory Layout
Snapshot Management
Application Management
Remote Management with Everyware Cloud
Remote Management with Eclipse Kapua
Cloud Connection API and Usage
Overview
User guide
Application developer guide
Cloud connection developer guide
Built-in Cloud Services
Cloud Platforms Connection
Eurotech Everyware Cloud™ platform
Amazon AWS IoT™ platform
Azure IoT Hub™ platform
Eclipse Kapua™ platform
Eclipse Hono™ platform
Apache Camel Integration
Apache Camel™ integration
Apache Camel™ as application
Apache Camel™ Cloud Service
Connect Field Devices
Drivers, Assets and Channels
Field Protocols
Asset implementation
Driver implementation
I/O APIs
S7comm Driver
OPC UA Driver
GPIO Driver
BLE Beacon Drivers
TI SensorTag Driver
RaspberryPi SenseHat driver
Xdk Driver
Kura Wires
Kura Wires overview
How to use DB Store and Filter components in Kura Wires
FIFO Wire Component
OPC/UA application in Kura Wires
System Testing
Getting Started
Setting up the Kura Development Environment
This document describes how to set up the development environment for Eclipse Kura, which consists of the following components:
JVM (Java JDK SE 8 or Open JDK 8)
Eclipse IDE
Kura Workspace setup
The Kura development environment may be installed on a Windows, Linux, or Mac OS. The setup instructions will be the same across OSs though each system may have unique characteristics.
Note:
The local emulation of Kura code is only supported in Linux and Mac, not in Windows.
JVM Installation
Download and install Java SE from
Java SE Downloads
. Use the latest version of Java SE Development Kit and download the version appropriate for your system.
For additional information regarding the installation of Java 8 on all supported operating systems, see
JDK 8 and JRE 8 Installation Guide
.
Eclipse IDE
The Eclipse IDE is an open source development tool that consists of an integrated development environment (IDE) and a plug-in system for managing extensions.
For automated installation see
Oomph installer
below.
Installing Eclipse
Before installing Eclipse, you should choose directory locations for the Eclipse install and its workspaces.
Note:
The following points should be kept in mind regarding Eclipse installs and workspaces:
The directory location of the Eclipse workspaces should be chosen carefully. Once Eclipse is installed and workspaces are created, they should never be moved to another location in the file system.
There may be multiple installs of Eclipse (of different or similar versions), and single instances of each install can be run simultaneously; but there should never be more that one instance of a specific install running at the same time (to avoid corruption to the Eclipse environment).
Each workspace should be used with only one Eclipse install. You should avoid opening the workspace from more than one installation of Eclipse.
For the purposes of this guide, only a single Eclipse installation will be covered.
Download the current distribution of Eclipse for your OS from the
Eclipse download site
. Choose the Eclipse IDE for Java EE Developers.
The zipped Eclipse file will be downloaded to the local file system and can be saved to a temporary location that can be deleted after Eclipse has been installed. After the file has been downloaded, it should be extracted to the Eclipse installs directory. The following screen capture shows the installation in Linux using an eclipse/installs/ directory. The Eclipse executable will then be found in the “eclipse\installs\eclipse" directory. This installation will be different depending on the operating system.
Because there may potentially be future Eclipse installs extracted into this location, before doing anything else rename the directory, such as to “eclipse/installs/
juno1
/”. Once you begin using this Eclipse install,
it should not be moved or renamed later
.
Installing mToolkit
An additional plugin, mToolkit, is needed to allow remote connectivity to an OSGi framework on a Kura-enabled target device. To install mToolkit into Eclipse, use the following steps:
Open the
Help | Install New Software…
menu.
Add the following URL as an update site based on your version of Eclipse
Eclipse Mars and older:
http://mtoolkit-mars.s3-website-us-east-1.amazonaws.com
Join component
Mathematical components example
Statistical components examples
Connect to a RuuviTag+ using the Eddystone™ Driver
iBeacon™ driver in Kura Wires
Development
Getting Started
Hello World Example
Deploying Bundles
Remote debugging on target platform
Configurable Application
Publishing Application
Serial Example
Device I/O
Modbus Protocol
How to Use Watchdog
How to Manage Network Settings
Legacy Bluetooth LE Example
Legacy BLE Beacon Example
Legacy BLE Beacon Scanner Example
Kura Bluetooth LE APIs
Kura Beacon APIs
Reference
Kura Remote Device Management
API Reference
Hardware Targets
ASSET-V1 MQTT Namespace
Quality Assurance
Introduction
Unit Testing
System Testing
Introduction
This section describes the administrative tools available using the
Kura Gateway Administration Console
. This web interface provides the ability to configure all services and applications that are installed and running on the gateway and is shown in the following screen capture:
Documentation for Eclipse Kura™
Kura Wires overview
How to use DB Store and Filter components in Kura Wires
FIFO Wire Component
OPC/UA application in Kura Wires
TI SensorTag driver in Kura Wires
Kura Wires MQTT namespace
Script Filter Wire component
GPIO driver in Kura Wires
Multiport wire components
Conditional component
Join component
Mathematical components example
Statistical components examples
Connect to a RuuviTag+ using the Eddystone™ Driver
iBeacon™ driver in Kura Wires
Development
Getting Started
Hello World Example
Deploying Bundles
Remote debugging on target platform
Configurable Application
Publishing Application
Serial Example
Device I/O
Modbus Protocol
How to Use Watchdog
How to Manage Network Settings
Legacy Bluetooth LE Example
Legacy BLE Beacon Example
Legacy BLE Beacon Scanner Example
Kura Bluetooth LE APIs
Kura Beacon APIs
Reference
Kura Remote Device Management
API Reference
Hardware Targets
ASSET-V1 MQTT Namespace
Quality Assurance
Introduction
Unit Testing
System Testing
Documentation for Eclipse Kura™
TI SensorTag driver in Kura Wires
Kura Wires MQTT namespace
Script Filter Wire component
GPIO driver in Kura Wires
Multiport wire components
Conditional component
Join component
Mathematical components example
Statistical components examples
Connect to a RuuviTag+ using the Eddystone™ Driver
iBeacon™ driver in Kura Wires
Development
Getting Started
Hello World Example
Deploying Bundles
Remote debugging on target platform
Configurable Application
Publishing Application
Serial Example
Device I/O
Modbus Protocol
How to Use Watchdog
How to Manage Network Settings
Legacy Bluetooth LE Example
Legacy BLE Beacon Example
Legacy BLE Beacon Scanner Example
Kura Bluetooth LE APIs
Kura Beacon APIs
Reference
Kura Remote Device Management
API Reference
Hardware Targets
ASSET-V1 MQTT Namespace
Quality Assurance
Introduction
Unit Testing
System Testing
Raspberry Pi Quick Start
Overview
Enable SSH Access
Eclipse Kura™ Installation
Development Environment Installation
Overview
This section provides Eclipse Kura™ quick installation procedures for the Raspberry Pi and the Kura development environment.
Note:
This quickstart will install the version of Kura with the administraive web UI and netwowrk configuration support but not CAN support. For more information on this please visit the
Eclipse Kura download page
This quickstart has been tested using the following image:
downloaded from
Eclipse Neon:
http://mtoolkit-neon.s3-website-us-east-1.amazonaws.com
Install the “mToolkit” feature (you need to uncheck the
Group items by category
checkbox in order to see the feature)
Restart Eclipse. In the menu
Window | Show View | Other
, there should be an
mToolkit | Frameworks
option. If so, the plugin has been installed correctly.
Workspaces
For automated installation see
Oomph installer
below.
Creating an Eclipse Workspace
Run Eclipse by clicking its executable in the install directory.
When Eclipse is run for the first time, a workspace needs to be created. A single workspace will contain all the Java code/projects/bundles, Eclipse configuration parameters, and other relevant files for a specific business-level product. If the
Use this as the default
option is selected, the designated workspace becomes the default each time you run Eclipse.
If a workspace has not already been defined, or if you are creating a different workspace for another development project, enter a new workspace name. The workspace should be named appropriate to the project/product being developed.
Note:
Once you begin using a particular workspace,
it should not be moved or renamed at any time
.
Otherwise, select an existing workspace and click
OK
. After Eclipse is running, you can select the Eclipse menu
File | Switch Workspace | Other
to create or open a different workspace.
After the new workspace opens, click the Workbench icon to display the development environment.
Importing Kura User Workspace
To set up your Kura project workspace, you will need to download the
Kura User Workspace archive
.
From the Eclipse File menu, select the
Import
option. In the Import dialog box, expand the
General
heading, select
Existing Projects into Workspace
, and then click
Next
.
Now click the
Select archive file
option button and browse to the archive file, such as user_workspace_archive_2.0.1.zip.
Finally, click
Finish
to import the projects. At this point, you should have four projects in your workspace. The four projects are as follows:
Eclipse Kura | The Eclipse Foundation
Skip to main content
Download
Documentation
Marketplace
Community
Mailing List
Issue Tracker
Discussion Forum
Contributing
Benefactors
More
Community
Mailing List
Issue Tracker
Discussion Forum
Contributing
Benefactors
Toggle navigation
Eclipse Kura™ Downloads
Latest version is
Eclipse Kura™ 4.1.0
, released on April 29th, 2019 -
Release Notes
Installers
Eclipse Kura installers can be downloaded from the table below. If you need an installation that does not include the web UI, please make a request to the Kura mailing list. The below downloads are distributed through the Eclipse Foundation and meet all requirements of the
Eclipse Public License
.
Note: some old Kura versions do not provide an EPL compatible Web UI. EPL compatibility is reported in the dedicated column in the downloads table.
Docker
Eclipse Kura is available also in a
containerized form
.
To run:
and with the NOOBS image installed on the sdcard bundled with the Raspberry Pi 3.
Enable SSH Access
The ssh server is disabled by default on Raspbian images released after November 2016, in order to enable it follow the instructions available at the following URL:
Eclipse Kura™ Installation
Note:
The last Raspbian Stretch adopts the new
Consistent Network Device Naming
. To correctly run Eclipse Kura on the Raspberry Pi, it should be disabled adding the
net.ifnames=0
parameter at the end of the /boot/cmdline.txt file.
To install Kura with its dependencies on the Raspberry Pi, perform the following steps:
Boot the Raspberry Pi with the latest Raspbian image (starting from release 2.1.0 Kura only supports Debian 8 or above).
The dhcpcd5 package is not compatible with Kura and needs to be removed performing the following command:
After removing dhcpcd5 package you need to enable network interface(s) and ensure internet access. Follow the instructions
here
.
Install the gdebi command line tool:
Make sure that Java 8 is installed with
if not install OpenJDK 8 performing the following command:
Download the Kura package with:
Note: replace <version> in the URL above with the version number of the latest release (e.g. 4.1.0).
Install Kura with:
Reboot the Raspberry Pi with:
Kura starts on the target platform after reboot.
Kura setups a local web ui that is available using a browser via:
The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate:
Once trusted the source, the user will be redirected to a login page where the default
username
is:
and the default
password
is:
Development Environment Installation
User Workspace
To set up the development environment for Eclipse Kura, perform the following steps:
Download and install JDK SE 8 as appropriate for your OS (if it is not already installed). For Windows and Linux users, the JDK can be downloaded from Java SE 8 Downloads. Use the latest version of Java SE Development Kit.
Download and install the Eclipse IDE for Java EE Developers from the
Eclipse download site
.
Download the Kura user workspace archive from the
Eclipse Kura download site
.
Import the Kura workspace zip file into the new Eclipse project development environment.
Begin developing Kura-based applications for your target platform.
org.eclipse.kura.api – This is the core Kura API.
org.eclipse.kura.demo.heater – This is an example project that you can use as a starting point for creating your own bundle.
org.eclipse.kura.emulator – This is the emulator project for running Kura within Eclipse (Linux/Mac only).
target-definition – This is a set of required bundles that are dependencies of the APIs and Kura.
Eclipse will also report some errors at this point. See the next section to resolve those errors.
Workspace Setup
Click the arrow next to the
target-definition
project in the workspace and double-click
kura-equinox_3.11.1.target
to open it.
In the Target Definition window, click the link
Set as Target Platform
. Doing so will reset the target platform, rebuild the Kura projects, and clear the errors that were reported. At this point, you are ready to begin developing Kura-based applications for your target platform.
Oomph installer
Download the latest Eclipse Installer appropriate for your platform from
Eclipse Downloads
Start the Eclipse Installer
Switch to advanced mode (in simple mode you cannot add the custom installer)
Select “Eclipse for Committers” and select a JRE 1.8+ -> Next
Add a new installer by URL: https://raw.githubusercontent.com/eclipse/kura/develop/kura/setups/kura.setup -> Check and next
Update Eclipse Kura Git repository’s username (prefer the anonymous HTTPS option, link to your fork) and customize further settings if you like (e.g. Root install folder, Installation folder name) -> Next
Leave all Bootstrap Tasks selected -> Finish
Accept the licenses and unsigned content
Wait for the installation to finish, a few additional plugins will be installed
At first startup Eclipse IDE will checkout the code and perform a full build
The result will be installed Eclipse IDE with all the recommended plug-ins already available, code will be checked out and built, workspace will be set up, a few Working Sets will be prepared with most projects building without errors
The next step is to get the rest of the projects to build, for which you might need to build them in the console with specific profiles available e.g. can.
Documentation for Eclipse Kura™
docker run -d -p 8080:8080 -t eclipse/kura:latest
Repositories
Eclipse hosts a Nexus for those who want to use Maven to manage their dependencies. The release and snapshot repositories can be found here:
Release
Snapshots
document.querySelector(".eclipse-more .dropdown-toggle").innerHTML = "Community<b class=caret></b>" document.querySelector(".wrapper-logo-default a").setAttribute("href", "https://www.eclipse.org/kura/") document.querySelector(".wrapper-logo-mobile a").setAttribute("href", "https://www.eclipse.org/kura/")
Back to the top
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
Oomph Installer
Start the Eclipse Installer
Switch to advanced mode (in simple mode you cannot add the custom installer)
Select “Eclipse for Committers” and select a JRE 1.8+ -> Next
Add a new installer by URL: https://raw.githubusercontent.com/eclipse/kura/develop/kura/setups/kura.setup -> Check and next
Update Eclipse Kura Git repository’s username (HTTPS, link to your fork) and customize further settings if you like (e.g. Root install folder, Installation folder name) -> Next
Leave all Bootstrap Tasks selected -> Finish
Accept the licenses and unsigned content
Wait for the installation to finish, a few additional plugins will be installed
At first startup Eclipse IDE will checkout the code and perform a full build
A few Working Sets will be prepared
Documentation for Eclipse Kura™
Mailing list: kura-dev (158 subscribers) | Eclipse - The Eclipse Foundation open source community website.
Google Tag Manager
Skip to main content
Log in
Manage Cookies
Eclipse - The Eclipse Foundation open source community website.
Download
Members
Working Groups
Projects
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
More
Community
Marketplace
Events
Planet Eclipse
Newsletter
Videos
Blogs
Participate
Report a Bug
Forums
Mailing Lists
Wiki
IRC
Research
Eclipse IDE
Download
Learn More
Documentation
Getting Started / Support
How to Contribute
IDE and Tools
Newcomer Forum
Toggle navigation
Log in
Search
Mailing list: kura-dev
(158 subscribers)
Kura Developers mailing list
About kura-dev
Kura Developers mailing list
Using kura-dev
To post a message to all the list members, send email to
kura-dev@eclipse.org
. You must be subscribed to the list before you can post. To access a web archive of this list, visit the
kura-dev Archives
or subscribe to this list's
RSS feed
Subscribing kura-dev
All contributions you make to our web site are governed by our
Terms Of Use
. Your interactions with the Eclipse Foundation web properties and any information you may provide us about yourself are governed by our
Privacy Policy
.
To subscribe to a mailing list, you must have an Eclipse.org account.
Log in
- Or -
Create an account
Once you’ve are logged in, you can manage your mailing list subscriptions on the
Mailing List
page.
View All Mailing Lists
Mailing List
View All Mailing Lists
Privacy Policy
Terms of Use
Mailing list: kura-dev
RSS Feed
Archive
Build Enterprise Java on Kubernetes!
A co-located event with KubeCon + CloudNativeCon EU on March 30, 2020
Register Today
Eclipse Foundation
About Us
Contact Us
Donate
Governance
Logo and Artwork
Board of Directors
Legal
Privacy Policy
Terms of Use
Copyright Agent
Eclipse Public License
Legal Resources
Useful Links
Report a Bug
Documentation
How to Contribute
Mailing Lists
Forums
Marketplace
Other
IDE and Tools
Community of Projects
Working Groups
Research@Eclipse
Report a Vulnerability
Service Status
Copyright © Eclipse Foundation, Inc. All Rights Reserved.
Back to the top
Building IoT Mashups for Industry 4.0 with Eclipse Kura and Kura Wires
// <![CDATA[ // Setting custom variable [slot = 3, scope = 3(page level)] for tracking source (related, search etc) of pageview window._gaq.push(['_setCustomVar', 3, 'source', 'not_set', 3]); window._gaq.push(['_trackEvent', 'bigfoot_slideview', 'pageload', slideshare_object.gam_cat_name, undefined, true]); // ]]> <!-- slideshare_object.deploy_environment = 'production'; //-->
User Agreement
and
Privacy Policy
.
Privacy Policy
and
User Agreement
for details.
SlideShare
Explore
Search
You
Upload
Login
Signup
Submit Search
Home
Explore
Presentation Courses
PowerPoint Courses
by
LinkedIn Learning
Successfully reported this slideshow.
We use your LinkedIn profile and activity data to personalize ads and to show you more relevant ads.
You can change your ad preferences anytime.
Building IoT Mashups for Industry 4.0 with Eclipse Kura and Kura Wires
Upcoming SlideShare
Loading in …
5
×
1
1
of
36
Like this presentation? Why not share!
Share
Email
Eclipse Kura Shoot a-pi
by Eclipse Kura
4554 views
Creating end-to-end IoT application...
by Solair
2996 views
Kura M2M IoT Gateway
by Eurotech
9876 views
Présentation de Zenika - Jan 2010
by Stefane Fermigier
1317 views
Integrating Moodle With Enterprise ...
by moorejon
3094 views
Moodle intégré à l 'ENT: une expéri...
by Dominique_Z
1098 views
Share SlideShare
Facebook
Twitter
LinkedIn
Embed
Size (px)
Start on
Show related SlideShares at end
WordPress Shortcode
Link
Building IoT Mashups for Industry 4.0 with Eclipse Kura and Kura Wires
3,228 views
Share
Like
Download
...
Eclipse Kura
Follow
Published on
Jan 13, 2017
The presentation contains a real Industry 4.0 use cases that will take advantage of sensors connected through Modbus and mapped in Kura Wires with corresponding Assets. A complete dataflow model will also be presented
...
Published in:
Engineering
4 Comments
4 Likes
Statistics
Notes
Full Name
Comment goes here.
12 hours ago
Delete
Reply
Block
Are you sure you want to
Yes
No
Your message goes here
Post
kerbextsingren94
Dating direct: ♥♥♥ http://bit.ly/2u6xbL5 ♥♥♥
1 month ago
Reply
Are you sure you want to
Yes
No
Your message goes here
kerbextsingren94
Sex in your area is here: ❶❶❶ http://bit.ly/2u6xbL5 ❶❶❶
1 month ago
Reply
Are you sure you want to
Yes
No
Your message goes here
zhangxu16
Thanks for sharing
11 months ago
Reply
Are you sure you want to
Yes
No
Your message goes here
Giap Nguyen
,
--
Thanks for sharing this!
2 years ago
Reply
Are you sure you want to
Yes
No
Your message goes here
Lukas Ott
10 months ago
prafullkotecha
11 months ago
zhangxu16
11 months ago
Stanley Wang
,
Solutions Architect
at
Honeywell
1 year ago
No Downloads
Views
Total views
3,228
On SlideShare
0
From Embeds
0
Number of Embeds
9
Actions
Shares
0
Downloads
124
Comments
4
Likes
4
Embeds
0
No embeds
No notes for slide
Committer Eclipse Kura
Developer ESF (built on top of Kura)
Involved Kapua
Data processed and managed to have a complete overview of
Production status
Product lifecycle
IoT is heart of this 4° industrial evolution
Consumer
In the context of IIoT, at the field level, we believe Eclipse Kura can be the right solution for the mentioned Industry 4.0 and IoT problems
Focus on specific business vertical
9+ Million Java Developers
The most popular programming language
High-level Programming Language
Shorter Time-to-Market
Device Abstraction
Application Portability
Investment Protection
Built-in OSGi Services for IoT Apps
Software Modularity
Configuration Management
Application Management
Integrated Device Cloud features
Operational technology
Information technology
Building IoT Mashups for Industry 4.0 with Eclipse Kura and Kura Wires
1. Building IoT Mashups for Industry 4.0 with Eclipse Kura and Kura Wires Amit Kumar Mondal (Technical University of Munich, Germany) Matteo Maiero (Eurotech S.p.A, Italy) Virtual IoT Meetup 12 January 2017
2.
Agenda • Industry 4.0 and IoT Challenges – Brownfield Engineering – Problems • Eclipse Kura – Introduction – Encapsulating Complexity – Architecture • Kura Wires – Dataflow Programming – Terminologies – Kura Asset Model • Demo • Recap – Current Status – Next Steps
3.
Industry 4.0
4.
IoT Challenges Fragmentation Complexity Lock-in
5.
Fragmentation Protocols to Cloud – MQTT – LWM2M – CoAP – AllSeen Sensor Protocols – CANBus – MODBus – OPC-UA – Bluetooth – BLE – DECT – ZigBee – Z-Wave Hardware – ARM – Intel Standards – oneM2M – Thread – AllSeen – Industrial Internet Consortium – IEEE
6.
Complexity Reliability – Store and forward – Best Effort – Guaranteed Maintenance and Lifecycle Management – Deployment/Install – Upgrade – Provisioning/Configuration Security – Sensors – Data – Network Network Management – LAN – WAN – Cell Integration – Heterogeneous environments
7.
Lock-in Hardware Sensor(s) Vertical Market Protocol(s)
8.
Internet / TCP/IP Sometimes M2M Solutions look simple … Business Application Sensors, Actuators, Displays, … Service Gateway Single or no special application on gateway A single application to communicate with Only one type of Gateway HW & SW Only one type of device / sensor No connectivity options required Embracing IoT Complexity
9.
Internet / TCP/IP Ethernet WiFi 3G / LTE Satellite WiMAX Other ... but for some of them it gets complex Business Application Sensors, Actuators, Displays, … • Multiple services on the gateway / edge node • Different connectivity options • Customer specific business logic 2G / 2.5G xDSL Cable
10.
... Geographically Dispersed … Business Applications Sensors, Actuators, Displays, … Multi- Service Gateway ?
11.
Embracing IoT Complexity How to accelerate overall solution engineering process? How to include phased, incremental changes? Business Applications Sensors, Actuators, Displays, … ? @ 11
12.
IoT Challenges Addressing the Challenges Fragmentation Complexity Lock-in ✔ ✔ ✔
13.
Upwards Abstraction towards Business Tiers Complexity tamed bottom up. Business Applications@ IoT Integration Platform Operational Technologies Cloud-side @ Enterprise Information Technologies Data & Analytics Platform Sensors, Actuators, HMI, SCADA, PLC Multi-Service Gateway 13
14.
Linux OS Embedded App KURA is the open source Java and OSGi- based Application Framework for M2M Service Gateways in the Eclipse IoT Working Group. Purpose Simplify the design, deployment and remote management of embedded applications. It provides • Cohesive and integrated app environment • Modular software components • HW abstraction layer • Field protocol libraries • Cloud connectivity • Remote app and device management • Local app and device management • Development tools Java/OSGi M2M gatewaysSmart Sensors Industrial HW Open HW • Raspberry PI • BeagleBone Black
15.
Encapsulating complexity Increase productivity and decrease cultural barriers OSGi on Linux Hardware Java VM Code Code Code Kura helps customer focusing on their core business
16.
Kura’s Benefits Kura helps Customers focusing on their core competences (Customer‘s differentiators), by supplying highly integrated modular, common building blocks. This approach provides partners with a competitive advantage by ensuring: • Reduced development time → Shorter time to market • Less required resources → Reduced development costs • Hardware virtualization → Better investment protection • More deterministic project execution → In time market introduction • Focus on the application → Differentiate your offering and products • Portable, robust code → Higher quality software • Standard based → Future-proofed, Investments protection • Remote app management → Extended product lifecycle
17.
Java SE 7 / 8 (OpenJDK) OSGi Application Container (Eclipse Equinox, Concierge) Device Abstraction javax.comm Basic Gateway Services DB Service Clock Service Device Profile Watchdog Network ConfigurationNetwork Configuration Field ProtocolsConnectivity and Delivery Data Services MQTT Paho AdministrationGUI Applications Your Application RemoteManagement Configuration Management javax.usb w/ udev access Cloud Services Your Application Firewall, Port Forwarding Link Monitors Cellular, Wi-Fi, Ethernet GPS Position GPIO / SPI / PWM / I2C jdk.dio Modbus CANBus Custom Protocols Updates Management RemoteAccess Java HID APIs javax.bluetooth / BLE ... Eclipse Open IoT Stack for Java Add your app Add your app
18.
Agenda • Kura Wires – Dataflow Programming – Terminologies – Kura Asset Model • Demo • Recap – Current Status – Next Steps 18
19.
Industrial IoT Gateways From Prototype to Production Efficient Development & Investment Protection Software portability across HW Platforms Open Hardware Open Software
20.
Eclipse Kura seems powerful for my PoC How can I build my PoC very easily using Eclipse Kura? Oh no! I have to learn Java and OSGi! Different People Different Needs
21.
Solution Approach... Dataflow Programming … • have inputs and/or outputs • produce outputs • consume inputs • abstract underlying logics • highly reusable and portable Application Logic is expressed as a directed graph Nodes -
22.
Our Solution • without sacrificing much flexibility • raises the abstraction level • application logic is simplified to node connections • extensible • Eclipse Marketplace Integration Eases developers task -
23.
Kura + Wires • Enhanced Functional Architecture Drivers CANbus ModbusOPC UA S7 Asset Management Asset Java SE 7 / 8 (OpenJDK) OSGi Application Container (Eclipse Equinox, Concierge) Device Abstraction javax.comm Basic Gateway Services DB Service Clock Service Device Profile Watchdog Network ConfigurationNetwork Configuration Connectivity and Delivery Data Services MQTT Paho AdministrationGUI Applications Your Application RemoteManagement Configuration Management javax.usb w/ udev access Cloud Services Firewall, Port Forwarding Link Monitors Cellular, Wi-Fi, Ethernet GPS Position GPIO / SPI / PWM / I2C jdk.dio Custom Protocols Updates Management RemoteAccess Java HID APIs javax.bluetooth / BLE Your Application Kura Wires ...
24.
Terminologies - Wire Graph Kura Wires Dataflow Graph known as Wire Graph
25.
Terminologies - Wire Component Each node in the Wire Graph is a Wire Component
26.
Terminologies - Wire Component Wire Component can be a producer of data and/or a consumer of data Wire Component 0..n 0..n 0..n Inputs to a Wire Component 0..n Outputs from a Wire Component Wire Components don’t need to have context specific knowledge about each other
27.
Terminologies - Asset • Enhanced Functional Architecture
28.
Terminologies - Asset Assets are special types of Wire Components that interact with transducers For example, Modbus PLC, S7 PLC or OPC-UA PLC etc. Device Driver Kura Asset Model Driver Asset Kura Wires
29.
Terminologies - Wire Logical connections between the Wire Components are known as Wires
30.
Terminologies - Wire Envelope Abstract data format decoupling Wire Components to have context specific knowledge
31.
Preliminary Wire Components and Drivers Publisher Subscribe r DB Store DB Filter Asset Logger Timer
32.
Demo
33.
An IIoT Use Case A newly installed part of a plant based on Modicon PLC running Modbus RTU, connected to an Industrial Service Gateway and pushing data to Cloud instance Control operator intends to monitor the Modbus Device connected sensors’ data and change the statuses of the connected actuators using a dashboard
34.
Current Status • Contributed Kura Wires to the Kura repository – Available in the develop branch – Early access and testing • https://hudson.eclipse.org/kura/job/kura- develop/lastSuccessfulBuild/artifact/kura/distrib/target/ • Master Thesis – Kura Wires: Design and Development of a Component for managing Devices and Drivers in Eclipse Kura 2.0 by Amit Kumar Mondal https://osf.io/s3agq/ • Blog Posts – https://dzone.com/articles/kura-wires – https://dzone.com/articles/kura-wires-a-sneak-peek – https://dzone.com/articles/kura-wires-a-different-perspective-to-develop-iiot – https://dzone.com/articles/different-dataflow-programming-approaches-and- comp
35.
Next Steps – Milestone release by the end of January 2017 – Drivers publishing to Eclipse Marketplace • OPC-UA • Modbus – More drivers – Improved documentation
36.
Amit Kumar Mondal Matteo Maiero admin@amitinside.com matteo.maiero@eurotech.com https://github.com/eclipse/kura Twitter: @eclipsekura Thank You!
Recommended
Teaching Techniques: Classroom Management
Online Course - LinkedIn Learning
Teaching Techniques: Project-Based Learning
Online Course - LinkedIn Learning
Learning Study Skills
Online Course - LinkedIn Learning
Eclipse Kura Shoot a-pi
Eclipse Kura
Creating end-to-end IoT applications with Eclipse Kura & Solair IoT Platform
Solair
Kura M2M IoT Gateway
Eurotech
Présentation de Zenika - Jan 2010
Stefane Fermigier
Integrating Moodle With Enterprise Systems
moorejon
Moodle intégré à l 'ENT: une expérimentation dans 31 établissements de l'acad...
Dominique_Z
Steps to Scale Internet of Things (IoT)
Rafael Maranon
English
Español
Português
Français
Deutsch
About
Dev & API
Blog
Terms
Privacy
Copyright
Support
LinkedIn Corporation © 2020
×
Share Clipboard
×
Facebook
Twitter
LinkedIn
Link
Public clipboards featuring this slide
×
No public clipboards found for this slide
Select another clipboard
×
Looks like you’ve clipped this slide to
already.
Create a clipboard
You just clipped your first slide!
Clipping is a handy way to collect important slides you want to go back to later. Now customize the name of a clipboard to store your clips.
Name*
Description
Visibility
Others can see my Clipboard
Cancel
Save
