[
    {
        "Id": 1,
        "Description": "Message Queuing Telemetry Transport",
        "Keys": [
            "MQTT",
            "ZMQ",
            "RabbitMQ"
        ],
        "projects": [
            {
                "Project": "paho",
                "Sentences": [
                    "MQTT and MQTT-SN are lightweight publish/subscribe messaging transports for TCP/IP and connectionless protocols (such as UDP) respectively.",
                    "of MQTT and MQTT-SN in a variety of programming languages.",
                    "Under the Paho banner, open source client libraries for MQTT are being curated and developed; there are already MQTT C and Java libraries with Lua, Python, C++ and JavaScript at various stages of development.",
                    "In this article we'll be showing how to use the Paho Java MQTT libraries to publish and subscribe.",
                    "Practical MQTT with Paho \u00bb",
                    "In this article we\u2019ll show how MQTT and the Eclipse Paho project can let you answer that challenge.",
                    "Talking Small: Using Eclipse Paho's MQTT on BeagleBone Black and Raspberry Pi \u00bb",
                    "MQTT is a light weight publish/subscribe messaging protocol, originally created by IBM and Arcom (later to become part of Eurotech) around 1998.",
                    "MQTT is an",
                    "MQTT 3.1.1 is also an ISO standard",
                    "MQTT.org",
                    "There is an Eclipse IoT sandbox MQTT server available at",
                    "Practical MQTT with Paho",
                    "Practical MQTT with Paho",
                    "Practical MQTT with Paho",
                    "Why MQTT?",
                    "MQTT",
                    "MQTT was originally created by IBM's Andy Stanford-Clark and Arlen Nipper of Arcom (taken over later by Eurotech) as a complement to enterprise messaging systems so that a wealth of data outside the enterprise could be safely and easily brought inside the enterprise.",
                    "MQTT is a publish/subscribe messaging system that allows clients to publish messages without concerning themselves about their eventual destination; messages are sent to an MQTT broker where they may be retained.",
                    "The messages' payloads are just a sequence of bytes, up to 256MB, with no requirements placed on the format of those payloads and with the MQTT protocol usually adding a fixed header of two bytes to most messages.",
                    "To allow for the variety of possible situations where MQTT can be put to use, it lets clients and brokers set a \"Quality of Service\" on a per-message basis from \"fire and forget\" to \"confirmed delivery\".",
                    "MQTT also has a very light API, with all of five protocol methods, making it easy to learn and recall, but there's also support for SSL-encrypted connections and username/password authentication for clients to brokers.",
                    "Since making its debut, MQTT has proved itself in production scenarios.",
                    "As well as standalone MQTT brokers, it has also been integrated into other message queuing brokers such as ActiveMQ and RabbitMQ, providing a bridge into the enterprise network.",
                    "MQTT 3.1",
                    "is being used as the basis for an OASIS standard for messaging telemetry, a basis that\u2019s not expected to vary much, if at all, from the MQTT specification in order to maintain compatibility.",
                    "MQTT is a protocol and protocols need client implementations.",
                    "Under the Paho banner, open source client libraries for MQTT are being curated and developed; there are already MQTT C and Java libraries with Lua, Python, C++ and JavaScript at various stages of development.",
                    "In this article we'll be showing how to use the Paho Java MQTT libraries to publish and subscribe.",
                    "Diving deeper into MQTT",
                    "To start thinking about MQTT in code, here's the simplest use of the MQTT API:",
                    "In this snippet, we create a client connection to an MQTT broker running on the local host, over TCP to port 1883 (the default port for MQTT).",
                    "To avoid the obvious problem of every client getting every message published by every other client, MQTT messages are published with what are called",
                    "Finally we disconnect from the broker and we've completed an MQTT session.",
                    "A broker in MQTT handles receiving published messages and sending them on to any clients who have subscribed.",
                    "broker is by far the easiest to configure and run for MQTT-only work.",
                    "The Eclipse Foundation is no stranger to Mosquitto \u2013 it runs a public instance of Mosquitto as an MQTT sandbox on",
                    "First, as the Paho MQTT code isn't in Maven Central (yet), we need to include its repository \u2013 open the",
                    "We've now got a basic Paho MQTT publish client running and we can start exploring the various options available.",
                    "Each message in MQTT can have its quality of service and retain flag set.",
                    "The core of listening to MQTT activity in the Java API is the",
                    "One important point to note is that we have, for simplicity, only covered the synchronous version of the API where every call to the MQTT API blocks and the only thing that comes through on its own schedule are inbound messages from subscriptions.",
                    "When you progress further into developing MQTT-based applications, it is worth considering whether using the synchronous API or the asynchronous API is more appropriate for your case.",
                    "Serving statistics via MQTT",
                    "So, MQTT and the Paho project gives us a flexible, lightweight protocol with Java and C and Lua and other implementations which can be easily tuned to a range of use cases and doesn't place requirements on how we pass data across it.",
                    "It\u2019s a powerful tool and we haven't even started looking at it in the environment it was designed for, in the Internet of Things connecting sensors to servers - we'll come to that in our next part of Practical MQTT with Paho.",
                    "MQTT",
                    "How to read MQTT messages from subscribed topics?",
                    "How to read MQTT messages from subscribed topics?",
                    "var contentTitle = \"Practical MQTT with Paho\", contentPath = \"/articles/practical-mqtt-with-paho\", contentUUID = \"1248a930-fcc8-43fe-9947-dd86d69bfe37\", authorUserCSVIds = \"101760065\";"
                ]
            },
            {
                "Project": "mosquitto",
                "Sentences": [
                    "Eclipse Mosquitto provides a lightweight server implementation of the MQTT protocol that is suitable for all situations from full power machines to embedded and low power machines.",
                    "Sensors and actuators, which are often the sources and destinations of MQTT messages, can be very small and lacking in power.",
                    "As well as accepting connections from MQTT client applications, Mosquitto has a bridge which allows it to connect to other MQTT servers, including other Mosquitto instances.",
                    "This allows networks of MQTT servers to be constructed, passing MQTT messages from any location in the network to any other, depending on the configuration of the bridges.",
                    "MQTT protocol discussion Google Group",
                    "MQTT Community",
                    "OASIS MQTT Technical Committee"
                ]
            },
            {
                "Project": "californium",
                "Sentences": [
                    "Together with MQTT, CoAP is one of the popular IoT protocols."
                ]
            },
            {
                "Project": "kura",
                "Sentences": [
                    "It features ready-to-use field protocols (including Modbus, OPC-UA, S7), an application container, and a web-based visual data flow programming to acquire data from the field, process it at the edge, and publish it to leading IoT Cloud Platforms through MQTT connectivity."
                ]
            },
            {
                "Project": "om2m",
                "Sentences": [
                    "Forwarding Request MQTT",
                    "[REQUEST] Official Release with MQTT binding feature pre-built",
                    "[Missing] MQTT binding enabled official release package in OM2M website",
                    "MQTT: Error in creating container/content instance on MN-CSE/IN-CSE",
                    "OM2M MQTT-TLS",
                    "Security over MQTT",
                    "Posting data object with MQTT",
                    "Posting data object with MQTT",
                    "OM2M MQTT Response Parameters",
                    "Create AE via MQTT Binding",
                    "MQTT Binding",
                    "Test MQTT blinding in OM2M",
                    "Test MQTT blinding in OM2M",
                    "MQTT?",
                    "Notification over MQTT",
                    "Problem when sending a notification over MQTT",
                    "MQTT Server Authorization (request/response topic)",
                    "Create OneM2M subscription resource with MQTT",
                    "(XML or JSON) Serialization of the request and response primitives in MQTT protocol"
                ]
            },
            {
                "Project": "ponte",
                "Sentences": [
                    "Ponte allows you to publish and receive the data using any protocol: HTTP, MQTT and CoAP.",
                    "You can mix and match: submit with CoAP and subscribe via MQTT.",
                    "Thanks to MQTT subscribes and CoAP observe, your devices can get updated in real-time.",
                    "Thanks to MQTT-over-Websockets, your users can too!",
                    "Ponte bridges three different application protocols: HTTP, MQTT and CoAP.",
                    "RabbitMQ",
                    "MQTT",
                    "MQTT API",
                    "MQTT",
                    "which implements most of the MQTT 3.1 spec."
                ]
            },
            {
                "Project": "4diac",
                "Sentences": [
                    "MQTT Implementation in 4diac",
                    "MQTT",
                    "Installing and Configuring MQTT in 4diac",
                    "ID data format and SD/RDs config for MQTT communication",
                    "some suggestions for improving MQTT layer"
                ]
            },
            {
                "Project": "hono",
                "Sentences": [
                    "Hono supports devices communicating via common IoT protocols like HTTP, MQTT and AMQP out of the box."
                ]
            },
            {
                "Project": "kapua",
                "Sentences": [
                    "Connect IoT devices to Kapua via MQTT and other protocols."
                ]
            },
            {
                "Project": "unide",
                "Sentences": [
                    "We started to capture this information in a simple payload specification and just like in the introducing language example where you can use phrases via phone, letter or in person, the payload is meant to be sent over different protocols (REST, MQTT, AMQP)."
                ]
            },
            {
                "Project": "tahu",
                "Sentences": [
                    "It addresses the existence of legacy SCADA/DCS/ICS protocols and infrastructures and provides a much-needed definition of how best to apply MQTT into these existing industrial operational environments.",
                    "Tahu is currently addressing the following features required for MQTT centric IIoT:",
                    "Well-defined MQTT Topic Namespace applicable for the IIoT market",
                    "In order to be interoperable across the plethora of OEM device manufacturers of industrial equipment and the SCADA/HMI/Control/Cloud Services backend components that desired to subscribe to the resulting information a well-defined MQTT topic namespace needs to be defined.",
                    "The topic namespace needs to provide both the contextual information all the way to an individual device in the field, but also provide topic \u201cverbs\u201d to efficiently manage the \u201clife cycle\u201d of an MQTT session.",
                    "Efficient MQTT payload definition",
                    "Staying with the original intent of MQTT, the payload specification needs to stay \u201clean and mean\u201d to best utilize low bandwidth networks (VSAT, Radio, Cellular).",
                    "MQTT STATE Management definition",
                    "MQTT has the awareness of the current MQTT session built in using the LWT feature.",
                    "But for STATE aware OT applications like SCADA/DCS/FCS, there needs to be a succinct definition on how best to use MQTT\u2019s built in STATE awareness in an overall SCADA/DCS/ICS infrastructure."
                ]
            }
        ]
    },
    {
        "Id": 2,
        "Description": "Open Platform Communication Unified Architecture",
        "Keys": [
            "OPC UA"
        ],
        "projects": [
            {
                "Project": "4diac",
                "Sentences": [
                    "Improved OPC UA support for 4diac",
                    "OPC UA connection issue",
                    "Need OPC UA enabled forte.exe",
                    "Issues on implementing OPC UA with 4DIAC and OpenModelica",
                    "OPC UA implementation with client on 4DIAC and server on OpenModleica",
                    "Issues compiling Forte with OPC UA module included in Linux(Ubuntu 16.04)",
                    "Issues compiling Forte with OPC UA module included in Windows",
                    "Docker alpine Image - Forte & OPC UA - compiling errrors",
                    "I'm creating a Docker alpine image with Forte & OPC UA; however, I get Forte compiling errors",
                    "Cross compiling WAGO BSP along with OPC UA forte",
                    "Cross compiling WAGO BSP along with OPC UA forte",
                    "OPC UA Server to PLC Simulator connectivity",
                    "Read and Write OPC UA variables on a remote Siemens S7 PLC server",
                    "Function Block to allow write in some OPC UA variable in the FORTE application running OPCUA Server",
                    "Memory Error while running OPC UA"
                ]
            }
        ]
    },
    {
        "Id": 3,
        "Description": "Datagram Transport Layer Security",
        "Keys": [
            "DTLS"
        ],
        "projects": [
            {
                "Project": "californium",
                "Sentences": [
                    "It implements DTLS 1.2 to secure your application through ECC with pre-shared keys, certificates, or raw public keys."
                ]
            },
            {
                "Project": "leshan",
                "Sentences": [
                    "DTLS based security",
                    "DTLS implementation"
                ]
            },
            {
                "Project": "wakaama",
                "Sentences": [
                    "DTLS based security"
                ]
            },
            {
                "Project": "tinydtls",
                "Sentences": [
                    "tinydtls is a library for Datagram Transport Layer Security (DTLS) covering both the client and the server state machine."
                ]
            }
        ]
    },
    {
        "Id": 4,
        "Description": "Production Performance Management Protocol",
        "Keys": [
            "PPMP"
        ],
        "projects": [
            {
                "Project": "unide",
                "Sentences": [
                    "PPMP",
                    "PPMP"
                ]
            }
        ]
    },
    {
        "Id": 5,
        "Description": "Attribute-based access control",
        "Keys": [
            "ABAC"
        ],
        "projects": [
            {
                "Project": "keti",
                "Sentences": [
                    "Keti is a service that was designed to protect RESTfuls API using Attribute Based Access Control (ABAC)."
                ]
            }
        ]
    },
    {
        "Id": 6,
        "Description": "open standard APplication Platform for carS and TrAnsportation vehiCLEs",
        "Keys": [
            "APPSTACLE"
        ],
        "projects": [
            {
                "Project": "kuksa",
                "Sentences": [
                    "EclipseCon Europe 2019 Presentation: Using Eclipse Kuksa for Connected Vehicle Services \u2026 is presented by project comitters and contributers at the EclispeCon Europe 2019: EclipseCon Europe 2019 Interview: APPSTACLE & Eclilpse Kuksa",
                    "APPSTACLE project"
                ]
            }
        ]
    },
    {
        "Id": 7,
        "Description": "Automotive Grade Linux",
        "Keys": [
            "AGL"
        ],
        "projects": []
    },
    {
        "Id": 8,
        "Description": "Data Distribution Service",
        "Keys": [
            "DDS"
        ],
        "projects": [
            {
                "Project": "om2m",
                "Sentences": [
                    "Eclipse Cyclone DDS"
                ]
            },
            {
                "Project": "4diac",
                "Sentences": [
                    "Eclipse Cyclone DDS"
                ]
            },
            {
                "Project": "cyclonedds",
                "Sentences": [
                    "Eclipse Cyclone DDS | projects.eclipse.org",
                    "Eclipse Cyclone DDS",
                    "Eclipse Cyclone DDS",
                    "Eclipse Cyclone DDS is an implementation of the OMG Data Distribution Service (DDS) specification (see http://www.omg.org/spec/DDS/ ) and the related specifications for interoperability (see http://www.omg.org/spec/DDSI-RTPS/ )",
                    "The OMG DDS standard is recognized as a highly applicable standard for reliable and robust data-sharing in business- and mission-critical environments (",
                    "Eclipse Cyclone DDS offers unique data-sharing capabilities compared to the already existing Eclipse solutions (i.e.",
                    "Eclipse Cyclone DDS"
                ]
            }
        ]
    },
    {
        "Id": 9,
        "Description": "Web of Thing",
        "Keys": [
            "WoT"
        ],
        "projects": [
            {
                "Project": "thingweb",
                "Sentences": [
                    "node-wot is the official reference implementation of the W3C WoT Working Group and implements the so-called \"Servient Architecture\":",
                    "WoT Thing Description",
                    "WoT Binding Templates",
                    ", as well as a runtime system (\"WoT Runtime\") providing the",
                    "WoT Scripting API",
                    "A Thing Directory is a directory service for WoT Thing Descriptions (TDs) that provides a Web interface to register TDs (aligned with"
                ]
            }
        ]
    },
    {
        "Id": 10,
        "Description": "the standard for contactless tickets and cards",
        "Keys": [
            "Calypso"
        ],
        "projects": [
            {
                "Project": "keyple",
                "Sentences": [
                    "The project hosts a first extension to support the Calypso ticketing solution.",
                    "Keyple Calypso",
                    "Calypso standard"
                ]
            }
        ]
    }
]