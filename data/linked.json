[
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 1,
        "Description": "Message Queuing Telemetry Transport",
        "Keys": [
            "MQTT",
            "ZMQ",
            "RabbitMQ"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "paho",
                "Sentences": [
                    "A broker in MQTT handles receiving published messages and sending them on to any clients who have subscribed.",
                    "As well as standalone MQTT brokers, it has also been integrated into other message queuing brokers such as ActiveMQ and RabbitMQ, providing a bridge into the enterprise network.",
                    "Diving deeper into MQTT",
                    "Each message in MQTT can have its quality of service and retain flag set.",
                    "Finally we disconnect from the broker and we've completed an MQTT session.",
                    "First, as the Paho MQTT code isn't in Maven Central (yet), we need to include its repository – open the",
                    "How to read MQTT messages from subscribed topics?",
                    "In this article we'll be showing how to use the Paho Java MQTT libraries to publish and subscribe.",
                    "In this article we’ll show how MQTT and the Eclipse Paho project can let you answer that challenge.",
                    "In this snippet, we create a client connection to an MQTT broker running on the local host, over TCP to port 1883 (the default port for MQTT).",
                    "It’s a powerful tool and we haven't even started looking at it in the environment it was designed for, in the Internet of Things connecting sensors to servers - we'll come to that in our next part of Practical MQTT with Paho.",
                    "MQTT",
                    "MQTT 3.1",
                    "MQTT 3.1.1 is also an ISO standard",
                    "MQTT also has a very light API, with all of five protocol methods, making it easy to learn and recall, but there's also support for SSL-encrypted connections and username/password authentication for clients to brokers.",
                    "MQTT and MQTT-SN are lightweight publish/subscribe messaging transports for TCP/IP and connectionless protocols (such as UDP) respectively.",
                    "MQTT is a light weight publish/subscribe messaging protocol, originally created by IBM and Arcom (later to become part of Eurotech) around 1998.",
                    "MQTT is a protocol and protocols need client implementations.",
                    "MQTT is a publish/subscribe messaging system that allows clients to publish messages without concerning themselves about their eventual destination; messages are sent to an MQTT broker where they may be retained.",
                    "MQTT is an",
                    "MQTT was originally created by IBM's Andy Stanford-Clark and Arlen Nipper of Arcom (taken over later by Eurotech) as a complement to enterprise messaging systems so that a wealth of data outside the enterprise could be safely and easily brought inside the enterprise.",
                    "MQTT.org",
                    "One important point to note is that we have, for simplicity, only covered the synchronous version of the API where every call to the MQTT API blocks and the only thing that comes through on its own schedule are inbound messages from subscriptions.",
                    "Practical MQTT with Paho",
                    "Practical MQTT with Paho »",
                    "Serving statistics via MQTT",
                    "Since making its debut, MQTT has proved itself in production scenarios.",
                    "So, MQTT and the Paho project gives us a flexible, lightweight protocol with Java and C and Lua and other implementations which can be easily tuned to a range of use cases and doesn't place requirements on how we pass data across it.",
                    "Talking Small: Using Eclipse Paho's MQTT on BeagleBone Black and Raspberry Pi »",
                    "The Eclipse Foundation is no stranger to Mosquitto – it runs a public instance of Mosquitto as an MQTT sandbox on",
                    "The core of listening to MQTT activity in the Java API is the",
                    "The messages' payloads are just a sequence of bytes, up to 256MB, with no requirements placed on the format of those payloads and with the MQTT protocol usually adding a fixed header of two bytes to most messages.",
                    "There is an Eclipse IoT sandbox MQTT server available at",
                    "To allow for the variety of possible situations where MQTT can be put to use, it lets clients and brokers set a \"Quality of Service\" on a per-message basis from \"fire and forget\" to \"confirmed delivery\".",
                    "To avoid the obvious problem of every client getting every message published by every other client, MQTT messages are published with what are called",
                    "To start thinking about MQTT in code, here's the simplest use of the MQTT API:",
                    "Under the Paho banner, open source client libraries for MQTT are being curated and developed; there are already MQTT C and Java libraries with Lua, Python, C++ and JavaScript at various stages of development.",
                    "We've now got a basic Paho MQTT publish client running and we can start exploring the various options available.",
                    "When you progress further into developing MQTT-based applications, it is worth considering whether using the synchronous API or the asynchronous API is more appropriate for your case.",
                    "Why MQTT?",
                    "broker is by far the easiest to configure and run for MQTT-only work.",
                    "is being used as the basis for an OASIS standard for messaging telemetry, a basis that’s not expected to vary much, if at all, from the MQTT specification in order to maintain compatibility.",
                    "of MQTT and MQTT-SN in a variety of programming languages.",
                    "var contentTitle = \"Practical MQTT with Paho\", contentPath = \"/articles/practical-mqtt-with-paho\", contentUUID = \"1248a930-fcc8-43fe-9947-dd86d69bfe37\", authorUserCSVIds = \"101760065\";"
                ],
                "relationships": [
                    "use"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "mosquitto",
                "Sentences": [
                    "As well as accepting connections from MQTT client applications, Mosquitto has a bridge which allows it to connect to other MQTT servers, including other Mosquitto instances.",
                    "Eclipse Mosquitto provides a lightweight server implementation of the MQTT protocol that is suitable for all situations from full power machines to embedded and low power machines.",
                    "MQTT Community",
                    "MQTT protocol discussion Google Group",
                    "OASIS MQTT Technical Committee",
                    "Sensors and actuators, which are often the sources and destinations of MQTT messages, can be very small and lacking in power.",
                    "This allows networks of MQTT servers to be constructed, passing MQTT messages from any location in the network to any other, depending on the configuration of the bridges."
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "californium",
                "Sentences": [
                    "Together with MQTT, CoAP is one of the popular IoT protocols."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "kura",
                "Sentences": [
                    "It features ready-to-use field protocols (including Modbus, OPC-UA, S7), an application container, and a web-based visual data flow programming to acquire data from the field, process it at the edge, and publish it to leading IoT Cloud Platforms through MQTT connectivity."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "om2m",
                "Sentences": [
                    "(XML or JSON) Serialization of the request and response primitives in MQTT protocol",
                    "Create AE via MQTT Binding",
                    "Create OneM2M subscription resource with MQTT",
                    "Forwarding Request MQTT",
                    "MQTT Binding",
                    "MQTT Server Authorization (request/response topic)",
                    "MQTT: Error in creating container/content instance on MN-CSE/IN-CSE",
                    "MQTT?",
                    "Notification over MQTT",
                    "OM2M MQTT Response Parameters",
                    "OM2M MQTT-TLS",
                    "Posting data object with MQTT",
                    "Problem when sending a notification over MQTT",
                    "Security over MQTT",
                    "Test MQTT blinding in OM2M",
                    "[Missing] MQTT binding enabled official release package in OM2M website",
                    "[REQUEST] Official Release with MQTT binding feature pre-built"
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "ponte",
                "Sentences": [
                    "MQTT",
                    "MQTT API",
                    "Ponte allows you to publish and receive the data using any protocol: HTTP, MQTT and CoAP.",
                    "Ponte bridges three different application protocols: HTTP, MQTT and CoAP.",
                    "RabbitMQ",
                    "Thanks to MQTT subscribes and CoAP observe, your devices can get updated in real-time.",
                    "Thanks to MQTT-over-Websockets, your users can too!",
                    "You can mix and match: submit with CoAP and subscribe via MQTT.",
                    "which implements most of the MQTT 3.1 spec."
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "4diac",
                "Sentences": [
                    "ID data format and SD/RDs config for MQTT communication",
                    "Installing and Configuring MQTT in 4diac",
                    "MQTT",
                    "MQTT Implementation in 4diac",
                    "some suggestions for improving MQTT layer"
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "hono",
                "Sentences": [
                    "Hono supports devices communicating via common IoT protocols like HTTP, MQTT and AMQP out of the box."
                ],
                "relationships": [
                    "use"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "kapua",
                "Sentences": [
                    "Connect IoT devices to Kapua via MQTT and other protocols."
                ],
                "relationships": [
                    "use"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "unide",
                "Sentences": [
                    "We started to capture this information in a simple payload specification and just like in the introducing language example where you can use phrases via phone, letter or in person, the payload is meant to be sent over different protocols (REST, MQTT, AMQP)."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "tahu",
                "Sentences": [
                    "But for STATE aware OT applications like SCADA/DCS/FCS, there needs to be a succinct definition on how best to use MQTT’s built in STATE awareness in an overall SCADA/DCS/ICS infrastructure.",
                    "Efficient MQTT payload definition",
                    "In order to be interoperable across the plethora of OEM device manufacturers of industrial equipment and the SCADA/HMI/Control/Cloud Services backend components that desired to subscribe to the resulting information a well-defined MQTT topic namespace needs to be defined.",
                    "It addresses the existence of legacy SCADA/DCS/ICS protocols and infrastructures and provides a much-needed definition of how best to apply MQTT into these existing industrial operational environments.",
                    "MQTT STATE Management definition",
                    "MQTT has the awareness of the current MQTT session built in using the LWT feature.",
                    "Staying with the original intent of MQTT, the payload specification needs to stay “lean and mean” to best utilize low bandwidth networks (VSAT, Radio, Cellular).",
                    "Tahu is currently addressing the following features required for MQTT centric IIoT:",
                    "The topic namespace needs to provide both the contextual information all the way to an individual device in the field, but also provide topic “verbs” to efficiently manage the “life cycle” of an MQTT session.",
                    "Well-defined MQTT Topic Namespace applicable for the IIoT market"
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "streamsheets",
                "Sentences": [
                    ": Control, analysis, monitoring, visualization and simulation of industrial and other IoT processes (Smart Factory, Smart Building, Smart City, Smart Energy, Smart Farming, …) using MQTT, AMQP or other messaging protocols.",
                    "Streamsheets uses the MQTT protocol both for internal and external communication and uses Mosquitto as its standard MQTT broker.",
                    "The main dependencies for the backend are Express.js and MQTT.js.",
                    "using MQTT, AMQP, UDP, REST, POP, SMTP protocols or simple input from text files."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "zenoh",
                "Sentences": [
                    "Protocols used today to build these systems, such as MQTT, DDS, CoAP and HTTP were not designed with these needs in mind."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "technology testware",
                "Sentences": [
                    "Conformance test suites for MQTT and CoAP",
                    "Eclipse Titan has already protocol modules for CoAP and MQTT including type systems and codec.",
                    "Evaluation of test methods/tools for robustness and performance tests for MQTT and CoAP",
                    "Finish work for conformance test purposes and test suites for MQTT and CoAP",
                    "Finish work for robustness and performance test implementation for MQTT and CoAP",
                    "MQTT Discussion Group @ Google-Groups",
                    "Performance test suites for MQTT and CoAP",
                    "Prototypical implementation of robustness and performance tests scenarios for MQTT and CoAP",
                    "Robustness testing for MQTT and CoAP",
                    "Standardized conformance test purposes for MQTT and CoAP",
                    "Standardized performance test purposes for MQTT and CoAP",
                    "The biggest features are standardized test solutions for the IoT protocols MQTT and CoAP.",
                    "The initial contribution of IoT-Testware to Eclipse will focus on protocols like CoAP and MQTT."
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "technology sensinact",
                "Sentences": [
                    "Northbound bridges: this group includes implementation of remote access bridges to the platform such as REST APIs, JSON RPC, as well as publish subscribe protocols such as MQTT, XMPP, NGSI, etc.",
                    "Southbound bridges: this group includes implementation of bridges and adapters for various IoT protocols and platforms such as LoRa, Zigbee, IEEE 802.15.4, Sigfox, enOcean, CoAP, MQTT, XMPP, NGSI, HTTP, etc.",
                    "sensiNact thus provides connectivity support to those data sources including today’s IoT protocols and platforms such as LoRa, Zigbee, IEEE 802.15.4, Sigfox, enOcean, MQTT, XMPP, NGSI, HTTP, CoAP, etc."
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "agail",
                "Sentences": [
                    "- Integration of Eclipse Paho for the extention of the internal Agail RESTful API and support of MQTT as alternative messaging and data subscription mechanism",
                    "Eclipse Paho will be used as an internal broker for extending the Agail RESTful API and allowing developers to communicate with the Agail gateway components using the MQTT protocol for data interaction between applicatons and connected IoT devices and the internal data storage."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "moquette",
                "Sentences": [
                    "#MQTTClient",
                    ") Is an home automation framework, uses Moquette embedded to interface with MQTT world.",
                    "* Class responsible to handle the logic of MQTT protocol it's the director of",
                    "* SSL certificate loader used to open SSL connections (websocket and MQTT-S).",
                    ", request an account then use it from your MQTT clients.",
                    "2020-02-28 13:03:12.309 20418-20876/ I/System.out: 117404 [nioEventLoopGroup-5-1] INFO io.moquette.broker.metrics.MQTTMessageLogger - C->B CONNECT",
                    "2020-02-28 13:03:12.316 20418-20876/ I/System.out: 117412 [nioEventLoopGroup-5-1] DEBUG io.moquette.broker.MQTTConnection - Received MQTT message, type: CONNECT, channel: [id: 0x82488a46, L:/172.16.1.196:1883 - R:/172.16.1.196:38308]",
                    "2020-02-28 13:03:12.431 20418-20876/ I/System.out: 117431 [nioEventLoopGroup-5-1] ERROR io.moquette.broker.NewNettyMQTTHandler - Error processing protocol message: CONNECT",
                    "2020-02-28 13:03:12.432 20418-20876/ I/System.out: at io.moquette.broker.MQTTConnection.handleMessage(MQTTConnection.java:67)",
                    "2020-02-28 13:03:12.432 20418-20876/ I/System.out: at io.moquette.broker.MQTTConnection.login(MQTTConnection.java:235)",
                    "2020-02-28 13:03:12.432 20418-20876/ I/System.out: at io.moquette.broker.MQTTConnection.processConnect(MQTTConnection.java:160)",
                    "2020-02-28 13:03:12.433 20418-20876/ I/System.out: at io.moquette.broker.NewNettyMQTTHandler.channelRead(NewNettyMQTTHandler.java:58)",
                    "2020-02-28 13:03:12.433 20418-20876/ I/System.out: at io.moquette.broker.metrics.MQTTMessageLogger.channelRead(MQTTMessageLogger.java:46)",
                    "2020-02-28 13:03:12.450 20418-20876/ I/System.out: 117548 [nioEventLoopGroup-5-1] INFO io.moquette.broker.NewNettyMQTTHandler - Closed client channel due to exception in processing",
                    ">Moquette MQTT parent</",
                    ">Moquette MQTT</",
                    ">Moquette lightweight MQTT Broker</",
                    "?email_source=notifications&email_token=AAH5RUKNMO4ZMQSG3XPDDNLQ6F2OHA5CNFSM4KIDNQKKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEJHB7WQ#issuecomment-575545306>, or unsubscribe",
                    "?email_source=notifications&email_token=AAH5RUKNMO4ZMQSG3XPDDNLQ6F2OHA5CNFSM4KIDNQKKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEJHB7WQ#issuecomment-575545306>, or unsubscribe <",
                    "@@ -125,13 +125,13 @@ public void initialize(NewNettyMQTTHandler mqttHandler, IConfig props, ISslConte",
                    "@@ -154,9 +154,7 @@ public void initialize(NewNettyMQTTHandler mqttHandler, IConfig props, ISslConte",
                    "@@ -167,15 +165,21 @@ public void initialize(NewNettyMQTTHandler mqttHandler, IConfig props, ISslConte",
                    "@@ -200,7 +204,7 @@ private void initializePlainTCPTransport(NewNettyMQTTHandler handler, IConfig pr",
                    "@@ -209,33 +213,38 @@ private void initializePlainTCPTransport(NewNettyMQTTHandler handler, IConfig pr",
                    "@@ -25,11 +25,11 @@ Point your MQTT client to _broker.moquette.io_",
                    "@@ -273,7 +274,7 @@ private void initializeSSLTCPTransport(NewNettyMQTTHandler handler, IConfig prop",
                    "@@ -290,16 +291,7 @@ private void initializeSSLTCPTransport(NewNettyMQTTHandler handler, IConfig prop",
                    "@@ -67,8 +68,9 @@ private MQTTConnection createMQTTConnection(BrokerConfiguration config, Channel",
                    "Adding MQTT message interceptor.",
                    "An unexpected exception was caught while processing MQTT message.",
                    "Authenticator rejection results in MQTTMessageLogger error",
                    "Authenticator rejection results in MQTTMessageLogger error · Issue #463 · moquette-io/moquette · GitHub",
                    "Binding MQTTConnection (channel: {}) to session",
                    "Broker does not reject connections with clientId longer than 23 characters for MQTT v3.1",
                    "Client didn't supply any credentials and MQTT anonymous mode is disabled.",
                    "Client didn't supply any password and MQTT anonymous mode is disabled CId={}",
                    "Configuring MQTT authenticator",
                    "Configuring MQTT authorizator policy",
                    "Configuring SSL MQTT transport",
                    "Configuring TCP MQTT transport",
                    "Configuring Websocket MQTT transport",
                    "Configuring secure websocket MQTT transport",
                    "Connect with an MQTT Client using username/password (I used the paho Java client)",
                    "ERROR NewNettyMQTTHandler - Unexpected exception while processing MQTT message.",
                    "Exception was caught while processing MQTT message,",
                    "Exception was caught while processing MQTT message, {}",
                    "Expected behavior Ping Request messages should be notified using the Interceptor interface Actual behavior Currently Ping Requests are handled without any notification Steps to reproduce Feature request Minimal yet complete reproducer code (or URL to code) or complete log file N/A Moquette MQTT version 0.12.1 JVM version (e.g.",
                    "Fix issue #38, added aligned to MQTT 3.1.1",
                    "Flush written data in MQTTConnection#sendIfWritableElseDrop",
                    "GitHub - moquette-io/moquette: Java MQTT lightweight broker",
                    "GitHub - moquette-io/netty-mqtt5-codec: Netty codec implementation for MQTT3 and MQTT5",
                    "Hello MQTT 1",
                    "Hello MQTT 2",
                    "Hello MQTT World",
                    "Hello MQTT world!",
                    "Hello world MQTT!",
                    "I've lowered the log level for some logging that follows client side mistakes, such as a wrong MQTT version, not sending a client ID, or using incorrect credentials.",
                    "If you are hosting an MQTT broker and many different parties connect to your broker they can not see the broker logs (because it is hosted by - in this example - me) as the logs are not publicly available.",
                    "If you need to remove from appearing in such environment, do you think is more useful to raise up the log limit for the MQTTConnection logger in",
                    "Increasing Netty worker threads number is important in our use case that handles a lot of MQTT requests.",
                    "Initialized MQTT protocol processor",
                    "JVM lightweight MQTT broker for the Internet of Things.",
                    "Java MQTT lightweight broker",
                    "MQTT 3.1.2.8-17",
                    "MQTT Load Balancer with HAProxy",
                    "MQTT SSL not working",
                    "MQTT SSL not working · Issue #499 · moquette-io/moquette · GitHub",
                    "MQTT client ID doesn't have an associated session.",
                    "MQTT durable subscription exception",
                    "MQTT durable subscription exception · Issue #455 · moquette-io/moquette · GitHub",
                    "MQTT message interceptors={}",
                    "MQTT spy",
                    "MQTT throw SSL",
                    "MQTTConnection",
                    "MQTTConnection.java",
                    "MQTTConnectionConnectTest",
                    "MQTTConnectionConnectTest.java",
                    "MQTTConnectionFactory",
                    "MQTTConnectionFactory.java",
                    "MQTTConnectionPublishTest",
                    "MQTTConnectionPublishTest.java",
                    "MQTTConnection{channel=",
                    "MQTTException",
                    "MQTTMessageLogger",
                    "MQTTMessageLogger.java",
                    "MQTT_3_1",
                    "MQTT_3_1_1",
                    "MQTT_SUBPROTOCOL_CSV_LIST",
                    "MessageId=20314, CId=web_63, topic=OrganismStatus 97013256 [nioEventLoopGroup-3-1] INFO ConnectionDescriptorStore - Sending PUBLISH message CId=<web_63>, messageId=20314 97013256 [nioEventLoopGroup-3-1] ERROR NettyMQTTHandler - Exception was caught while processing MQTT message, null java.lang.IllegalStateException: Queue full at java.util.AbstractQueue.add(AbstractQueue.java:98) at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:312) at io.moquette.spi.DurableSession.enqueue(DurableSession.java:207) at io.moquette.spi.impl.MessagesPublisher.publish2Subscribers(MessagesPublisher.java:107) at io.moquette.spi.impl.MessagesPublisher.publish2Subscribers(MessagesPublisher.java:71) at io.moquette.spi.impl.Qos1PublishHandler.receivedPublishQos1(Qos1PublishHandler.java:70) at io.moquette.spi.impl.ProtocolProcessor.processPublish(ProtocolProcessor.java:470) at io.moquette.server.netty.NettyMQTTHandler.channelRead(NettyMQTTHandler.java:56) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.moquette.server.netty.metrics.MQTTMessageLogger.channelRead(MQTTMessageLogger.java:44) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.moquette.server.netty.metrics.MessageMetricsHandler.channelRead(MessageMetricsHandler.java:48) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.moquette.server.netty.metrics.BytesMetricsHandler.channelRead(BytesMetricsHandler.java:49) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:287) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926) at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134) at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579) at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138) at java.lang.Thread.run(Thread.java:748)",
                    "Moquette MQTT broker",
                    "Moquette MQTT version",
                    "Moquette aims to be a MQTT compliant broker.",
                    "Moquette is lightweight MQTT Java broker",
                    "Moquette is not started, MQTT message interceptor cannot be added.",
                    "Moquette is not started, MQTT message interceptor cannot be removed.",
                    "Moquette lightweight MQTT Broker",
                    "Netty codec implementation for MQTT3 and MQTT5",
                    "NettyMQTTHandler",
                    "NettyMQTTHandler.java",
                    "NewNettyMQTTHandler",
                    "NewNettyMQTTHandler.java",
                    "Part of moquette are used into the [Vertx MQTT module] (",
                    "Plans to support MQTT 5?",
                    "Point your MQTT client to",
                    "Processing MQTT message, type={}",
                    "Rejection of authentication results in an error in the MQTTMessageLogger and a failed",
                    "Removing MQTT message interceptor.",
                    "SSL MQTT",
                    "Stopping MQTT protocol processor",
                    "TCP MQTT",
                    "The Eclipse Foundation makes available all content in this plug-in (&quot;Moquette MQTT&quot;).",
                    "Unexpected exception while processing MQTT message.",
                    "Update MQTTMessageLogger.java",
                    "Vertx MQTT module",
                    "Websocket MQTT",
                    "at io.moquette.broker.MQTTConnection.readCompleted(MQTTConnection.java:507)",
                    "at io.moquette.broker.NewNettyMQTTHandler.channelReadComplete(NewNettyMQTTHandler.java:76)",
                    "broker/src/main/java/io/moquette/broker/MQTTConnection.java",
                    "broker/src/main/java/io/moquette/broker/MQTTConnectionFactory.java",
                    "broker/src/main/java/io/moquette/broker/NewNettyMQTTHandler.java",
                    "broker/src/main/java/io/moquette/server/netty/NettyMQTTHandler.java",
                    "broker/src/main/java/io/moquette/server/netty/metrics/MQTTMessageLogger.java",
                    "broker/src/main/java/org/dna/mqtt/moquette/server/netty/NettyMQTTHandler.java",
                    "broker/src/test/java/io/moquette/broker/MQTTConnectionConnectTest.java",
                    "broker/src/test/java/io/moquette/broker/MQTTConnectionPublishTest.java",
                    "broker/src/test/java/io/moquette/testclient/ClientNettyMQTTHandler.java",
                    "broker/src/test/java/org/dna/mqtt/moquette/server/MQTTWebSocket.java",
                    "broker/src/test/java/org/dna/mqtt/moquette/testclient/ClientNettyMQTTHandler.java",
                    "configureMQTTPipeline",
                    "configureMQTTPipeline(pipeline, timeoutHandler, handler);",
                    "createMQTTConnection",
                    "createMQTTConnection(",
                    "createMQTTConnection(config);",
                    "createMQTTConnection(config, channel);",
                    "createMQTTConnection(config, channel, postOffice);",
                    "createMQTTConnection(config, evilChannel, postOffice);",
                    "createMQTTConnectionWithPostOffice",
                    "createMQTTConnectionWithPostOffice(",
                    "is an home automation framework and uses Moquette embedded to interface with MQTT by a specific",
                    "logMQTTMessage",
                    "logMQTTMessage(ctx, message,",
                    "logMQTTMessage(ctx, msg,",
                    "moquette/MQTTConnection.java at 1ba9eb3613bc79d28c5d45d9c0984033d36d83af · moquette-io/moquette · GitHub",
                    "moquette/MQTTConnection.java at 7b9db6eafd6b2beaf59184b91493360b16c5e97f · moquette-io/moquette · GitHub",
                    "moquette/MQTTConnectionConnectTest.java at c4d928bbd71e34dd22690edc054aa528bf618cbf · moquette-io/moquette · GitHub",
                    "moquette/MQTTConnectionFactory.java at 1ba9eb3613bc79d28c5d45d9c0984033d36d83af · moquette-io/moquette · GitHub",
                    "moquette/MQTTConnectionPublishTest.java at c4d928bbd71e34dd22690edc054aa528bf618cbf · moquette-io/moquette · GitHub",
                    "moquette/MQTTMessageLogger.java at 033a428184ce1e8a134fda082c04346ac6858c61 · moquette-io/moquette · GitHub",
                    "moquette/NettyMQTTHandler.java at 033a428184ce1e8a134fda082c04346ac6858c61 · moquette-io/moquette · GitHub",
                    "moquette/NewNettyMQTTHandler.java at 1ba9eb3613bc79d28c5d45d9c0984033d36d83af · moquette-io/moquette · GitHub",
                    "netty_parser/src/main/java/org/dna/mqtt/moquette/parser/netty/MQTTDecoder.java",
                    "netty_parser/src/main/java/org/dna/mqtt/moquette/parser/netty/MQTTEncoder.java",
                    "org.dna.mqtt.moquette.MQTTException",
                    "parser_commons/src/main/java/org/dna/mqtt/moquette/MQTTException.java",
                    "perf/src/main/java/io/moquette/parser/netty/performance/LoopMQTTHandler.java",
                    "uses Moquette embedded to interface with MQTT"
                ],
                "relationships": [
                    "use"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "tools titan",
                "Sentences": [
                    "Formal verification of the implementation of the MQTT protocol in IoT devices",
                    "MQTT",
                    "MQTT CNL 113 831 R1C",
                    "MQTT CNL 113 831 R1D",
                    "git://git.eclipse.org/gitroot/titan/titan.ApplicationLibraries.MQTT.git",
                    "git://git.eclipse.org/gitroot/titan/titan.ProtocolModules.MQTT.git",
                    "http://git.eclipse.org/gitroot/titan/titan.ApplicationLibraries.MQTT",
                    "http://git.eclipse.org/gitroot/titan/titan.ProtocolModules.MQTT",
                    "titan/titan.ApplicationLibraries.MQTT -",
                    "titan/titan.ProtocolModules.MQTT -",
                    "• Protocol module variants from negative testing have been added to MQTT and CoAP"
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "rt ecf",
                "Sentences": [
                    "In addition to OSGi RS/RSA implementation, we will add support for an MQTT-based protocol providers, as well as bug fixes, significant improvements to existing providers, new features for network discovery, new tutorials, examples, and documentation.",
                    "MQTT Distribution Provider (based upon Eclipse Paho MQTT)"
                ],
                "relationships": []
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 2,
        "Description": "Open Platform Communication Unified Architecture",
        "Keys": [
            "OPCUA"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "4diac",
                "Sentences": [
                    "Cross compiling WAGO BSP along with OPC UA forte",
                    "Docker alpine Image - Forte & OPC UA - compiling errrors",
                    "Function Block to allow write in some OPC UA variable in the FORTE application running OPCUA Server",
                    "I'm creating a Docker alpine image with Forte & OPC UA; however, I get Forte compiling errors",
                    "Improved OPC UA support for 4diac",
                    "Issues compiling Forte with OPC UA module included in Linux(Ubuntu 16.04)",
                    "Issues compiling Forte with OPC UA module included in Windows",
                    "Issues on implementing OPC UA with 4DIAC and OpenModelica",
                    "Memory Error while running OPC UA",
                    "Need OPC UA enabled forte.exe",
                    "OPC UA Server to PLC Simulator connectivity",
                    "OPC UA connection issue",
                    "OPC UA implementation with client on 4DIAC and server on OpenModleica",
                    "Read and Write OPC UA variables on a remote Siemens S7 PLC server"
                ],
                "relationships": []
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 3,
        "Description": "Datagram Transport Layer Security",
        "Keys": [
            "DTLS"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "californium",
                "Sentences": [
                    "It implements DTLS 1.2 to secure your application through ECC with pre-shared keys, certificates, or raw public keys."
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "leshan",
                "Sentences": [
                    "DTLS based security",
                    "DTLS implementation"
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "wakaama",
                "Sentences": [
                    "DTLS based security"
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "tinydtls",
                "Sentences": [
                    "tinydtls is a library for Datagram Transport Layer Security (DTLS) covering both the client and the server state machine."
                ],
                "relationships": []
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 4,
        "Description": "Production Performance Management Protocol",
        "Keys": [
            "PPMP"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "unide",
                "Sentences": [
                    "PPMP"
                ],
                "relationships": []
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 5,
        "Description": "Attribute-based access control",
        "Keys": [
            "ABAC"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "keti",
                "Sentences": [
                    "Keti is a service that was designed to protect RESTfuls API using Attribute Based Access Control (ABAC)."
                ],
                "relationships": []
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 6,
        "Description": "open standard APplication Platform for carS and TrAnsportation vehiCLEs",
        "Keys": [
            "APPSTACLE"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "kuksa",
                "Sentences": [
                    "APPSTACLE project",
                    "EclipseCon Europe 2019 Presentation: Using Eclipse Kuksa for Connected Vehicle Services … is presented by project comitters and contributers at the EclispeCon Europe 2019: EclipseCon Europe 2019 Interview: APPSTACLE & Eclilpse Kuksa"
                ],
                "relationships": [
                    "use"
                ]
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 7,
        "Description": "Automotive Grade Linux",
        "Keys": [
            "AGL"
        ],
        "projects": []
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 8,
        "Description": "Data Distribution Service",
        "Keys": [
            "DDS"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "om2m",
                "Sentences": [
                    "Eclipse Cyclone DDS"
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "4diac",
                "Sentences": [
                    "Eclipse Cyclone DDS"
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "cyclonedds",
                "Sentences": [
                    "Eclipse Cyclone DDS",
                    "Eclipse Cyclone DDS is an implementation of the OMG Data Distribution Service (DDS) specification (see http://www.omg.org/spec/DDS/ ) and the related specifications for interoperability (see http://www.omg.org/spec/DDSI-RTPS/ )",
                    "Eclipse Cyclone DDS offers unique data-sharing capabilities compared to the already existing Eclipse solutions (i.e.",
                    "Eclipse Cyclone DDS | projects.eclipse.org",
                    "The OMG DDS standard is recognized as a highly applicable standard for reliable and robust data-sharing in business- and mission-critical environments ("
                ],
                "relationships": [
                    "interchangeable"
                ]
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "zenoh",
                "Sentences": [
                    "Protocols used today to build these systems, such as MQTT, DDS, CoAP and HTTP were not designed with these needs in mind.",
                    "Zenoh's authors have co-invented and built some of the communication infrastructures deployed today as part of telecommunication, aerospace and early Industrial Internet applications (notably DDS)."
                ],
                "relationships": []
            },
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "technology iceoryx",
                "Sentences": [
                    "Eclipse Cyclone DDS"
                ],
                "relationships": []
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 9,
        "Description": "Web of Thing",
        "Keys": [
            "WoT"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "thingweb",
                "Sentences": [
                    ", as well as a runtime system (\"WoT Runtime\") providing the",
                    "A Thing Directory is a directory service for WoT Thing Descriptions (TDs) that provides a Web interface to register TDs (aligned with",
                    "WoT Binding Templates",
                    "WoT Scripting API",
                    "WoT Thing Description",
                    "node-wot is the official reference implementation of the W3C WoT Working Group and implements the so-called \"Servient Architecture\":"
                ],
                "relationships": [
                    "interchangeable"
                ]
            }
        ]
    },
    {
        "py/object": "model.LinkKeyword.LinkKeyword",
        "Id": 10,
        "Description": "the standard for contactless tickets and cards",
        "Keys": [
            "Calypso"
        ],
        "projects": [
            {
                "py/object": "model.LinkKeyword.LinkProject",
                "Project": "keyple",
                "Sentences": [
                    "Calypso standard",
                    "Keyple Calypso",
                    "The project hosts a first extension to support the Calypso ticketing solution."
                ],
                "relationships": []
            }
        ]
    }
]